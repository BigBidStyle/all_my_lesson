Карманная сортировка (bucket sort) — это алгоритм сортировки, который разбивает список на равные интервалы, называемые
карманами, а затем сортирует элементы в каждом кармане отдельно. Затем элементы из всех карманов объединяются, чтобы
получить окончательно отсортированный список.

Преимущества карманной сортировки
Эффективность для равномерно распределённых данных. Эффективна для данных, которые равномерно распределены в пределах
заданного диапазона. Она работает особенно хорошо, когда входные данные равномерно распределены по интервалу значений.
Лёгкость реализации. Карманная сортировка относительно проста в реализации. Она требует только основных операций вставки
 и извлечения элементов из карманов.
Подходит для внешней сортировки. Хорошо подходит для сортировки данных, которые не могут поместиться в оперативную
память и требуют внешней сортировки. Она может использоваться в комбинации с другими алгоритмами, чтобы обработать
большие объёмы данных.

Недостатки алгоритма
Зависимость от диапазона значений. Алгоритм карманной сортировки эффективен только при ограниченном диапазоне значений,
что делает его неэффективным для сортировки больших наборов данных с широким диапазоном значений.
Дополнительное использование памяти. Алгоритм требует дополнительной памяти для создания и управления карманами,
особенно если количество возможных значений велико или неизвестно заранее.
Неустойчивость. Карманный алгоритм сортировки может изменять относительный порядок элементов с одинаковыми значениями.

Реализация карманной сортировки
def bucket_sort(lst):
    # Определяем количество карманов
    num_buckets = len(lst)
    # Создаём пустые карманы
    buckets = [[] for _ in range(num_buckets)]
    # Распределяем элементы по карманам
    for num in lst:
        index = int(num * num_buckets)  # Вычисляем индекс кармана для текущего элемента
        buckets[index].append(num)
    # Сортируем каждый карман отдельно
    for bucket in buckets:
        bucket.sort()
    # Объединяем элементы из всех карманов
    sorted_lst = []
    for bucket in buckets:
        sorted_lst += bucket
    return sorted_lst
# Пример использования
numbers = [0.42, 0.25, 0.75, 0.12, 0.9]
sorted_numbers = bucket_sort(numbers)
print(sorted_numbers)  # Вывод: [0.12, 0.25, 0.42, 0.75, 0.9]