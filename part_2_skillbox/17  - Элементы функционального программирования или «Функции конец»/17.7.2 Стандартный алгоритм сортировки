Стандартный алгоритм сортировки
В стандартной библиотеке Python есть готовая реализация алгоритма сортировки для списков. Она используется в функции
sorted() и методе list.sort(). Начиная с Python 2.3 стандартным алгоритмом для сортировки был выбран Timsort, его
разработал Тим Петерс (Tim Peters).

Timsort — гибридный алгоритм, который комбинирует идеи из сортировки слиянием (merge sort) и сортировки вставками
(insertion sort) для достижения эффективности в разных сценариях сортировки, при этом он сохраняет относительный порядок
 равных элементов.

Timsort — адаптивный алгоритм, который оптимизирован для разных случаев, включая частично отсортированные или обратно
отсортированные списки. Он эффективно обрабатывает списки с повторяющимися элементами.

Реализация алгоритма Timsort в Python скрыта от пользователя. Вам не требуется заботиться о деталях реализации, можно
просто использовать функцию sorted() или метод list.sort() для сортировки списков в Python, а библиотека сама
позаботится о выборе подходящего алгоритма сортировки в зависимости от данных и сценария использования.

Это не значит, что нужно полностью доверить всё функции sorted() и методу list.sort(). Знание разных алгоритмов
сортировки списков всё ещё важно для программиста по нескольким причинам:

* Эффективность. Разные алгоритмы сортировки имеют разную производительность в зависимости от размера списка и
особенностей данных. Зная разные алгоритмы сортировки и особенности текущей задачи, вы подберёте алгоритм, который будет
 работать быстрее стандартного.

* Адаптация к требованиям. Задачи могут требовать разных характеристик сортировки, таких как стабильность (сохранение
 относительного порядка одинаковых элементов), устойчивость к большим данным или затраты на дополнительную память.

* Общая культура программиста. Знание разных алгоритмов сортировки — часть общей культуры программиста, которая помогает
лучше понимать и анализировать алгоритмы и структуры данных. Это может улучшить способность решать задачи и создавать
более эффективные и оптимизированные программы. Нередко на собеседовании дают задачки на реализацию алгоритма сортировки.


Когда стандартная сортировка неэффективна
Хотя стандартная сортировка Timsort обычно обладает хорошей производительностью и обеспечивает стабильность, иногда
другие алгоритмы сортировки могут подойти лучше.

* Сортировка в обратном порядке. Если вам требуется отсортировать список в обратном порядке, использование стандартной
сортировки в Python может быть неэффективным. Лучше использовать алгоритм сортировки, специально разработанный для
сортировки в обратном порядке, например сортировку пузырьком (bubble sort) в обратном порядке.
* Сортировка частично отсортированных списков. Когда список уже частично отсортирован, стандартная сортировка Timsort
может потребовать дополнительных ресурсов и времени на выполнение сравнений и перемещений элементов. В таких ситуациях
алгоритмы, оптимизированные для почти отсортированных списков, такие как сортировка вставками (insertion sort) или
сортировка выбором (selection sort), могут быть более эффективными.
Ограниченные ресурсы. Если ваши ресурсы ограниченны (например, память), но вам нужно сортировать большие объёмы данных,
стандартная сортировка Timsort может быть не самым оптимальным выбором. Можно рассмотреть алгоритмы сортировки,
требующие меньше дополнительной памяти, например внешнюю сортировку слиянием (external merge sort) или
карманную/корзинную сортировку (bucket sort).

Реализация сортировки пузырьком.
def bubble_sort(lst):
    n = len(lst)
    for i in range(n - 1):
        for j in range(n - i - 1):
            # Сравниваем пару соседних элементов
             if lst[j] > lst[j + 1]:
                # Если элементы находятся в неправильном порядке, меняем их местами
                lst[j], lst[j + 1] = lst[j + 1], lst[j]
# Пример использования
 numbers = [5, 3, 8, 2, 1]
 bubble_sort(numbers)
 print(numbers)  # Вывод: [1, 2, 3, 5, 8]