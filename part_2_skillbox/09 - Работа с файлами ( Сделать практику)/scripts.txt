def gcd(a, b):
    while a != 0 and b != 0:
        if a > b:
            a = a % b
        else:
            b = b % a
    print('Наибольший общий делитель:', a + b)
gcd(4782, 698)

********************************************************************************

# Для сдачи зачёта студент Пётр написал программу, которая по координатам двух точек
# определяет уравнение прямой, проходящей через эти две точки, в виде y = k * x + b,
# где k и b — числа, означающие угловой коэффициент и вертикальное смещение прямой.
# Вот текст этой программы:

print("Введите первую точку")
x1 = float(input('X: '))
y1 = float(input('Y: '))
print("\nВведите вторую точку")
x2 = float(input('X: '))
y2 = float(input('Y: '))
x_diff = x1 - x2
y_diff = y1 - y2
if x_diff == 0:
    print("x = ", x1)
elif y_diff == 0:
    print("y = ", y1)
else:
    k = y_diff / x_diff
    b = y2 - k * x2
    print("Уравнение прямой, проходящей через эти точки:")
    print("y = ", k, " * x + ", b)

********************************************************************************

number = int(input("Введите число: "))
summa = 0

while number != 0:
    last_num = number % 10
    summa += last_num
    if last_num == 5:
        print("Обнаружен разрыв")
        break
    number //= 10
    print("Текущая сумма цифр", summa)

print("\nИтоговая сумма цифр: ", summa)

********************************************************************************

def sum_factorials(num):
    part_factorial = 1
    summa = 0

    for i in range(1, num + 1):
        part_factorial *= i
        summa += part_factorial
    return summa


n = int(input("Введите число: "))
print(sum_factorials(n))


********************************************************************************



********************************************************************************

number_list = [1, 5, 2, -7, 6]                                                                 # Список.

for _ in range(5):
    new_num = int(input("Введите значение переменной: "))
    number_list.append(new_num)                                                           # Добавление в конец списка дополнительного значения.

for number in number_list:
    print(f"{number} ** 2 = {number ** 2}")


********************************************************************************

book_ID = [50, 34, -1, -1, 2, 23, -1]
new_books_ID = []
returned = 0

for _ in range(10):
    id = int(input("Введите ID книги: "))
    book_ID.append(id)

for id in book_ID:
    if id == -1:
        returned += 1
    else:
        new_books_ID.append(id)

print(f"Новый список выданных книг: {new_books_ID}")
print(f"Вернули за день: {returned}")

********************************************************************************

# У вас есть список numbers. Напишите программу,
# которая заполняет список числами от 0 до 100 и выводит его на экран.

numbers = []
for i in range (100):
    numbers.append(i)
print(numbers)

********************************************************************************

# Аркадий как-то раз написал программу для вывода таблицы степеней для определённых чисел.
# Недавно он узнал про такую штуку, как списки, и решил программу немного переписать, а заодно
# усовершенствовать её. По его задумке, вначале есть всего три числа: 3, 7 и 5, а затем с помощью
# бесконечного цикла программа запрашивает новое число, закидывает его в конец текущего списка
# чисел и выводит вторую, третью и четвёртую степень каждого числа текущего списка.
# Вот какая программа получилась у Аркадия:

# numbers = 3,7,5
# while True:
#  number = int(input('Новое число: '))
#  numbers.append(numbers)
#  print('Текущий список чисел:', numbers)
#  for _ in number:
#    print(i ** 2, i ** 3, i ** 4)
#  print()

# Однако, к сожалению, эта программа у него не заработала.
# Помогите Аркадию исправить ошибки в коде. Убедитесь, что программа работает верно.

# Пример верного результата:
# Новое число: 1
# Текущий список чисел: [3, 7, 5, 1]
# 9 27 81
# 49 343 2401
# 25 125 625
# 1 1 1

# Новое число: 2
# Текущий список чисел: [3, 7, 5, 1, 2]
# 9 27 81
# 49 343 2401
# 25 125 625
# 1 1 1
# 4 8 16

numbers = [3, 7, 5]
while True:
    number = int(input('Новое число: '))
    numbers.append(number)
    print(f"Текущий список чисел: {numbers}")
    for i in numbers:
        print(i ** 2,  i ** 3,  i ** 4)


********************************************************************************

# Задача 3. Контроль
# В любой компании есть список сотрудников. Руководство одной компании хочет знать,
# на рабочем месте ли сейчас сотрудник. У каждого сотрудника есть пропуск со своим ID-номером
# (это положительное число), список активных пропусков сотрудников известен заранее.
#
# Напишите программу, которая сначала запрашивает у пользователя количество сотрудников в офисе,
# ID их пропусков, а затем запрашивает ID пропуска, который нужно найти в этом списке. Если такой
# есть, то вывести «Сотрудник на месте», а иначе «Сотрудник не работает!».

# Пример:
# Кол-во сотрудников в офисе: 4
# ID сотрудника: 10
# ID сотрудника: 20
# ID сотрудника: 30
# ID сотрудника: 40
# Какой ID ищем? 35
# Сотрудник не работает!

count_of_workers = int(input("Кол-во сотрудников в офисе: "))
workers_id = []
for _ in range(count_of_workers):
    worker_id = int(input("ID сотрудника: "))
    workers_id.append(worker_id)

search_id = int(input("Какого сотрудника ищем? "))

if search_id in workers_id:  # Благодаря оператору in поиск можно упростить
    print("Сотрудник работает!")
else:
    print("Сотрудник не работает!")

********************************************************************************

scores = [8, 5, 10, 7, 6]
print(scores)

scores[1] *= 2
x = scores[4]
x += 10

print(x)
print(scores)

********************************************************************************

monster_count = int(input("Кол-во монстров: "))
mage_index = int(input("Номер мага в списке: "))
monsters_damage = []

for monster in range(monster_count):
    print("Урон у", monster + 1 , "монстра: ", end=" ")
    damage = int(input())
    monsters_damage.append(damage)

for i_monster in range(monster_count):
    if monsters_damage[i_monster] < 100 and i_monster != mage_index - 1:
        monsters_damage[i_monster] += monsters_damage[mage_index - 1]

print(f"Итоговый урон монстров: {monsters_damage}")



********************************************************************************

# Программисты постоянно гуглят ошибки и ищут уже готовый код,
# который можно использовать для своей программы, чтобы не изобретать велосипед.
# Андрей поступил также и нашёл для своего проекта код, который должен находить
# минимальное и максимальное числа в списке. Вот этот код:

# nums_list = []
# N = int(input('Кол-во чисел в списке: '))
#
# for _ in range(N):
#     num = int(input('Очередное число: '))
#     nums_list.append(num)
#
# maximum = 0
# minimum = -1
#
# for i in nums_list:
#     if maximum < i:
#         maximum = i
#     if minimum > i:
#         minimum = i
#
# print('Максимальное число в списке:', maximum)
# print('Минимальное число в списке:', minimum)

# Однако он столкнулся с проблемой.
# Если брать, к примеру, количество чисел 5, то на тестах -1 -2 -3 -4 -5 и 1 2 3 4 5
# программа выводит неверный результат.

# Доработайте программу так, чтобы она выводила верный результат.
# Подсказка: для отладки используйте точки останова.

nums_list = []
N = int(input('Кол-во чисел в списке: '))

for _ in range(N):
    num = int(input('Очередное число: '))
    nums_list.append(num)

maximum = 0
minimum = 0

for i in nums_list:
    if maximum < i:
        maximum = i
    if minimum > i:
        minimum = i

print('Максимальное число в списке:', maximum)
print('Минимальное число в списке:', minimum)

********************************************************************************

# Пользователь вводит список из N чисел и число K. Напишите код,
# выводящий на экран сумму индексов элементов списка, которые кратны K.

# Пример:
# Кол-во чисел в списке: 4
# Введите 1 число: 1
# Введите 2 число: 20
# Введите 3 число: 30
# Введите 4 число: 4

# Введите делитель: 10
# Индекс числа 20: 1
# Индекс числа 30: 2
# Сумма индексов: 3

number_count = int(input("Введите кол-во чисел: "))
number = []

for i in range(number_count):
    print(f"Введите {i + 1} число: ", end=" ")
    digit = int(input())
    number.append(digit)

summ = 0
divider = int(input("\nВведите делитель: "))
for i_number in range(number_count):
    if number[i_number] % divider == 0:
        print(f"Индекс числа {number[i_number]}: {i_number + 1}")
        summ += i_number + 1
print(f"Сумма индексов: {summ}")


********************************************************************************

# В собачьих бегах участвует N собак, у каждой из них есть определённое количество очков за сезон.
# На огромном табло выводятся очки каждой собаки. Однако при выводе был обнаружен баг:
# собаки с наибольшим и наименьшим количеством очков поменялись местами! Нужно это исправить.

# Дан список очков из N собак. Напишите программу, которая меняет местами наибольший и наименьший элементы в списке.

N = int(input('Кол-во чисел в списке: '))
nums_list = []

for _ in range(N):
    num = int(input('Очередное число: '))
    nums_list.append(num)

if nums_list:
    maximum = nums_list[0]
    minimum = nums_list[0]

    minimum_index = 0
    maximum_index = 0
    for index, i in enumerate(nums_list):

        if maximum < i:
            maximum = i
            maximum_index = index

        if minimum > i:
            minimum = i
            minimum_index = index

    print('Максимальное число в списке:', maximum)
    print('Минимальное число в списке:', minimum)

    print(nums_list)
    nums_list[minimum_index], nums_list[maximum_index] = nums_list[maximum_index], nums_list[minimum_index]
    print(nums_list)
else:
    print('В списке нету чисел')



********************************************************************************

word_list = []
counts = [0, 0, 0]

for i in range(3):
    print(f"Введите {i +1} слово: ", end=" ")
    word = input("")
    word_list.append(word)

text = input("Слово из текста: ")
while text != "end":
    for index in range(3):
        if word_list[index] == text:
            counts[index] += 1
    text = input("Слово из текста: ")

print(f"\nПодсчет слов в тексте")
for i in range(3):
    print(word_list[i], ":", counts[i])

********************************************************************************

word = input("Введите слово: ")
replace_num = int(input("Номер символа для замены: "))
replace_sym = input("Чем заменяем: ")

sym_list = list(word)

sym_list[replace_num - 1] = replace_sym

for i in sym_list:
    print(i, end= "")


********************************************************************************

# Задача 1. Текстовый редактор: возвращение
# Мы продолжаем участвовать в разработке нового текстового редактора и делать жизнь обычных
# пользователей чуть лучше. В этот раз у нас стоит задача сделать фишку с поиском и заменой
# символов в выделенной строчке. Например, человек что-то перечислял в тексте, но ошибся и вместо
# точек с запятой использовал двоеточия. Лингвисты негодуют.

# Пользователь вводит строку S. Напишите программу, которая заменяет в строке все двоеточия
# (:) на точки с запятой (;). Также подсчитайте количество замен и выведите ответ на экран
# (и новую строку тоже). Для решения используйте список.

# Пример:
# Введите строку: гвозди:шурупы:гайки
# Исправленная строка: гвозди;шурупы;гайки
# Кол-во замен: 2

user_msg = input("Введите строку: ")
letters = list(user_msg)
what_replace = input("Введите что ищем: ")
for_what_replace = input("Введите чем заменяем: ")
count = 0

for index, letter in enumerate(letters):
    if letter == what_replace:
        letters[index] = for_what_replace
        count += 1

print("Исправленый текст: ", end="")
for letter in letters:
    print(letter, end='')
print(f"\nКол-во замен: {count}")

********************************************************************************

# Дана строка S и номер позиции символа в строке.
# Напишите программу, которая выводит соседей этого символа
# и сообщение о количестве таких же символов среди этих соседей:
# их нет, есть ровно один или есть два таких же.

# Пример 1:
# Введите строку: abbc
# Номер символа: 3

# Символ слева: b
# Символ справа: c

# Есть ровно один такой же символ.

# Пример 2:
# Введите строку: abсd
# Номер символа: 3

# Символ слева: b
# Символ справа: d

# Таких же символов нет.


# Мой вариант решения.
user_msg = input("Введите строку: ")
message = list(user_msg)
message_n = len(message)

what_replace = int(input("Номер символа: "))
symbol_replace = message[what_replace]
symbol_L = message[what_replace - 1]
symbol_R = message[what_replace + 1]

if what_replace > 0 and what_replace < message_n:
    print(f"\nСимвол слева: {symbol_L}")
    print(f"Символ справа: {symbol_R}")

elif what_replace == 0:
    print(f"Символа слева не существует.")
    print(f"Символ справа: {symbol_R}")
else:
    print(f"\nСимвол слева: {symbol_L}")
    print(f"Символа cправа не существует.")

if symbol_L == symbol_replace and symbol_R == symbol_replace:
    print("\nЕсть два таких же символа.")
elif symbol_R != symbol_replace and symbol_L != symbol_replace :
    print("\nТаких же символов нет.")
else:
    print("Есть ровно один такой же символ.")

# SkillBox решение
msg = input("Введите строку: ")
index_of_letter = int(input("Номер символа: ")) - 1  # сразу отнимаем 1, чтобы превратить номер в индекс
letters = list(msg)
count = 0
if index_of_letter > 0:
    print("Символ слева:", letters[index_of_letter - 1])
    if letters[index_of_letter - 1] == letters[index_of_letter]:
        count += 1
if index_of_letter < len(letters) - 1:
    print("Символ справа:", letters[index_of_letter + 1])
    if letters[index_of_letter + 1] == letters[index_of_letter]:
        count += 1

if count == 0:
    print("Таких же символов нет.")
elif count == 1:
    print("Есть ровно один такой же символ.")
elif count == 2:
    print("Таких символов два.")

********************************************************************************



********************************************************************************

N = int(input("Введите челое число: "))
numbers = []

for i in range(N):
    if i % 2 != 0:
        numbers.append(i)
print(f"Список из нечетных чисел от одного до N: {numbers}")

********************************************************************************

# Что нужно сделать
# Для соревнований по волейболу необходимо сформировать турнирнирную сетку из восьми человек
# на два дня. На первый день из списка участников решили выбрать каждого второго.

# Дан список из восьми имён: Артемий, Борис, Влад, Гоша, Дима, Евгений, Женя, Захар.
# Напишите программу, которая выводит элементы списка только с чётными индексами.

# Пример:
# Первый день: ['Артемий', 'Влад', 'Дима', 'Женя']

name = ["Артемий", "Борис", "Влад", "Гоша", "Дима", "Евгений", "Женя", "Захар"]
index = len(name)
day_1 = []

for i in range(index):
    if i % 2 == 0:
        day_1.append(name[i])
print(f"Первый день: {day_1}")



********************************************************************************

# В научной лаборатории выводят и тестируют новые виды клеток.
# Есть список из N этих клеток, элементом которого является показатель эффективности,
# а индексом — ранг клетки. Учёные отбирают клетки по следующему принципу:
# если эффективность клетки меньше её ранга, то она не подходит.

# Напишите программу, которая выводит на экран элементы списка,
# значения которых меньше их индекса.

# Пример:
# Количество клеток: 5
# Эффективность 1 клетки: 3
# Эффективность 2 клетки: 0
# Эффективность 3 клетки: 6
# Эффективность 4 клетки: 2
# Эффективность 5 клетки: 10

# Неподходящие значения: 0 2
list_N = []
for i in range(int(input("Количество клеток: "))):
    print(f"Эффективность {i + 1} клетки: ", end="")
    effect = int(input())
    if i + 1 > effect:
        list_N.append(effect)
print(f"\nНеподходящие значение: {list_N}")


********************************************************************************

# Что нужно сделать
# В базе магазина электроники есть список видеокарт компании NVIDIA разных поколений.
# Вместо полных названий хранятся только числа, которые обозначают модель и поколение
# видеокарты. Недавно компания выпустила новую линейку видеокарт. Самые старшие
# поколения разобрали за пару дней.

# Напишите программу, которая удаляет из списка видеокарт наибольшие элементы.

# Пример:
# Количество видеокарт: 5
# 1 Видеокарта: 3070
# 2 Видеокарта: 2060
# 3 Видеокарта: 3090
# 4 Видеокарта: 3070
# 5 Видеокарта: 3090

# Старый список видеокарт: [ 3070 2060 3090 3070 3090 ]
# Новый список видеокарт: [ 3070 2060 3070 ]

list_number = []
max_number = 0

for i in range(int(input("Количество видеокарт: "))):
    print(f"{i + 1} Видеокарта: ", end="")
    number = int(input())
    list_number.append(number)
    if max_number < number:
        max_number = number
print(f"\nCтарый список видеокарт: {list_number}")

new_list = []
for i in list_number:
    if i != max_number:
        new_list.append(i)
print(f"Новый список видеокарт: {new_list}")



********************************************************************************

# Что нужно сделать
# Илья зашёл на любительский киносайт, на котором пользователи оставляют рецензии на фильмы.
# Их список:

# films = ["Крепкий орешек", "Назад в будущее", "Таксист", "Леон", "Богемская рапсодия",
# "Город грехов", "Мементо", "Отступники", "Деревня"]
#
# Илья на сайте в первый раз. Он хочет зарегистрироваться и сразу добавить часть фильмов
# в список любимых, чтобы позже прочитать рецензии на них.
#
# Напишите программу, в которой пользователь вводит фильм. Если он есть в перечне,
# то добавляется в список любимых. Если его нет, то выводится ошибка. В конце выведите
# весь список любимых фильмов.

# Пример:
# Сколько фильмов хотите добавить? 3
# Введите название фильма: Леон
# Введите название фильма: Безумный Макс
# Ошибка: фильма Безумный Макс у нас нет :(
# Введите название фильма: Мементо
# Ваш список любимых фильмов: Леон, Мементо

films = ["Крепкий орешек", "Назад в будущее", "Таксист", "Леон", "Богемская рапсодия",
         "Город грехов", "Мементо", "Отступники", "Деревня"]

like_films = []
count_films = len(films)

for _ in range(int(input("Сколько фильмов хотите добавить: "))):
    print(f"Введите название фильма: ", end="")
    introduced_films = (input())
    count = 0
    for search in films:
        count += 1
        if search == introduced_films:
            like_films.append(search)
            count = 0
            break
        elif count == count_films and search != introduced_films:
            print(f"Ошибка: Фильма {introduced_films} у нас нет.")
print(f"Ваш список любимых фильмов: {like_films}")


********************************************************************************

# Что нужно сделать
# Напишите программу — анализатор слов, чтобы использовать
# её для тренировки нейросети и генерировать нужный текст.

# Пользователь вводит слово. Напишите программу, которая считает количество
# уникальных букв в слове. Уникальные буквы — это те, которые встречаются всего один раз.

# Пример 1:
# Введите слово: привет
# Количество уникальных букв: 6

# Пример 2:
# Введите слово: лава
# Количество уникальных букв: 2

word = input("Введите слово: ")
new_word = list(word)
count_word = len(new_word)
count_number = 0
for i in new_word:
    count = 0
    for n in new_word:
        if i == n:
            count += 1
    if count == 1:
        count_number +=1
print(f"Количество уникальных букв: {count_number}")




********************************************************************************

# Контейнеры на складе лежат в ряд в порядке убывания или равно.
# массы в килограммах. На склад привезли ещё один контейнер, который тоже нужно
# положить на определённое место.

# Напишите программу, которая получает на вход невозрастающую последовательность
# натуральных чисел. Они означают массу каждого контейнера в ряду. После этого
# вводится число X — масса нового контейнера. Программа выводит номер, под которым
# будет лежать новый контейнер. Если в ряде есть контейнеры с массой, как у нового,
# то его нужно положить после них.

# Обеспечьте контроль ввода: все числа не превышают 200.

# Пример:
# Количество контейнеров: 8
# Введите вес контейнера: 165
# Введите вес контейнера: 163
# Введите вес контейнера: 160
# Введите вес контейнера: 160
# Введите вес контейнера: 157
# Введите вес контейнера: 157
# Введите вес контейнера: 155
# Введите вес контейнера: 154

# Введите вес нового контейнера: 162

# Номер, который получит новый контейнер: 3

max_weight = 200
list_container = []

def input_container(i, n):
    while i != n:
        print(f"Введите вес контейнера: ", end="")
        weight_container = int(input())
        if weight_container > max_weight:
            print("Вес контейнера должен быть меньше 200 кг.")
            input_container(i, n)
            break
        elif weight_container < max_weight and len(list_container) == 0:
            list_container.append(weight_container)
            i += 1
        elif weight_container < max_weight and list_container[-1] >= weight_container:
             list_container.append(weight_container)
             i += 1
        else:
            print("Вес контейнера должен быть меньше либо равно предыдущему контейнеру.")
    return

index_number = 0
number_container = int(input("Количество контейнеров: "))
input_container(index_number,number_container)

weight_new_container = int(input("\nВведите вес нового контейнера: "))
for i in range(number_container):
    if weight_new_container >= list_container[i]:
        list_container.insert(i, weight_new_container)
        print(list_container)
        print(f"Номер, который получит новый контейнер: {i + 1}")
        break
    elif weight_new_container <= list_container[number_container-1]:
        list_container.insert(number_container + 1, weight_new_container)
        print((list_container))
        print(f"Номер, который получит новый контейнер: {number_container + 1}")
        break




********************************************************************************

# Вы пишете программу для маленького табло, в котором циклически
# повторяется один и тот же текст или числа. Например, как в метро,
# автобусах или трамваях.

# Даны список из N элементов и целое число K. Напишите программу,
# которая циклически сдвигает элементы списка вправо на K позиций.
# Используйте минимально возможное количество операций присваивания.

# Пример 1:
# Сдвиг: 1
# Изначальный список: [1, 2, 3, 4, 5]
# Сдвинутый список: [5, 1, 2, 3, 4]

# Пример 2:
# Сдвиг: 3
# Изначальный список: [1, 4, -3, 0, 10]
# Сдвинутый список: [-3, 0, 10, 1, 4]


********************************************************************************

# Продолжите писать анализаторы для текста. Теперь необходимо р
# еализовать код, с помощью которого можно определять палиндромы.
# То есть нужно находить слова, которые одинаково читается слева направо и справа налево.

# Напишите такую программу.

# Пример 1:
# Введите слово: мадам
# Слово является палиндромом

# Пример 2:
# Введите слово: abccba
# Слово является палиндромом

# Пример 3:
# Введите слово: abbd
# Слово не является палиндромом

word = input("Введите слово: ")
list_word = list(word)
count_word = len(list_word)
index_1 = 0
index_2 = -1
word = True
while index_1 <= count_word:
    if list_word[index_1] == list_word[index_2]:
        index_1 += 1
        index_2 -= 1
        break
    elif list_word[index_1] != list_word[index_2]:
        print("Слово не является палиндроном.")
        word = False
        break
if word:
    print("Слово является палиндромом!")

********************************************************************************

# Дан список из N чисел. Напишите программу,
# которая сортирует элементы списка по возрастанию и выводит их на экран.
# Дополнительный список нельзя использовать.

# Постарайтесь придумать и написать как можно более эффективный алгоритм сортировки.

# Пример:
# Изначальный список: [1, 4, -3, 0, 10]
# Отсортированный список: [-3, 0, 1, 4, 10]

def plus(a, b):
    return a + b

if __name__ == "__main__":
    print(plus(2, 2))

print("Возврат к позапрошлому введению")

********************************************************************************



********************************************************************************



********************************************************************************

# Сортировка выборка.
def selection_sort(my_list):
    for i_mn in range(len(my_list)):
        for curr in range(i_mn, len(my_list)):
            if my_list[curr] < my_list[i_mn]:
                my_list[curr], my_list[i_mn] = my_list[i_mn], my_list[curr]


nums = [4, 9, 7, 6, 3, 2]
selection_sort(nums)
print(nums)


********************************************************************************

# Old Version
langs = ["Python", "Java", "JS", "SQL"]
new_langs = []
for i_lang in range(2):
    new_langs.append(langs[i_lang])
new_langs.append("C++")
for i_lang in range(2, len(langs)):
    new_langs.append(langs[i_lang])

print(new_langs)

# New Version 1
langs = ["Python", "Java", "JS", "SQL"]
langs.insert(2, "C++")
print(langs)

# New Version 2
langs = ["Python", "Java", "JS", "SQL"]
user_lang = input("Введите после чего вставить: ")
i_lang = langs.index(user_lang)
langs.insert(i_lang + 1, "C++")
print(langs)



********************************************************************************

def is_film_exist(movie, films_list):
    for i_movie in films_list:
        if i_movie == movie:
            return True
    return False

films = ["Крепкий орешек", "Назад в будущее", "Таксист", "Леон", "Богемская рапсодия",
         "Город грехов", "Мементо", "Отступники", "Деревня"]

my_list = []

while True:
    print("\nВаш текущий список фильмов: ", my_list)
    new_movie = input("Название  фильма: ")
    if is_film_exist(new_movie, films):
        print("Команды: добавить, удалить, вставить")
        comand = input("Введите команду: ")
        if comand == "Добавить":
            my_list.append(new_movie)
        if comand == "Удалить":
            if is_film_exist(new_movie, my_list):
                my_list.remove(new_movie)
            else:
                print("Такого фильма нет в вашем рейтинге.")
        if comand == "Вставить":
            index = int(input("На какое место вставить: "))
            my_list.insert(index - 1, new_movie)

    else:
        print("Такого фильма нет на сайте.")


********************************************************************************

# Задача 1. Зоопарк
# В маленьком зоопарке каждое животное сидит в отдельной клетке, всего этих животных четверо:
# лев, кенгуру, слон и обезьяна. В базе данных они хранятся в виде вот такого списка:

# zoo = ['lion', 'kangaroo', 'elephant', 'monkey']

# Сегодня в зоопарк завезли медведя (bear) и посадили его между львом и кенгуру. В итоге животных
# стало пять. А через неделю слона перевезли в другое место и в списке снова стало четверо животных.

# Реализуйте эти действия в коде программы и выведите в консоль итоговый список животных, а
# также покажите, в какой клетке сидят лев и обезьяна. Для этого используйте методы списков.

# Результат работы программы:
# Зоопарк: ['lion', 'bear', 'kangaroo', 'monkey']
# Лев сидит в клетке номер 1
# Обезьяна сидит в клетке номер 4

zoo = ['lion', 'kangaroo', 'elephant', 'monkey']
i_lion = zoo.index("lion")
bear = zoo.insert(i_lion + 1, "bear")
zoo.remove("elephant")
print(zoo)

********************************************************************************

# В одной компании наступили «тёмные времена», и сотрудников стали сокращать.
# Зарплаты сотрудников хранятся в списке из N этих самых зарплат. Зарплаты уже
# уволенных сотрудников обозначаются в списке числом 0.

# Напишите программу, которая запрашивает у пользователя количество сотрудников
# и их зарплаты, затем удаляет все элементы списка со значением 0 и выводит в консоль,
# сколько сотрудников осталось, а также их зарплаты. Дополнительный список использовать нельзя.

# Пример:
# Кол-во сотрудников: 7
# Зарплата 1 сотрудника: 10000
# Зарплата 2 сотрудника: 25000
# Зарплата 3 сотрудника: 0
# Зарплата 4 сотрудника: 50000
# Зарплата 5 сотрудника: 60000
# Зарплата 6 сотрудника: 0
# Зарплата 7 сотрудника: 17000

# Осталось сотрудников: 5
# Зарплаты: [10000, 25000, 50000, 60000, 17000]

# Дополнительно: выведите на экран максимальную и минимальную зарплату оставшихся сотрудников.
# Для этого используйте функции max и min. Да, те самые, которыми нельзя называть переменные.
# В скобках функций просто укажите список.

# Пример:
# Максимальная зп: 60000
# Минимальная зп: 10000

N = []
for i in range(int(input("Кол-во сотрудников: "))):
    print(f"Зарплата {i + 1} сотрудника: ", end="")
    salary = int(input())
    if salary != 0:
        N.append(salary)

print(f"\nОсталось сотрудников: {len(N)}")
print(f"Зарплаты: {N}")

print(f"\nМаксимальная зп: {max(N)}")
print(f"Минимальная зп: {min(N)}")


********************************************************************************

my_list = ["Игра", "Изгой", 'Таксист']
your_list = ["Начало", "Отступники", "Король лев"]
my_list.extend(your_list) # метод extend - это добавление в список методом перебора.
print(my_list)



********************************************************************************

pack = []
decode = []
bad_packs = 0

packs_amt = int(input("Кол-во пакетов: "))
for i_pack_num in range(packs_amt):
    print(f"\nПакет номер: {i_pack_num + 1}")
    for i_bit in range(4):
        print(i_bit + 1, "бит: ", end=" ")
        num = int(input())
        pack.append(num)
    if pack.count(-1) <= 1:
        decode.extend(pack)
    else:
        print("Много ошибок в пакете: ")
        bad_packs += 1
    pack = []

print(f"\nПолуучено сообщение: {decode}")
print(f"Кол-во ошибок в сообщение: {decode.count(-1)}")
print(f"Кол-во потеряных пакетов: {bad_packs}")

********************************************************************************

# Одна IT-компания решила расшириться и взяла под своё крыло ещё три таких же, но поменьше.
# Конечно же, все выполненные и невыполненные задачи этих компаний перетекли в основную компанию.

# Даны четыре списка компаний, в которых для каждой задачи написано, выполнена (1) она или нет (0):

# main = [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1]
# first_company = [0, 0, 0]
# second_company = [1, 0, 0, 1, 1]
# third_company = [1, 1, 1, 0, 1]

# Напишите программу, которая расширяет список main элементами остальных списков,
# выведите итоговый список, а также выведите количество невыполненных задач.

# Результат работы программы:
# Общий список задач: [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1]
# Кол-во невыполненных задач: 10

main = [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1]
first_company = [0, 0, 0]
second_company = [1, 0, 0, 1, 1]
third_company = [1, 1, 1, 0, 1]

main.extend(first_company)
main.extend(second_company)
main.extend(third_company)
print(f"Общий список задач: {main}")
print(f"Кол-во невыполненый задач {main.count(0)}")

********************************************************************************

# Гера решил попрактиковаться в программировании и захотел написать небольшой скрипт,
# который после двух сообщений отправляет ещё одно на основе первых двух.
#
# Пользователь вводит две строки. В каждой из них есть какое-то количество специальных символов ! и ?.
# Напишите программу, которая считает количество этих символов отдельно в первой строке и отдельно во второй.
# Если в первой строке их больше, чем во второй, то на экран выводится первая строчка, объединённая со второй,
# а иначе — вторая с первой. При равном количестве символов в строках выводится «Ой».

# Пример 1:
# Первое сообщение: Привет!
# Второе сообщение: Как дела? Что делаешь?
# Третье сообщение: Как дела? Что делаешь? Привет!

# Пример 2:
# Первое сообщение: Хм!!
# Второе сообщение: ?
# Третье сообщение: Хм!!?

count = 0
def count(massage):
    count_massage_1 = massage.count("!")
    count_massage_2 = massage.count("?")
    count = count_massage_1 + count_massage_2
    return count

print("Первое сообщение: ", end="")
first_massage = input()
print("Второе сообщение: ",end="")
last_massage = input()

count_first_massage = int(count(first_massage))
count_last_message = int(count(last_massage))

if count_first_massage > count_last_message:
    print(first_massage,  last_massage)
elif count_first_massage < count_last_message:
    print(last_massage,  first_massage)
else:
    print("Ой")


# Решенеи SkillBox
first_word = input("Первое сообщение: ")
second_word = input("Первое сообщение: ")
first_count = first_word.count("!") + first_word.count("?")
second_count = second_word.count("!") + second_word.count("?")
if first_count < second_count:
    first_word, second_word = second_word, first_word  # пусть первым словом будет то, в котором больше знаков

print(first_word + second_word)

********************************************************************************

N = int(input("Кол-во участников: "))
members = []
num = 1

for _ in range(num, N // 3):
    members.append(list(range(num, num + 3)))
    num += 3

for i_team in members:
    for i_man in i_team:
        print(i_man, end=" ")
    print( )

********************************************************************************

word_list = [["", 0], ["", 0], ["", 0]]

for i_num in range(3):
    print(f"Введите {i_num + 1} слово: ", end="")
    word = input()
    word_list[i_num][0] = word

text = input("Слово из текста: ")
while text != "":
    for index in range(3):
        if word_list[index][0] == text:
            word_list[index][1] += 1
    text = input("Слово из текста: ")

print(f"\nПодсчет слов в тексте: ")
for index in range(3):
    print(f"{word_list[index][0]} : {word_list[index][1]}")

********************************************************************************

# В олимпиаде по программированию участвует N человек, в списке участников они обозначаются под номерами 1, 2, 3, 4
# и так далее до N. Эти участники поделены на команды по K человек.

# Напишите программу, которая принимает на вход количество участников и количество человек в
# каждой команде, затем генерирует список таких команд и выводит его на экран.

# Обеспечьте контроль ввода: в каждой команде должно быть ровно по K человек.

# Пример 1:
# Кол-во участников: 12
# Кол-во человек в команде: 4
# Общий список команд: [[1, 2 ,3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]

# Пример 2:
# Кол-во участников: 12
# Кол-во человек в команде: 5
# 12 участников невозможно поделить на команды по 5 человек!

human_count = int(input("Кол-во участников: "))
team_count = int(input("Кол-во человек в команде: "))
if human_count % team_count == 0:
    teams = []
    teammate_number = 0
    for _ in range(human_count // team_count):
        new_team = []
        for _ in range(team_count):
            teammate_number += 1
            new_team.append(teammate_number)
        teams.append(new_team)
    print(teams)
else:
    print(f"{human_count} невозможно поделить на команды по {team_count} человек!")

#




********************************************************************************

# В небольшой фруктовой лавке у каждого фрукта есть название и цена.
# Эта информация хранится в одном большом списке, вот так:

# goods = [["яблоки", 50], ["апельсины", 190], ["груши", 100], ["нектарины", 200], ["бананы", 77]]

# Недавно в лавку привезли новый fruit_name по цене price, а после этого случилось ужасное:
# повысили налоги. А значит, повысились и цены на фрукты, на целых 8%!

# Реализуйте код, который добавляет в список goods ещё один список с новым фруктом и ценой
# (это запрашивается у пользователя), а затем увеличивает цены всех фруктов на 8%.

# Пример:
# Текущий ассортимент: [["яблоки", 50], ["апельсины", 190], ["груши", 100], ["нектарины", 200], ["бананы", 77]]

# Новый фрукт: абрикосы
# Цена: 150

# Новый ассортимент: [["яблоки", 50], ["апельсины", 190], ["груши", 100], ["нектарины", 200], ["бананы", 77], ["абрикосы", 150]]

# Новый ассортимент с увел. ценой: [['яблоки', 54.0], ['апельсины', 205.2], ['груши', 108.0], ['нектарины', 216.0], ['бананы', 83.16], ['абрикосы', 162.0]]


goods = [["яблоки", 50], ["апельсины", 190], ["груши", 100], ["нектарины", 200], ["бананы", 77]]
print(f"\nТекущий ассортимент {goods}")

fruit_name = input(f"\nНовый фрукт: ")
price = int(input(f"По цене: "))

new_goods = ([fruit_name, price])
goods.append(new_goods)
print(f"\nНовый ассортимент {goods}")

for good in goods:
    good[1] = round(good[1] * 1.08, 2)

print(f"\nНовый ассортимент с увел.ценой: {goods}")


********************************************************************************

# Вашему другу, который тоже начал изучать Python, преподаватель дал такую задачу:
# есть три списка — основной и два побочных. В основном лежат элементы [1, 5, 3],
# а в побочных — [1, 5, 1, 5] и [1, 3, 1, 5, 3, 3] соответственно.

# Первый побочный закидывается в основной, там считается количество цифр 5,
# количество выводится на экран, и затем они удаляются из основного списка.
# После этого в основной закидывается второй побочный список, там считается
# количество цифр 3 и выводится на экран. В конце также выводится и сам список.

# Из интереса вы попросили вашего друга показать код его программы и поняли, что
# сделали это не зря — то, что вы увидели, повергло вас в шок и ужас. Вот сам код:

# a = [1, 5, 3]
# b = [1, 5, 1, 5]
# c = [1, 3, 1, 5, 3, 3]
# for i in b:
#     a.append(i)
# t = 0
# for i in a:
#     if i == 5:
#         t += 1
# print(t)
# d = []
# for i in a:
#     if i != 5:
#         d.append(i)
# for i in c:
#     d.append(i)
# t = 0
# for i in d:
#     if i == 3:
#         t += 1
# print(t)
# print(d)

# Используя знания о методах списков, а также о стиле программирования,
# помогите другу переписать программу. Не используйте дополнительные списки.

# Результат работы программы:
# Кол-во цифр 5 при первом объединении: 3
# Кол-во цифр 3 при втором объединении: 4

# Итоговый список: [1, 3, 1, 1, 1, 3, 1, 5, 3, 3]

list_a = [1, 5, 3]
list_b = [1, 5, 1, 5]
list_c = [1, 3, 1, 5, 3, 3]

list_a.extend(list_b)

total = 0
for i in list_a:
    if i == 5:
        total += 1

print(f"Кол-во цифр 5 при первом объединении: {total}")

index = 0
for i in list_a:
    if i == 5:
        list_a.pop(index)
    index += 1

list_a.extend(list_c)

total = 0
for i in list_a:
    if i == 3:
        total += 1

print(f"Кол-во цифр 3 при втором объединении: {total}")
print(f"\nИтоговый список: {list_a}")

********************************************************************************

# Что нужно сделать
# Два класса стоят в две отдельные шеренги. В каждом классе ученики выстроены по росту
# (по возрастанию): в одном классе от 160 см до 176 см с шагом 2, во втором классе —
# от 162 см до 180 см с шагом 3. Спустя какое-то время два класса объединяют в одну
# шеренгу и тоже выстраивают их по возрастанию.

# Напишите программу, которая генерирует списки роста для каждого в классе, затем
# объединяет их в один список и сортирует его в порядке возрастания. Выведите
# отсортированный список на экран.

# Формат вывода ответа:
# Отсортированный список учеников: [160, 162, …]

# -------------------------------------
# Решение задачи.
# Подключаем библиотеку для удаления одинаковых значений в списке.
# Работает только в отсортированном списке!!!
from itertools import groupby

# Создаем список первого класса.
class_1 = []
for height in range(160, 176, 2):
    class_1.append(height)

# Создаем список второго класса.
class_2 = []
for height in range(162, 180, 3):
    class_2.append(height)

# Добавляем к первому списку второй список.
class_1.extend(class_2)

# Сортируем список по возрастанию.
class_1.sort()

# Удаляем из списка одинаковые значения.
from itertools import groupby
new_class = [el for el, _ in groupby(class_1)]
print(f"Отсортированный список учеников: {new_class}")



********************************************************************************

# В базе данных магазина всякой всячины хранится список названий деталей и их стоимостей:

# shop = [['каретка', 1200], ['шатун', 1000], ['седло', 300], ['педаль', 100], ['седло', 1500], ['рама', 12000], ['обод', 2000], ['шатун', 200], ['седло', 2700]]
# Продавец решил, что считать количество и стоимость деталей вручную не очень удобно,
# поэтому решил попросить помощи у программиста, чтобы оптимизировать этот процесс.

# Напишите программу, которая запрашивает у пользователя деталь, считает их количество, а также общую стоимость.

# Пример:
# Название детали: седло
# Кол-во деталей — 3
# Общая стоимость — 4500


# Список товаров в магазине.
shop = [['каретка', 1200], ['шатун', 1000], ['седло', 300], ['педаль', 100], ['седло', 1500], ['рама', 12000],
        ['обод', 2000], ['шатун', 200], ['седло', 2700]]

# Запрашиваемые параметры.
detail = input("Название детали: ")
price = 0
quantity_detail = 0

# Ищем в списке название детали.
for i_detail in shop:
        if i_detail[0] == detail:
                quantity_detail += 1
                price += i_detail[1]

# Выводим результат на экран.
print(f"Кол-во деталей - {quantity_detail}")
print(f"Общая стоимость - {price}")


********************************************************************************

# В честь своего дня рождения Артём решил закатить вечеринку у себя на даче.
# Он не стал рассылать приглашения, а просто сообщил всем: «Если хотите — приходите и своих друзей тоже зовите».
# В ходе вечеринки люди приходили и уходили, ночевать остались не все. К тому же и сама дача не резиновая — на ней помещается всего шесть человек.

# Дан изначальный список гостей — имена тех, кто пришёл к началу:

# guests = [‘Петя’, ‘Ваня’, ‘Саша’, ‘Лиза’, ‘Катя’]
# Напишите программу, которая спрашивает у пользователя, ушёл человек или пришёл новый гость, и,
# исходя из ответа, добавляет в список или удаляет из него нужное имя.
# При этом гостей может быть не больше шести. Имена запрашиваются до тех пор, пока пользователь не введёт сообщение «Пора спать».

# Пример:

# Сейчас на вечеринке 5 человек: [‘Петя’, ‘Ваня’, ‘Саша’, ‘Лиза’, ‘Катя’]
# Гость пришёл или ушёл? пришёл
# Имя гостя: Алекс
# Привет, Алекс!

# Сейчас на вечеринке 6 человек: [‘Петя’, ‘Ваня’, ‘Саша’, ‘Лиза’, ‘Катя’, ‘Алекс’]
# Гость пришёл или ушёл? пришёл
# Имя гостя: Гоша
# Прости, Гоша, но мест нет.

# Сейчас на вечеринке 6 человек: [‘Петя’, ‘Ваня’, ‘Саша’, ‘Лиза’, ‘Катя’, ‘Алекс’]
# Гость пришёл или ушёл? ушёл
# Имя гостя: Ваня
# Пока, Ваня!

# Сейчас на вечеринке 5 человек: [‘Петя’, ‘Саша’, ‘Лиза’, ‘Катя’, ‘Алекс’]
# Гость пришёл или ушёл? Пора спать

# Вечеринка закончилась, все легли спать.

guests = ["Петя", "Ваня", "Саша", "Лиза", "Катя"]

while True:
    humans = len(guests)
    print(f"Сейчас на вечеринке {humans} человек: {guests}")

    print(f"Гость пришел или ушел?: ", end="")
    comand = input()

    if comand == "пришел":
        print("Имя гостя: ", end="")
        name = input()
        if humans <= 5:
            guests.append(name)
            print(f"Привет {name}!\n")
        else:
            print(f"Прости, {name}, но мест нет.\n")

    elif comand == "ушел":
        print("Имя гостя: ", end="")
        name = input()
        guests.remove(name)
        print(f"Пока {name}!\n")

    elif comand == "пора спать":
        print("Вечеринка закончилась.")
        break




********************************************************************************

# Что нужно сделать
# Мы пишем приложение для удобного прослушивания музыки.
# У Вани есть список из девяти песен группы Depeche Mode. Каждая песня состоит
# из названия и продолжительности с точностью до долей минут:

# violator_songs = [
#     ['World in My Eyes', 4,86],
#     ['Sweetest Perfection', 4,43],
#     ['Personal Jesus', 4,56],
#     ['Halo', 4,9],
#     ['Waiting for the Night', 6,07],
#     ['Enjoy the Silence', 4,20],
#     ['Policy of Truth', 4,76],
#     ['Blue Dress', 4,29],
#     ['Clean', 5,83]
# ]

# Из этого списка Ваня хочет выбрать N песен и закинуть их в особый плейлист с другими треками. И
# при этом ему важно, сколько времени в сумме эти N песен будут звучать.
# Напишите программу, которая запрашивает у пользователя количество песен из списка
# и затем названия этих песен, а на экран выводит общее время их звучания.

# Пример:
# Сколько песен выбрать? 3
# Название 1-й песни: Halo
# Название 2-й песни: Enjoy the Silence
# Название 3-й песни: Clean

# Общее время звучания песен: 14,93 минуты

# Решение задачи.
violator_songs = [
    ['World in My Eyes', 4.86],
    ['Sweetest Perfection', 4.43],
    ['Personal Jesus', 4.56],
    ['Halo', 4.9],
    ['Waiting for the Night', 6.07],
    ['Enjoy the Silence', 4.20],
    ['Policy of Truth', 4.76],
    ['Blue Dress', 4.29],
    ['Clean', 5.83]]

print("Сколько песен брать: ", end="")
number = int(input())
time = 0
for n in range(number):
    print(f"Название {n + 1}-й песни: ",end="")
    search_song = input()
    for i_song in violator_songs:
        if i_song[0] == search_song:
            time += i_song[1]
print(f"\nОбщее время звучания песен: {round(time, 2)} минуты.")



********************************************************************************

# Даны два списка целых чисел, оба списка заполняются с клавиатуры.
# В первый список вводится три числа, во второй — семь чисел. Напишите программу,
# которая запрашивает у пользователя эти числа, затем расширяет первый список
# элементами второго и после этого оставляет в первом списке только уникальные элементы,
# то есть удаляет лишние повторы чисел. Условный оператор использовать нельзя.

# Пример:
# Введите 1-е число для первого списка: 1
# Введите 2-е число для первого списка: 2
# Введите 3-е число для первого списка: 3
# Введите 1-е число для второго списка: 2
# Введите 2-е число для второго списка: 4
# Введите 3-е число для второго списка: 6
# Введите 4-е число для второго списка: 3
# Введите 5-е число для второго списка: 3
# Введите 6-е число для второго списка: 2
# Введите 7-е число для второго списка: 1

# Первый список: [1, 2, 3]
# Второй список: [2, 4, 6, 3, 3, 2, 1]

# Новый первый список с уникальными элементами: [4, 6, 3, 2, 1]

list_1 = []
for number in range(3):
    print(f"Введите {number + 1}-е число для первого списка: ", end="")
    digit = int(input())
    list_1.append(digit)

list_2 = []
for number in range(7):
    print(f"Введите {number + 1}-е число для первого списка: ", end="")
    digit = int(input())
    list_2.append(digit)

print(f"Первый список: {list_1}")
print(f"Второй список: {list_2}")

list_1.extend(list_2)
list_1.sort()
print(list_1,"\n")

new_list = []
for i in list_1:
    if i not in new_list:
        new_list.append(i)

print(f"Новый первый список с уникальными элементами: {new_list}")

********************************************************************************

# Частная контора даёт в прокат ролики самых разных размеров.
# Человек может надеть ролики любого размера, которые не меньше размера его ноги.
#
# Пользователь вводит два списка размеров: N размеров коньков и K размеров ног людей.
# Реализуйте код, который определяет, какое наибольшее число человек сможет одновременно взять ролики и пойти покататься.

# Пример:
# Кол-во коньков: 4
# Размер 1-й пары: 41
# Размер 2-й пары: 40
# Размер 3-й пары: 39
# Размер 4-й пары: 42

# Кол-во людей: 3
# Размер ноги 1-го человека: 42
# Размер ноги 2-го человека: 41
# Размер ноги 3-го человека: 42

# Наибольшее кол-во людей, которые могут взять ролики: 2

size_list = []
number = int(input("Кол-во коньков: "))

for i in range(number):
    print(f"Размер {i + 1}-й пары: ", end="")
    size = int(input())
    size_list.append(size)
size_list.sort()

print("\n")
human_list = []
human = int(input("Кол-во людей: "))

for man in range(human):
    print(f"Размер ноги {man + 1}-го человека: ", end="")
    size_human = int(input())
    human_list.append(size_human)
human_list.sort()

count = 0
for count_1 in range(len(human_list)):
    for count_2 in range(len(size_list)):
        if human_list[count_1] >= size_list[count_2]:
            size_list[count_2] = 0
            count += 1
            break
print(f"Наибольшее кол-во людей, которые могут взять ролики: {count}")


********************************************************************************

# N человек, пронумерованных числами от 1 до N, стоят в кругу.
# Они начинают играть в считалку на выбывание, где каждый K-й по счёту
# человек выбывает из круга, после чего счёт продолжается со следующего за ним человека.

# На вход подаётся количество человек N и номер K. Напишите программу, которая
# выводит число от 1 до N — это номер человека, который останется в кругу последним.

# Пример:
# Кол-во человек: 5
# Какое число в считалке? 7
# Значит, выбывает каждый 7-й человек

# Текущий круг людей: [1, 2, 3, 4, 5]
# Начало счёта с номера 1
# Выбывает человек под номером 2

# Текущий круг людей: [1, 3, 4, 5]
# Начало счёта с номера 3
# Выбывает человек под номером 5

# Текущий круг людей: [1, 3, 4]
# Начало счёта с номера 1
# Выбывает человек под номером 1

# Текущий круг людей: [3, 4]
# Начало счёта с номера 3
# Выбывает человек под номером 3

# Остался человек под номером 4

# Содаем круг.



********************************************************************************

# N друзей постоянно берут в долг друг у друга деньги.
# В какой-то момент им надоело забывать, кто, кому и сколько должен,
# и они придумали систему долговых расписок. И, чтобы начать новый год
# «с чистого листа», друзья решили оплатить все долговые расписки, которые
# накопились у них друг к другу. Однако выяснилось, что иногда один и тот же
# человек в разные дни выступал как в роли должника, так и в роли кредитора.
#
# Напишите программу, которая по заданным распискам вычислит, сколько всего
# должен каждый друг выплатить другим (или получить с других).
#
# Сначала вводится число N — количество друзей, затем вводится число K — количество
# долговых расписок, после этого следует K троек чисел: номер друга, взявшего в долг,
# номер друга, давшего деньги, и сумма. Гарантируется, что ни один друг не брал в долг сам у себя.
#
# Программа должна вывести «баланс друзей», то есть суммы, которые должны получить
# или отдать друзья. Положительное число означает, что друг должен получить
# деньги от других, отрицательное — должен отдать деньги.

# Пример 1:
# Кол-во друзей: 2
# Долговых расписок: 3

# 1-я расписка
# Кому: 1
# От кого: 2
# Сколько: 10

# 2-я расписка
# Кому: 1
# От кого: 2
# Сколько: 20

# 3-я расписка
# Кому: 1
# От кого: 2
# Сколько: 20

# Баланс друзей:
# 1: -50
# 2: 50

# Пример 2:
# Кол-во друзей: 3
# Долговых расписок: 1

# 1-я расписка
# Кому: 3
# От кого: 1
# Сколько: 100

# Баланс друзей:
# 1 : 100
# 2 : 0
# 3 : -100

N = int(input("Количество друзей: "))
K = int(input("Кол-во долговых расписок: "))
IOU = []

for i in range(N):
    IOU.append(0)

for c_receipt in range(K):
    print(f"\n{c_receipt + 1}-я расписка")

    while True:
        print("Кому: ", end="")
        credit = int(input()) - 1

        print("От кого: ", end="")
        debit = int(input()) - 1

        if credit != debit:
            break
        else:
            print("Самому себе нельзя давать в долг! \n")

    print("Сколько: ", end="")
    money = int(input())

    IOU[credit] += money
    IOU[debit] -= money

print("\nБаланс друзей:")
for i in range(N):
    print(f"{i + 1} : {IOU[i]}")




********************************************************************************

# Последовательность чисел называется симметричной, если она одинаково читается как слева направо, т
# ак и справа налево. Например, следующие последовательности являются симметричными:

# 1 2 3 4 5 4 3 2 1
# 1 2 1 2 2 1 2 1

# Пользователь вводит последовательность из N чисел. Напишите программу, которая определяет,
# какое минимальное количество и каких чисел надо приписать в конец этой последовательности,
# чтобы она стала симметричной.

# Пример 1:
# Кол-во чисел: 5
# Число: 1
# Число: 2
# Число: 1
# Число: 2
# Число: 2

# Последовательность: [1, 2, 1, 2, 2]

# Нужно приписать чисел: 3
# Сами числа: [1, 2, 1]

# Пример 2:
# Кол-во чисел: 5
# Число: 1
# Число: 2
# Число: 3
# Число: 4
# Число: 5

# Последовательность: [1, 2, 3, 4, 5]

# Нужно приписать чисел: 4
# Сами числа: [4, 3, 2, 1]

numbers = int(input("Кол-во чисел: "))
numbers_list = []

for i in range(numbers):
    print(f"Число: ", end="")
    digit = int(input())
    numbers_list.append(digit)

print(f"Последовательность: {numbers_list}")

for i in range(numbers - 1):
    if numbers_list[i] != numbers_list[(i + 1)]:
        numbers_list.insert(numbers, numbers_list[i])

print(numbers_list)


********************************************************************************



********************************************************************************



********************************************************************************

# Простой пример....
squares = []
for x in range(10):
    squares.append(x ** 2)

print(squares)
# -------------------
# Можем упростить и ускорить этот код.
squares = [x ** 2 for x in range(10)]
print(squares)
# ------------------
def get_higher_price(procent, price):
    return round(price * (1 + procent / 100), 2)

prices_now = [1.09, 23.56, 57.84, 4.56, 6.78]
first_persent = int(input("Повышение на первый год: "))
second_persent = int(input("Повышение на второй год: "))

prices_first = [get_higher_price(first_persent, i_price) for i_price in prices_now]
prices_second = [get_higher_price(second_persent, i_price) for i_price in prices_first]

print(f"Сумма цен за каждый год: {round(sum(prices_now), 2)}, "
      f"{round(sum(prices_first), 2)}, {round(sum(prices_second), 2)}")

********************************************************************************

# Пользователь вводит числа A и B. Напишите программу,
# которая генерирует два списка: в первом лежат кубы чисел
# в диапазоне от А до В, во втором — квадраты чисел в этом же
# диапазоне. Выведите списки на экран. Для генерации используйте
# list comprehensions (как и в следующих задачах).

# Пример:
# Левая граница: 5
# Правая граница: 10

# Список кубов чисел в диапазоне от 5 до 10: [125, 216, 343, 512, 729, 1000]
# Список квадратов чисел в диапазоне от 5 до 10: [25, 36, 49, 64, 81, 100]

left_border = int(input("Левая граница: "))
right_border = int(input("Правая граница: "))

list_cube = [x ** 3 for x in range(left_border, right_border + 1)]
list_square = [x ** 2 for x in range(left_border, right_border + 1)]

print(f"Список кубов чисел в диапазоне от {left_border} до {right_border}: {list_cube}")
print(f"Список квадратов чисел в диапазоне от {left_border} до {right_border}: {list_square}")


********************************************************************************

# Илья решил безобидно подшутить над другом и написал
# программу для смартфона, которая при отправке сообщения удваивает каждый
# символ строки и заодно к каждому удвоенному добавляет ещё один дополнительный.

# Пользователь вводит строку и дополнительный символ. Напишите программу,
# которая генерирует два списка: в первом списке каждый элемент — удвоенная
# буква первой строки, во втором списке каждый элемент — конкатенация
# элемента первого списка и дополнительного символа.

# Пример:
# Введите строку: привет
# Введите дополнительный символ: !

# Список удвоенных символов: ['пп', 'рр', 'ии', 'вв', 'ее', 'тт']
# Склейка с дополнительным символом: ['пп!', 'рр!', 'ии!', 'вв!', 'ее!', 'тт!']


incoming_msg = input("Введите строку: ")
special_symbol = input("Введите дополнительный символ: ")

doubled_letters = [letter * 2 for letter in incoming_msg]
result_msg = [letter + special_symbol for letter in doubled_letters]

print("Список удвоенных символов:", doubled_letters)
print("Склейка с дополнительным символом:", result_msg)

********************************************************************************

prices = [float(input("Цена на товар: ")) for _ in
          range(int(input("Кол-во товаров: ")))]

first_year = int(input("Повышение на первый год: "))
second_year = int(input("Повышение на второй год: "))

all_prices = "Сумма цен за каждый год: "

for percent in 0, first_year, second_year:
    prices = [price * (1 + percent / 100) for price in prices]
    all_prices += f" {round(sum(prices), 2)}"

print(all_prices)




********************************************************************************

# Простой пример.... (Квадрат нечетный числе)
squares = []
for x in range(10):
    if x % 2 != 0:
        squares.append(x ** 2)

print(squares)
# -------------------
# Можем упростить и ускорить этот код.
squares_odds = [x ** 2 for x in range(10) if x % 2 != 0]
print(squares_odds)

# Добавляем значение else

squares_odds = [x ** 2 for x in range(10) if x % 2 != 0]
squares_cubes = [(x ** 2 if x % 2 != 0 else x ** 3) for x in range(10)]
print(squares_odds)
print(squares_cubes)


********************************************************************************

# Старое решение  Решали в задаче 02.2 Задача 01
# monster_count = int(input("Кол-во монстров: "))
# mage_index = int(input("Номер мага в списке: "))
# monsters_damage = []
#
# for monster in range(monster_count):
#     print("Урон у", monster + 1 , "монстра: ", end=" ")
#     damage = int(input())
#     monsters_damage.append(damage)
#
# for i_monster in range(monster_count):
#     if monsters_damage[i_monster] < 100 and i_monster != mage_index - 1:
#         monsters_damage[i_monster] += monsters_damage[mage_index - 1]
#
# print(f"Итоговый урон монстров: {monsters_damage}")

# -------------------------------------------------
import random
# Заполняем список (меотдом рандов в промежутке от 50 до 80 и вывеси ресчет от 0 до 10.
squad_1 = [random.randint(50, 80) for _ in range(10)]
squad_2 = [random.randint(30, 60) for _ in range(10)]
squad_3_conditioin =[("Погиб" if squad_1[i_damage] + squad_2[i_damage] > 100 else "Выжил")
                     for i_damage in range(10)]

print(f"Урон первого отряда: {squad_1}")
print(f"Урон второго отряда: {squad_2}")
print(f"Состояние третьего отряда:: {squad_3_conditioin}")

********************************************************************************

# Пользователь вводит два числа: А и В. Реализуйте код,
# который генерирует список из
# чётных чисел в диапазоне от А до B. Используйте list comprehensions
# (как и в следующих задачах).


a = int(input("Введите число А: "))
b = int(input("Ведите число: b "))
numbers = [x ** 2 for x in range(a, b) if x % 2 == 0]
print(numbers)

********************************************************************************

# У нас есть вот такой список цен на некоторые товары из магазина:
# original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]

# В этом списке также хранятся цены на товары, которые уже давно не
# продаются. По какой-то причине система, вместо того чтобы их занулить,
# просто приписала к ним минус. Нам нужно это исправить.

# Напишите программу, которая генерирует новый список из первого списка,
# заменяя все отрицательные числа на ноль.

# Результат:
# [1.25, 0, 10.22, 3.78, 0, 1.16]

original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]
new_prices = [price if price > 0 else 0 for price in original_prices]
print("Результат:\n\n", new_prices, sep="")

********************************************************************************

# nums = [x for x in range(1, 101) if x % 10 == 0]
# new_nums = nums[:]
# new_nums[3] = 0
#
# for i_elem in range(2, 8):
#         print(nums[i_elem], end=" ")
#
# print()
# for i_elem in range(2, 8):
#         print(new_nums[i_elem], end=" ")

# -----------------------

nums = [x for x in range(1, 101) if x % 10 == 0]
new_nums = nums[:]
new_nums[3] = 0

print(f"{new_nums[2:5]} - От двойки до пятерки")
print(f"{new_nums[5:]} - От начала и до пятерки")
print(f"{new_nums[5:]} - От пятерки и до конца списка")
print(f"{new_nums[2:8:2]} - От двух до восьми с шагом два")
print(f"{new_nums[::-1]} - От конца в начало с шагом один")
new_nums[:3] = [1, 1, 1]
print(f"{new_nums}- Первые три индекса равны 1")
new_nums[:3] = [1]


********************************************************************************

def is_palindrome(num_list):
    revers_list = num_list[::-1]
    if num_list == revers_list:
        return True
    else:
        return False

nums = [1, 2, 3, 4, 3, 2]
answer = []

for i_nums in range(0, len(nums)):
    if is_palindrome(nums[i_nums:len(nums)]):
        answer = nums[:i_nums]
        answer.reverse()
        break

print(f"Исходный  список: {nums}")
print(f"Нужно чисел для полиндрома: {len(answer)}")
print(f"Список этих чисел: {answer}")


********************************************************************************

# Дан список чисел:
# nums = [48, -10, 9, 38, 17, 50, -5, 43, 46, 12]

# Напишите программу, которая выводит на экран шесть ответов:

# В первой строке выведите первые пять элементов списка.
# Во второй строке выведите весь список, кроме последних двух элементов.
# В третьей строке выведите все элементы с чётными индексами.
# В четвёртой строке выведите все элементы с нечётными индексами.
# В пятой строке выведите все элементы в обратном порядке.
# В шестой строке выведите все элементы списка через один в обратном порядке, начиная с последнего.
# Для решения используйте только срезы (и без функции len).

# Результат:
# [48, -10, 9, 38, 17]
# [48, -10, 9, 38, 17, 50, -5, 43]
# [48, 9, 17, -5, 46]
# [-10, 38, 50, 43, 12]
# [12, 46, 43, -5, 50, 17, 38, 9, -10, 48]
# [12, 43, 50, 38, -10]

nums = [48, -10, 9, 38, 17, 50, -5, 43, 46, 12]
print(nums[:5]) # В первой строке выведите первые пять элементов списка.
print(nums[:-2]) # Во второй строке выведите весь список, кроме последних двух элементов.
print(nums[::2]) # В третьей строке выведите все элементы с чётными индексами.
print(nums[1::2]) # В четвёртой строке выведите все элементы с нечётными индексами.
print(nums[::-1]) # В пятой строке выведите все элементы в обратном порядке.
print(nums[::-2])# В шестой строке выведите все элементы списка через один в
                    # обратном порядке, начиная с последнего.

********************************************************************************

# Нашему другу заказали написать программу, которая анализирует
# цены на бирже. Она получает этот пакет данных, но делать что-либо
# с ним нельзя. Для нормальной работы аналитической программы берётся
# новый список, который равен тому, что пришло. Затем идёт работа с
# новым списком: если есть отрицательные цены, то программа их зануляет
# и в конце выводит на экран, сколько денег мы по итогу потеряли.
# Получился вот такой код:
#
import  random
original_prices = [random.randint(-14, 50) for _ in range(5)]
new_prices = original_prices[:]

for i in range(len(new_prices)):
    if new_prices[i] < 0:
        new_prices[i] = 0

print("Мы потеряли: ",  sum(original_prices) - sum(new_prices))

# Однако при таких входных данных программа почему-то работает неправильно:
# она выводит ответ 0, когда правильный ответ 14. Помогите другу исправить
# программу, а также сделайте так, чтобы список цен генерировался случайно
# (диапазон можно выбрать любой).

********************************************************************************

word = "Привет"

first_part = word[:len(word) // 2]
print(first_part[::-1])

second_part = word[len(word) // 2:]
print(second_part[::-1])

print(first_part[::-1] + second_part[::-1])

********************************************************************************

# Задача 1. Гласные буквы
# Что нужно сделать

# Команде лингвистов понравилось качество ваших программ, и они решили заказать
# у вас функцию для анализатора текста, которая создавала бы список гласных букв
# текста, а заодно считала бы их количество.

# Напишите программу, которая запрашивает у пользователя текст и генерирует
# список из гласных букв этого текста (сама строка вводится на русском языке).
# Выведите в консоль сам список и его длину.

# Пример:
# Введите текст: Нужно отнести кольцо в Мордор!
# Список гласных букв: ['у', 'о', 'о', 'е', 'и', 'о', 'о', 'о', 'о']
# Длина списка: 9


text = input("Введите текст: ")

vowel_letters = ["а", "я", "у", "ю", "о", "е", "ё", "э", "и", "ы"]

new_list = [i for a in text for i in vowel_letters if a == i]
print(f"Список гласных букв: {new_list}")
print(f"Длина списка: {len(new_list)}")

********************************************************************************

# Пользователь вводит целое число N. Напишите программу,
# которая генерирует список из N чисел, на чётных местах в нём
# стоят единицы, а на нечётных — числа, равные остатку от деления
# своего номера на 5.

# Пример:
# Введите длину списка: 10
# Результат: [1, 1, 1, 3, 1, 0, 1, 2, 1, 4]

import random
number = int(input("Введите длину списка: "))
number_list = [random.randint(1, 100) for _ in range(number)]
print(number_list)

new_list = [(i // i if i in number_list[1::2] else i % 5) for i in number_list]
print(f"Результат: {new_list}")

********************************************************************************

# Что нужно сделать

# Мы хотим протестировать работу электронной таблицы для участников некоторых соревнований.
# Есть два списка (то есть две команды) по 20 участников в каждом. В этих списках хранятся очки
# каждого участника (это вещественные числа с двумя знаками после точки, например 4.03).
# Участник одной команды соревнуется с участником другой команды под таким же номером.
# То есть первый соревнуется с первым, второй — со вторым и так далее.

# Напишите программу, которая генерирует два списка участников (по 20 элементов) из случайных
# вещественных чисел (от 5 до 10). Для этого найдите подходящую функцию из модуля random.
# Затем сгенерируйте третий список, в котором окажутся только победители из каждой пары.

# Пример:
# Первая команда: [7.86, 6.76, 9.97, 9.08, 5.45, 6.9, 8.65, 5.17, 8.17, 5.06, 7.56, 7.1, 7.18, 8.25, 5.53, 7.95, 8.91, 7.11, 8.29, 9.52]
# Вторая команда: [7.13, 5.7, 8.89, 5.36, 5.62, 9.46, 5.82, 8.67, 8.41, 7.0, 5.31, 7.8, 9.93, 7.76, 7.4, 8.26, 7.94, 5.71, 7.89, 7.77]
# Победители тура: [7.86, 6.76, 9.97, 9.08, 5.62, 9.46, 8.65, 8.67, 8.41, 7.0, 7.56, 7.8, 9.93, 8.25, 7.4, 8.26, 8.91, 7.11, 8.29, 9.52]
import random
count_participants = int(input("Введите кол-во участников: "))

first_team = [round(random.uniform(5, 20), 2) for a in range(count_participants)]
second_team = [round(random.uniform(5, 20), 2) for b in range(count_participants)]
print(f"Первая команда: {first_team}")
print(f"Вторая команда: {second_team}")

winner_list = [(first_team[i] if first_team[i] > second_team[i] else second_team[i])
               for i in range(count_participants)]
print(f"Победители турнира: {winner_list}")

********************************************************************************

# Дана строка, в которой хранятся первые семь букв английского алфавита.

# alphabet = 'abcdefg'
# Напишите программу, которая выводит на экран десять вот таких результатов:

# Копию строки.
# Элементы строки в обратном порядке.
# Каждый второй элемент строки (включая самый первый).
# Каждый второй элемент строки после первого.
# Все элементы до второго.
# Все элементы начиная с конца до предпоследнего.
# Все элементы в диапазоне индексов от 3 до 4 (не включая 4).
# Последние три элемента строки.
# Все элементы в диапазоне индексов от 3 до 4.
# То же, что и в предыдущем пункте, но в обратном порядке.

alphabet = 'abcdefg'
copy_alphabet = alphabet[:]
print(f"Копия строки: {copy_alphabet}")
print(f"Элементы строки в обратном порядке: {alphabet[::-1]}")
print(f"Каждый второй элемент строки (включая самый первый) {alphabet[::2]}")
print(f"Каждый второй элемент строки после первого: {alphabet[1::2]}")
print(f"Все элементы до второго: {alphabet[:1]}")
print(f"Все элементы начиная с конца до предпоследнего: {alphabet[:-2:-1]}")
print(f"Все элементы в диапазоне индексов от 3 до 4 (не включая 4): {alphabet[3]}")
print(f"Последние три элемента строки: {alphabet[-3::1]}")
print(f"Все элементы в диапазоне индексов от 3 до 4: {alphabet[3:5:]}")
print(f"То же, что и в предыдущем пункте, но в обратном порядке: {alphabet[4:2:-1]}")


********************************************************************************

# На вход в программу подаётся строка, в которой буква h встречается как минимум два раза.
# Реализуйте код, который разворачивает последовательность символов, заключённую между
# первым и последним появлением буквы h, в противоположном порядке.

# Пример 1:
# Введите строку: hqwehrty
# Развёрнутая последовательность между первым и последним h: ewq.

# Пример 2:
# Введите строку: hh
# Развёрнутая последовательность между первым и последним h:

# Пример 3:
# Введите строку: hhqwerh
# Развёрнутая последовательность между первым и последним h: rewqh.

entered_text = [input("Введите строку: ")]

# не решена



********************************************************************************

# Дан список из N целых случайных чисел (число от 0 до 2). 
# Напишите программу, которая выполняет «сжатие списка» — переставляет все нулевые 
# элементы в конец массива. При этом все ненулевые элементы располагаются в начале 
# массива в том же порядке. Затем все нули из списка удаляются.

# Пример:

# Количество чисел в списке: 10
# Список до сжатия: [0, 2, 1, 0, 0, 0, 1, 0, 2, 0]
# Список после сжатия: [2, 1, 1, 2]

import random
numbers = int(input("Введите кол-во чисел: "))

numbers_list = [random.randint(0, 2) for a in range(numbers)]
print(f"Список до сжатия: {numbers_list}")

new_list = [i for i in numbers_list if i != 0]
print(f"Список после сжатия: {new_list}")

********************************************************************************

# Как мы говорили ранее, в программировании часто приходится писать код исходя из результата,
# который требует заказчик. В этот раз заказчику нужно получить вот такой двумерный список:

[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]

# Напишите программу, которая генерирует такой список и выводит его на экран. Используйте только list comprehensions.

import random
shift = int(input("Введите шаг: "))
number_elements = int(input("Введете кол-во массивов: "))
digit_elements = int(input("Введите кол-во элементов в массиве: "))



********************************************************************************

# N палочек выставили в один ряд, пронумеровав их слева направо числами от 1 до N.
# Затем по этому ряду бросили K камней, при этом i-й камень сбил все палки с номерами
# от L_i до R_i включительно. Определите, какие палки остались стоять на месте.

# Напишите программу, которая получает на вход количество палок N и количество
# бросков K. Далее идёт K пар чисел Left_i, Right_i, при этом 1 ≤ Left_i ≤ Right_i ≤ N.

# Программа должна вывести последовательность из N символов, где j-й символ есть
# “I”, если j-я палка осталась стоять, или “.”, если j-я палка была сбита.

# Пример:
# Количество палок: 10
# Количество бросков: 3

# Бросок 1. Сбиты палки с номера 8
# по номер 10.

# Бросок 2. Сбиты палки с номера 2
# по номер 5.

# Бросок 3. Сбиты палки с номера 3
# по номер 6.

# Результат: I.....I...
import random
from itertools import groupby
n = int(input("Введите кол-во палок: "))
k = int(input("Введите кол-во бросков: "))
print("\n")

list_sticks = [i + 1 for i in range(n)]

result = []
for cast in range(k):
    left_i = random.randint(1, n)
    right_i = random.randint(left_i, n)
    print(f"Бросок {cast + 1}. Сбиты палки с номера {left_i} по номер {right_i}")
    result_1 = [result.append(i) for i in list_sticks if left_i <= i <= right_i]

# Сортируем и удаляем дублирующиеся элементы.
result.sort()
result = [el for el, _ in groupby(result)]

new_list = []
result_2 = [(new_list.append("I") if i not in result else new_list.append(".")) for i in list_sticks]
end_result = [print(i, end="") for i in new_list]


********************************************************************************

# Дан вот такой (уже многомерный!) список:
# nice_list = [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[10, 11, 12], [13, 14, 15], [16, 17, 18]]]
# Напишите код, который «раскрывает» все вложенные списки, то есть
# оставляет только внешний список. Для решения используйте только list comprehensions.

# Ответ: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]

nice_list = [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[10, 11, 12], [13, 14, 15], [16, 17, 18]]]
output = [digit for each_list in nice_list for each_list_1 in each_list for digit in each_list_1]
print(output)

********************************************************************************

# Юлий Цезарь использовал свой способ шифрования текста.
# Каждая буква заменялась на следующую по алфавиту через
# K позиций по кругу. Если взять русский алфавит и K = 3, то в слове,
# которое мы хотим зашифровать, буква А станет буквой Г, Б станет Д и так далее.

# Пользователь вводит сообщение, а также значение сдвига.
# Напишите программу, которая зашифрует это сообщение при помощи шифра Цезаря.

# Пример:
# Введите сообщение: это питон.
# Введите сдвиг: 3
# Зашифрованное сообщение: ахс тлхср.


# Программные параметры.
a = 1072
b = 1104

# Вводим параметры
entered_text = input("Введите сообщение: ")

shift = int(input("Введите сдвиг: "))

# Меняем буквенное значение в код UTF
number_text = []
text = [number_text.append(ord(word)) for word in entered_text ]
print(number_text, " < --- number_text")

# Проверяем сдвиг.
checking_shift = [i if (i + shift) <= b else a + (i + shift) % a for i in number_text ]
print(checking_shift, " < --- checking shift")

# Меняем цифры на введеный сдвиг.
crypt_number = [digit + shift if a <= digit <= b else digit for digit in checking_shift]
print(crypt_number, " < --- crypt_number")

# Переводим в зашифрованный текст.
crypt_text = []
text = [crypt_text.append(chr(number)) for number in crypt_number ]

print(f"Зашифрованное сообщение: ", end="")
end_result = [print(i, end="") for i in crypt_text]

# я сделал так...
# хотя в пример получается совсем не так как у меня....
# -------------------------------------------------------------------------------
# Решение SkillBox
def caesar_cipher(string, user_shift):
    char_list = [(alphabet[(alphabet.index(sym) + user_shift) % 33] if sym != " " else " ") for sym in string]
    new_str = " "
    for i_char in char_list:
        new_str += i_char
    return new_str

alphabet = "абвгдеёжзийклмнопрстуфхцчшщъыьэюя."
input_str =  input("\nВведите сообщение: ")
shift = int(input("Введите сдвиг: "))

output_str = caesar_cipher(input_str, shift)

print(f"Зашифрованное сообщение: {output_str}")

********************************************************************************

print(all(list(map(lambda x: x.isdigit() and (int(x) in range(256)), input().split('.')))))

********************************************************************************



********************************************************************************



********************************************************************************

# Что нужно сделать

# Один ресторан заказал вам написать приложение, которое в один клик отображало бы
# пользователю доступное меню в удобном виде. Для этого ресторан любезно предоставил
# свой сайт, откуда можно получить актуальную информацию о меню в виде идущих подряд названий.

# Напишите программу, которая выводит это меню на экран. На вход подаётся строка из названий
# блюд, разделённых символом «;», а на выходе эти названия перечисляются через запятую и пробел.

# Пример:
# Доступное меню: утиное филе;фланк-стейк;банановый пирог;плов
# На данный момент в меню есть: утиное филе, фланк-стейк, банановый пирог, плов


available_menu = "утиное филе;фланк-стейк;банановый пирог;плов".split(";")

menu_1 = "; ".join(available_menu)
menu_2 = ", ".join(available_menu)

print(f"Доступное меню: {menu_1}")
print(f"На данный момент в меню есть: {menu_2}")

********************************************************************************

# Что нужно сделать
# Пользователь вводит строку, содержащую пробелы. Найдите в ней самое длинное слово,

# Пример 1:
# Введите строку: я есть строка
# Самое длинное слово: строка
# Длина этого слова: 6

# Пример 2:
# Введите строку: а б
# Самое длинное слово: а
# Длина этого слова: 1

# Пример 3:
# Введите строку:    б
# Самое длинное слово: б
# Длина этого слова: 1


text = input("Введите строку: ").split()

sum = max([len(sum) for sum in text])
big_word = [word for word in text if len(word) == sum ]
count_word = len(big_word)

print(f"Самое длиное слово: {big_word[0]}")
print(f"Длина этого слова: {sum}")


********************************************************************************

# Что нужно сделать
# В одной IT-компании существует негласный закон об именовании текстовых документов:
# Название файла не должно начинаться на один из специальных символов: @№$%^&*().
# Файл заканчивается расширением .txt или .docx.
# Напишите программу, которая получает на вход полное название файла и проверяет его по этим правилам.

# Пример 1:
# Название файла: @example.txt
# Ошибка: название начинается на один из специальных символов.

# Пример 2:
# Название файла: example.ttx
# Ошибка: неверное расширение файла. Ожидалось .txt или .docx.

# Пример 3:
# Название файла: example.txt
# Файл назван верно.

def check():
    file = input("Название файла: ")

    if not file.endswith(".txt") and not file.endswith(".docx"):
        print("Ошибка! неверное расширение файла. Ожидалось .txt или .docx.")
        check()

    for sim in special_character:
        if file.startswith(sim):
            print("Ошибка: название начинается на один из специальных символов.")
            check()

special_character = ",".join(["@№$%#^&*()"])
check()
print("Файл назван верно!")

********************************************************************************

# Пользователь вводит строку. Напишите программу,
# которая изменяет регистр символов в этой строке так,
# чтобы первая буква каждого слова была заглавной,
# а остальные буквы — строчными.

# Пример:
# Введите строку: Кажется, я забыл выключить утюг.
# Результат: Кажется, Я Забыл Выключить Утюг.

text = input("Введите строку: ").title()
print(text)

********************************************************************************

# Что нужно сделать
#
# При регистрации на сайте помимо логина нужно ещё придумать надёжный пароль.
# Этот пароль должен состоять минимум из восьми символов, в нём должны быть
# хотя бы одна большая буква и хотя бы три цифры. Тогда он будет считаться надёжным.

# Напишите программу, которая запрашивает у пользователя пароль до тех пор,
# пока он не введёт надёжный пароль. Используется латиница.

# Пример:
# Придумайте пароль: qwerty
# Пароль ненадёжный. Попробуйте ещё раз.
# Придумайте пароль: qwerty12
# Пароль ненадёжный. Попробуйте ещё раз.
# Придумайте пароль: qwerty123
# Пароль ненадёжный. Попробуйте ещё раз.
# Придумайте пароль: qWErty123
# Это надёжный пароль!


while True:
    password = input("Придумайте пароль: ")
    count_word = len([i for i in password])
    count_upper = len([i for i in password if i.isupper()])
    count_digit = len([i for i in password if i.isdigit()])
    if count_word >= 8 and count_upper > 1 and count_digit >= 3:
        print("Это надежный пароль!")
        break
    else:
        print("Пароль ненадёжный. Попробуйте ещё раз.")


********************************************************************************

# С увеличением объёма данных возникла потребность в сжатии этих данных без потери важной информации.
# Для этого было придумано кодирование, которое осуществляется следующим образом:

# s = 'aaaabbсaa' преобразуется в 'a4b2с1a2', то есть группы одинаковых символов исходной строки заменяются
# на этот символ и количество его повторений в этой позиции строки.

# Напишите программу, которая считывает строку, кодирует её предложенным алгоритмом и выводит закодированную
# последовательность на экран. Кодирование должно учитывать регистр символов.

# Пример:
# Введите строку: aaAAbbсaaaA
# Закодированная строка: a2A2b2с1a3A1

input_text = input("Введите строку: ")
count = 1

output_text = [print(word) for word in input_text]





********************************************************************************

# Что нужно сделать
#
# При написании клиент-серверного приложения часто приходится работать с теми самыми IP-адресами.
# Как вы уже знаете, IP-адрес состоит из четырёх целых чисел в диапазоне от 0 до 255, разделённых точками.
#
# Пользователь вводит строку. Напишите программу, которая определяет, является ли заданная строка правильным
# IP-адресом. Обеспечьте контроль ввода, где предусматривается ввод целых чисел от 0 до 255, а также точки между ними.

# Пример 1:
# Введите IP: 128.16.35.a4
# a4 — это не целое число.

# Пример 2:
# Введите IP: 128.16.35.a4
# 340 превышает 255.

# Пример 3:
# Введите IP: 34.56.42,5
# Адрес — это четыре числа, разделённые точками.

# Пример 4:
# Введите IP: 128.0.0.255
# IP-адрес корректен.

# # ----------------

# def check_ip():
#     ip = input("Введите IP: ")
#     ip = ip.split(".")
#     if len(ip) != 4:
#         print(f'Здесь чисел {len(ip)}, а должно быть четыре.')
#         check_ip()
#
#
#
#     for (number) in ip:
#         if int(number) > 255:
#             print(f"{number} превышает 255")
#             check_ip()
#         if int(number) < 0:
#             print(f"{number} меньше нуля")
#             check_ip()
#
#     return print('IP-адрес корректен.')
#
#
# check_ip()

# count_point = ip.count(".")
#     if 0 <= count_point > 3:
#         print("Адрес — это четыре числа, разделённые точками.")
# ------------------------------------
# import string library function
import string

# Storing the sets of punctuation in variable result
result = string.punctuation

# Printing the punctuation values
print(result)

from string import punctuation
from string import whitespace
#==============================================================================
def check_IP(s):
    p = set(s) & set(punctuation) - set('-')
    print(set(s))
    print(p)
    if p != set('.'):
        return f'{p}Адрес — это числа, разделенные точками.'
    lis = s.split('.')
    lis_n = []
    for e in lis:
        try:
            lis_n.append( int(e) )
        except:
            if e in whitespace:
                return f'Пробельный символ - это не целое число.'
            return f'{e} - это не целое число.'
    if len( lis_n ) != 4:
        return f'Здесь чисел { len( lis_n ) }, а должно быть четыре.'
    for n in lis_n:
        if n < 0:
            return f'{n} меньше нуля.'
        if n > 255:
            return f'{n} превышает 255.'
    return 'IP-адрес корректен.'
#==============================================================================
s = input('Введите IP: ')
print( check_IP(s) )

********************************************************************************

# Вашему другу надоело общаться простыми сообщениями, и он решил делать это необычным способом:
# он переворачивает каждое слово в тексте, при этом не трогая знаки препинания.

# Пользователь вводит текст, состоящий из слов и знаков препинания. Напишите программу, которая
# переворачивает (записывает в обратном порядке) все слова текста, оставив знаки препинания без изменений.
# Словом в тексте считается последовательность символов из прописных и строчных букв кириллицы.

# Пример 1:
# Сообщение: Это задание очень! простое.
# Новое сообщение: отЭ еинадаз ьнечо! еотсорп.

# Пример 2:
# Сообщение: Хотя ,. возм:ожно и нет.
# Новое сообщение: ятоХ ,. мзов:онжо и тен.

********************************************************************************



********************************************************************************

while True:
    grats_template = input("Введите шаблок поздравления. \nВ шаблоне надо использовать"
                       "конструкцию {name}\n: ")

    if "{name}" in grats_template:    # если эта строка есть в этой строке.
        break
    print("Ошибка! Отсутствует конструкция {name}\n")

print("Введите список имен (заканчивается на end):")
names_list = []
while True:
    name = input("Имя: ")
    if name != "end":
        names_list.append(name)
    else:
        break

for i_name in names_list:
    print(grats_template.format(name=i_name))

********************************************************************************

# После того, как человек сделал заказ в интернет-магазине,
# ему на почту приходит оповещение с его именем и номером заказа.

# Напишите программу, которая получает на вход имя и код заказа,
# а затем выводит на экран соответствующее сообщение.
# Для решения используйте строковый метод format.

# Пример:
# Имя: Иван
# Номер заказа: 10948
# Здравствуйте, Иван! Ваш номер заказа: 10948. Приятного дня!

grats_template = ("Здравствуйте, {name}!"
                           " Ваш номер заказа: {number}. Приятного дня!")

name = input("Введите имя: ")
number = int(input("Номер заказа: "))

print(grats_template.format(name = name, number = number))

********************************************************************************

# Один наш друг занял у нас определённую сумму
# денег и всё никак не может их вернуть. А деньги нам нужны.
# Поэтому мы решили написать небольшой скрипт-напоминалку,
# который, возможно, разбудит его совесть.

# Напишите программу, которая получает на вход имя и долг,
# а затем выводит на экран сообщение, где имя повторяется
# несколько раз (и долг, возможно, тоже). Используйте числа
# в названиях ключей.

# Пример:
# Введите имя: Том

# Введите долг: 100
# Том! Том, привет! Как дела, Том? Где мои 100 рублей? Том!

debit_text = ("{name}! {name}, привет! Как дела, {name}?"
         " Где мои {debit} рублей? {name}!")

name = input("Введите имя: ")
debit = int(input("Введите долг: "))

print(debit_text.format(name=name, debit=debit))

********************************************************************************

# IP-адрес компьютера состоит из 4 чисел, разделённых точкой.
# Каждое число находится в диапазоне от 0 до 255 (включительно).

# Пример правильного адреса: 192.168.1.0
# Пример неправильного адреса: 192.168.300.0
# Напишите программу, которая получает на вход 4 числа и выводит
# на экран IP-адрес. Используйте переменную ip_address в качестве шаблона.
# Обеспечьте контроль ввода.

ip_address = "{0}.{1}.{2}.{3}"
count = 0
numbers = []
while count < 4:
    new_number = int(input("Введите число от 0 до 255: "))
    if 0 <= new_number <= 255:
        count += 1
        numbers.append(new_number)
    else:
        print("Не верное число!!!")

print(ip_address.format(*numbers))
# * полезный инструмент, но и без него можно справиться,
# вручную прописав элементы по индексам


********************************************************************************

# text = input("Содержимое файла: ")
# word_list = text.split()
#
# print(word_list)
#
# new_text = "---".join(word_list)
# print(new_text)
# # ------------------------------------------
while True:
    # Создаем переменную grats_template и в нее вписываем, что мы наблон
    grats_template = input("Введите шаблон поздравления. \nВ шаблоне надо использовать"
                       " конструкцию {name} и {age}\n: ")

    # Проверяем есть ли в переменной grats_template конструкции {name} и {age}
    if "{name}" in grats_template and "{age}" in grats_template:    # если эта строка есть в этой строке.
        break
    print("Ошибка! Отсутствует конструкция {name} или {age}\n")

# создаем переменную names_list и вносим людей через запятую с пробелом так как указщано в split....
names_list = input("Список людей через запятую с пробелом: ").split(", ")

# создаем переменную age_str и вносим туда возраста через пробел
age_str = input("Возраст людей через пробел: ")

# создаем лист  ages через переменную age_str и вносим уже в список (int) числовые значения
ages = [int(i_number) for i_number in age_str.split()]

# Через переменную i_man в цикле выводим сообщение на экран
for i_man in range(len(names_list)):
    print(grats_template.format(name=names_list[i_man], age=ages[i_man]))


people = [" ".join([names_list[i_man], str(ages[i_man])])
          for i_man in range(len(names_list))]

people_str = ", ".join(people)
print("\nИменины", people_str)

********************************************************************************

# Усовершенствуйте старую программу:

# У нас есть список из трёх слов, которые вводит пользователь.
# Затем вводится сам текст произведения, который вводится уже в одну строку.
# Напишите программу, которая посчитает, сколько раз слова пользователя встречаются в тексте.

words = [input("Введите слово: ") for _ in range(3)]
text = input("Введите текст: ")
words_count = [text.count(word) for word in words]

print(words_count)

********************************************************************************

# У одной бабушки, когда та переписывается с внуком, постоянно залипает кнопка пробела.
# В итоге между словами получаются огромные расстояния. Внук не знает как это поправить
# в самом телефоне, поэтому обратился к вам за помощью.
#
# Пользователь вводит строку. Напишите программу, которая преобразовывает в этой строке
# все идущие подряд пробелы в один и выводит результат на экран.

# Пример:
# Введите текст: У       нас         пошёл                    снег    !
# Исправленный текст: У нас пошёл снег !

text = input("Введите текст: ")
print("Исправленный текст: ", " ".join(text.split()))

********************************************************************************

user_name = input("Введите имя пользователя: ")
file_name = input("Введите имя файла: ")

path = "c:/{user}/docs/folder/{new_file}".format(user=user_name, new_file=file_name)

if not path.endswith(".txt"):
    print("Ошибка! Неверное расширение файла!")
elif not path.startswith("c:/"):
    print("Ошибка! Неверно указан диск!")
else:
    print("Путь к файлу: ", path)

********************************************************************************

word_list = []

for i_num in range(3):
    print(f"Введите {i_num + 1} слово: ", end="")
    word = input().lower()
    word_list.append(word)

text = input("Слово из текста: ").lower().split()


print(f"\nПодсчет слов в тексте: ")
for index in range(3):
    print(f"{word_list[index]} : {text.count(word_list[index])}")


********************************************************************************

# Мы уже писали программу, которая шифрует строку с помощью шифра Цезаря.
# Напомним, что в таком способе шифрования каждая буква
# заменяется на следующую по алфавиту через K позиций по кругу.

# Напишите (модифицируйте) программу, которая реализует этот алгоритм шифрования.
# Не используйте конкатенацию и сделайте так, чтобы текст был в одном регистре.

# def caesar_cipher(string, user_shift):
#     char_list = [(alphabet[(alphabet.index(sym) + user_shift) % 33] if sym != " " else " ") for sym in string]
#     new_str = " "
#     for i_char in char_list:
#         new_str += i_char
#     return new_str
#
# alphabet = "абвгдеёжзийклмнопрстуфхцчшщъыьэюя.".lower()
# input_str =  input("\nВведите сообщение: ").lower()
# shift = int(input("Введите сдвиг: "))
#
# output_str = caesar_cipher(input_str, shift)
#
# print(f"Зашифрованное сообщение: {output_str}")

#  решение SkillBox
text = input("Введите текст: ")
shift = int(input("Введите сдвиг: "))
alphabet = [chr(index) for index in range(ord("а"), ord("я") + 1)]  # заполняем список буквами алфавита
# Думаем над структурой алгоритма: [вариант_1 если условие_1 иначе вариант_2 for буква in текст]
new_text = [alphabet[(alphabet.index(letter) + shift) % len(alphabet)] if letter in alphabet else letter for letter in text.lower()]
print(''.join(new_text))

********************************************************************************

# Все данные сайта лежат в одном проекте.
# При написании кода, внутри этого проекта часто используются
# абсолютные пути файлов, которые необходимо проверять.

# Пользователь вводит абсолютный путь к текстовому файлу, а также
# проверяемые данные: диск и расширение файла. Напишите программу,
# которая проверяет корректность этого пути.

# Пример:
# Путь к файлу: C:/user/docs/folder/new_file.txt
# На каком диске должен лежать файл: C
# Требуемое расширение файла: .txt
# Путь корректен!

path = input("Введите путь к файлу: ").lower()
disk = input("На каком диске должен лежать файл: ")
expansion = input("Требуемое расширение: ")

if not path.endswith(f".{expansion}"):
    print("Ошибка! Неверное расширение файла!")
elif not path.startswith(f"{disk}:/"):
    print("Ошибка! Неверно указан диск!")
else:
    print("Путь корректен!")

********************************************************************************

# На вход в программу подаётся строка, состоящая из прописных и заглавных букв кириллицы.
# Напишите код, который проверяет,
# каких букв в строке больше, прописных или заглавных.
# Если заглавных букв больше,
# то сделать все буквы строки заглавными, иначе сделать все прописными.

# Подсказка: используйте методы islower() и/или isupper().


text = input("Введите текст: ")
lowers = len([letter for letter in text if letter.islower()])
uppers = len([letter for letter in text if letter.isupper()])

if lowers > uppers:
    print("Результат:", text.lower())
else:
    print("Результат:", text.upper())


********************************************************************************

details_num = 500000000
price = 23.8589578
increase = 0.045678

print("На складе {: ,d} деталей.".format(details_num))
print("На складе {:.0e} деталей. ".format(details_num))
print("Каждая деталь стоит {:.2f} рублей".format(price))
print("Цена увеличилась на {:%}".format(increase))
print("Цена увеличилась на {:.2%}".format(increase))
print("Цена увеличилась на {:.1%}".format(increase))


********************************************************************************



********************************************************************************

# Что нужно сделать

# Мы продолжаем писать приложение для удобного прослушивания музыки, но теперь наши
# песни хранятся в виде словаря, а не вложенных списков. Каждая песня состоит из названия
# и продолжительности с точностью до долей минут.

# violator_songs = {
#     'World in My Eyes': 4.86,
#     'Sweetest Perfection': 4.43,
#     'Personal Jesus': 4.56,
#     'Halo': 4.9,
#     'Waiting for the Night': 6.07,
#     'Enjoy the Silence': 4.20,
#     'Policy of Truth': 4.76,
#     'Blue Dress': 4.29,
#     'Clean': 5.83
# }

# Напишите программу, которая запрашивает у пользователя количество песен из списка и
# названия этих песен, а на экран выводит общее время их звучания.

violator_songs = {
    'World in My Eyes': 4.86,
    'Sweetest Perfection': 4.43,
    'Personal Jesus': 4.56,
    'Halo': 4.9,
    'Waiting for the Night': 6.07,
    'Enjoy the Silence': 4.20,
    'Policy of Truth': 4.76,
    'Blue Dress': 4.29,
    'Clean': 5.83
}

print("Сколько песен брать: ", end="")
number = int(input())
time = 0
for n in range(number):
    print(f"Название {n + 1}-й песни: ", end="")
    search_song = input()
    for i_song in violator_songs:
        if i_song == search_song:
            time += violator_songs[i_song]
print(f"\nОбщее время звучания песен: {round(time, 2)} минуты.")

********************************************************************************

# Антон, помимо программирования, также увлекается и географией,
# поэтому он решил связать эти две области и написать для своего проекта
# небольшую программу-навигатор.

# Пользователь вводит количество стран N, а затем N раз вводит страну и по три
# города, которые в этой стране находятся, в одну строку. Реализуйте такую
# программу и для каждого из трёх городов укажите, в какой стране он находится.
# Если такого города нет,
# то выведите соответствующее сообщение.

# Пример:
# Количество стран: 2
# Первая страна: Россия Москва Петербург Новгород
# Вторая страна: Германия Берлин Лейпциг Мюнхен

# Первый город: Москва
# Город Москва расположен в стране Россия.
# Второй город: Мюнхен
# Город Мюнхен расположен в стране Германия.
# Третий город: Рим
# По городу Рим данных нет.


def search_city(country_dict, input_city):
    for country in country_dict:
        for city in country_dict[country]:
            if input_city == city:
                print(f"Город {input_city} расположен в стране {country}")
                return
    else:
        print(f"По городу {input_city} данных нет")

# --------------------------------------------------
number_country = int(input("Введите количество стран: "))
country_dict = dict()

for country in range(number_country):
    country_str = input(f"Страна {country + 1 }"
                        f" (Название и три города этой страны через пробел)\n: ").split()
    for sym in range(len(country_str)):
        country_dict[country_str[0]] = country_str[1::]

for request in range(3):
    print(f"{request + 1}-й город: ", end="")
    input_city = input()
    search_city(country_dict, input_city)

********************************************************************************

# При работе с API (application programming interface) сайта биржи по криптовалюте вы получили вот такие данные в виде словаря:

# data = {
#     "address": "0x544444444444",
#     "ETH": {
#         "balance": 444,
#         "totalIn": 444,
#         "totalOut": 4
#     },
#     "count_txs": 2,
#     "tokens": [
#         {
#             "fst_token_info": {
#                 "address": "0x44444",
#                 "name": "fdf",
#                 "decimals": 0,
#                 "symbol": "dsfdsf",
#                 "total_supply": "3228562189",
#                 "owner": "0x44444",
#                 "last_updated": 1519022607901,
#                 "issuances_count": 0,
#                 "holders_count": 137528,
#                 "price": False
#             },
#             "balance": 5000,
#             "totalIn": 0,
#             "total_out": 0
#         },
#         {
#             "sec_token_info": {
#                 "address": "0x44444",
#                 "name": "ggg",
#                 "decimals": "2",
#                 "symbol": "fff",
#                 "total_supply": "250000000000",
#                 "owner": "0x44444",
#                 "last_updated": 1520452201,
#                 "issuances_count": 0,
#                 "holders_count": 20707,
#                 "price": False
#             },
#             "balance": 500,
#             "totalIn": 0,
#             "total_out": 0
#         }
#     ]
# }

# Теперь вам предстоит немного обработать эти данные.
# Напишите программу, которая выполняет следующий алгоритм действий:
# Вывести списки ключей и значений словаря.
# В “ETH” добавить ключ “total_diff” со значением 100.
# Внутри “fst_token_info” значение ключа “name” поменять с “fdf” на “doge”.
# Удалить “total_out” из tokens и присвоить его значение в “total_out” внутри “ETH”.
# Внутри "sec_token_info" изменить название ключа “price” на “total_price”.
# После выполнения алгоритма выводить результат (словарь) не нужно.

data = {
    "address": "0x544444444444",
    "ETH": {
        "balance": 444,
        "totalIn": 444,
        "totalOut": 4
    },
    "count_txs": 2,
    "tokens": [
        {
            "fst_token_info": {
                "address": "0x44444",
                "name": "fdf",
                "decimals": 0,
                "symbol": "dsfdsf",
                "total_supply": "3228562189",
                "owner": "0x44444",
                "last_updated": 1519022607901,
                "issuances_count": 0,
                "holders_count": 137528,
                "price": False
            },
            "balance": 5000,
            "totalIn": 0,
            "total_out": 0
        },
        {
            "sec_token_info": {
                "address": "0x44444",
                "name": "ggg",
                "decimals": "2",
                "symbol": "fff",
                "total_supply": "250000000000",
                "owner": "0x44444",
                "last_updated": 1520452201,
                "issuances_count": 0,
                "holders_count": 20707,
                "price": False
            },
            "balance": 500,
            "totalIn": 0,
            "total_out": 0
        }
    ]
}


********************************************************************************

# Что нужно сделать

# В базе данных магазина вся необходимая информация по товарам делится на два словаря:
# первый отвечает за коды товаров, второй — за списки количества разнообразных товаров на складе:

# goods = {
#     'Лампа': '12345',
#     'Стол': '23456',
#     'Диван': '34567',
#     'Стул': '45678',
# }

# store = {
#     '12345': [
#         {'quantity': 27, 'price': 42},
#     ],
#     '23456': [
#         {'quantity': 22, 'price': 510},
#         {'quantity': 32, 'price': 520},
#     ],
#     '34567': [
#         {'quantity': 2, 'price': 1200},
#         {'quantity': 1, 'price': 1150},
#     ],
#     '45678': [
#         {'quantity': 50, 'price': 100},
#         {'quantity': 12, 'price': 95},
#         {'quantity': 43, 'price': 97},
#     ],
# }

# Каждая запись второго словаря отображает, сколько и по какой
# цене закупалось товаров (цена указана за одну штуку).

# Напишите программу, которая рассчитывает, на какую сумму лежит
# каждого товара на складе, и выводит эту информацию на экран.

# Результат работы программы:
# Лампа — 27 штук, стоимость 1134 рубля
# Стол — 54 штуки, стоимость 27 860 рублей
# Диван — 3 штуки, стоимость 3550 рублей
# Стул — 105 штук, стоимость 10 311 рублей

goods = {
    'Лампа': '12345',
    'Стол': '23456',
    'Диван': '34567',
    'Стул': '45678',
}

store = {
    '12345': [
        {'quantity': 27, 'price': 42},
    ],
    '23456': [
        {'quantity': 22, 'price': 510},
        {'quantity': 32, 'price': 520},
    ],
    '34567': [
        {'quantity': 2, 'price': 1200},
        {'quantity': 1, 'price': 1150},
    ],
    '45678': [
        {'quantity': 50, 'price': 100},
        {'quantity': 12, 'price': 95},
        {'quantity': 43, 'price': 97},
    ],
}

count_details = 0
count_price = 0
for name in goods:
    number_name = (goods[name])
    for identifier in store:
        if identifier == number_name:
            for position in store[identifier]:
                count_details += position["quantity"]
                count_price += position["quantity"] * position["price"]
            print(f"{name} - {count_details} штуки, стоимостью {count_price} рублей")
            count_details = 0
            count_price = 0





********************************************************************************

# Мы уже писали программу для лингвистов, которая получала на вход текст и считала,
# сколько раз в строке встречается каждый символ. Теперь задача немного поменялась:
# максимальную частоту выводить не нужно, однако необходимо написать функцию, которая
# будет инвертировать полученный словарь. То есть в качестве ключа будет частота, а в
# качестве значения — список символов с этой частотой. Реализуйте такую программу.

# Пример:
# Введите текст: здесь что-то написано
# Оригинальный словарь частот:

#   : 2
# - : 1
# З : 1
# а : 2
# д : 1
# е : 1
# и : 1
# н : 2
# о : 3
# п : 1
# с : 2
# т : 2
# ч : 1
# ь : 1

# Инвертированный словарь частот:
# 1 : ['З', 'д', 'е', 'ь', 'ч', '-', 'п', 'и']
# 2 : ['с', ' ', 'т', 'н', 'а']
# 3 : ['о']

count = 0
text = input("Введите текст: ").split()
original_dict = {(" ".join(sym)).lower() : count for word in text for sym in word}

for letter in original_dict:
    for word_text in text:
        for letter_word in word_text:
            if letter == letter_word:
                original_dict[letter] = original_dict[letter] + 1
print(f"Оригинальный словарь частот: {original_dict}")

invert_dict = {num_count: "" for num_count in original_dict.values()}

for sym_i in invert_dict:
    print(sym_i, " <-- Sym_I")
    for sym_o in original_dict:
        print(sym_o, " <-- Sym_0")
        if original_dict[sym_o] == sym_i:
            invert_dict[sym_i] += sym_o
            print(f"найдено совпадение {invert_dict}")


print(f"Инвертированный словарь частот: {invert_dict}")




********************************************************************************

# Одна библиотека поручила вам написать программу для оцифровки словарей синонимов.
# На вход в программу подаётся N пар слов. Каждое слово является синонимом к своему
# парному слову.

# Реализуйте код, который составляет словарь синонимов (все слова в словаре различны),
# затем запрашивает у пользователя слово и выводит на экран его синоним. Обеспечьте
# контроль ввода: если такого слова нет, то выведите ошибку и запросите слово ещё раз.
# При этом проверка не должна зависеть от регистра символов.

# Пример:
# Введите количество пар слов: 3
# Первая пара: Привет - Здравствуйте
# Вторая пара: Печально - Грустно
# Третья пара: Весело - Радостно

# Введите слово: интересно
# Такого слова в словаре нет.
# Введите слово: здравствуйте
# Синоним: Привет


def search_synonym(word):
    search_word = input("Введите слово: ").lower()
    synonim_word = {}
    for new in word:
        if word[new][0] == search_word:
            print(f"Синоним: {word[new][1]}")
            break
        if word[new][1] == search_word:
            print(f"Синоним: {word[new][0]}")
            break
    else:
        print("Такого слова в словаре нет.")
        search_synonym(word)

#--------------------------------------------------
word_couple = int(input("Введите количество пар слов: "))
word_dict = {}
print("Слова заносятся через тире!")
for number_couple in range(word_couple):
    word_dict[number_couple] = input(f"{number_couple + 1}-я пара: ").lower().split(' - ')

search_synonym(word_dict)

********************************************************************************

# В базе данных интернет-магазина PizzaTime хранятся данные о том, кто, что и сколько заказывал
# у них в определённый период. Вам нужно структурировать эту информацию, а также понять,
# сколько всего пицц купил каждый заказчик.

# На вход в программу подаётся N заказов. Каждый заказ представляет собой строку вида
# «Покупатель — название пиццы — количество заказанных пицц». Реализуйте код, который
# выводит список покупателей и их заказов по алфавиту. Учитывайте, что один человек может
# заказать одно и то же несколько раз.

# Пример:
# Введите количество заказов: 6
# Первый заказ: Иванов Пепперони 1
# Второй заказ: Петров Де-Люкс 2
# Третий заказ: Иванов Мясная 3
# Четвёртый заказ: Иванов Мексиканская 2
# Пятый заказ: Иванов Пепперони 2
# Шестой заказ: Петров Интересная 5

# Иванов:
#     Мексиканская: 2
#     Мясная: 3
#     Пепперони: 3

# Петров:
#     Де-Люкс: 2
#     Интересная: 5

database = dict()
number_order = int(input("Введите количество заказов: "))

for number in range(number_order):
    order = input(f"{number + 1 } -й заказ: ").split()
    if order[0] in database:
        if order[1] in database[order[0]]:
            database[order[0]][order[1]] += int(order[2])
        else:
            database[order[0]][order[1]] = order[2]
    else:
        database[order[0]] = dict({order[1]: int(order[2])})
    print(database)

for elem_1 in sorted(database):
    print(f"\n{elem_1}:")
    for elem_2 in sorted(database[elem_1]):
        print(f"\t{elem_2}: {database[elem_1][elem_2]}")


********************************************************************************

# Роман и Мария играют в игру. Роман загадал натуральное число от 1 до N.
# Мария пытается угадать это число, для этого он называет несколько чисел 
# подряд. Роман говорит Мария «да», если среди названных Мария чисел
# есть задуманное. В противном случае Роман говорит «нет». 
# После нескольких заданных вопросов Мария сдалася и попросила вас помочь
# ему определить, какие числа мог задумать Роман.
# 
# Напишите программу, которая имитирует диалог Романа и Мария.
# В начале на вход подаётся число N — это максимальное число, которое 
# мог загадать Роман. Затем Мария предполагает, что среди некоторых чисел 
# есть то, которое загадал Роман (несколько чисел через пробел), а Роман 
# отвечает. Так продолжается до тех пор, пока Мария не попросит помощи 
# (пока не введётся строка «Помогите!»). В конце программы необходимо
# вывести, какие числа мог загадать Роман.

# Пример реализации:
# Введите максимальное число: 10
# Нужное число есть среди вот этих чисел: 1 2 3 4 5
# Ответ Романа: Да
# Нужное число есть среди вот этих чисел: 2 4 6 8 10
# Ответ Романа: Нет
# Нужное число есть среди вот этих чисел: Помогите! 
# Роман мог загадать следующие числа: 1 3 5

import random
max_number = int(input("Введите максимальное число: "))
number_dict = dict()
number_dict = {number + 1 for number in range(max_number)}
print(number_dict, " <-- number_dick")

hidden_number = random.randint(1, max_number)
print(hidden_number)
last_number = {}

while True:
    number_txt = set(input("Нужное число есть среди этих чисел: ").split())
    print(number_txt, "Number_txt")

    for search_number in number_txt:
        if int(search_number) == hidden_number:
            print("Ответ Романа: Да")
            break
    else:
        for diggit in number_txt:
            last_number = last_number.update(diggit)

        print(last_number, " <-- last_number")
        print("Ответ Романа: Нет")




********************************************************************************

# В генеалогическом древе у каждого человека, кроме родоначальника,
# есть ровно один родитель. Каждому элементу дерева сопоставляется целое
# неотрицательное число, называемое высотой. У родоначальника высота равна
# 0, у любого другого элемента высота на один больше, чем у его родителя.
# Вам нужно написать программу, которая по заданному генеалогическому
# древу определяет высоту всех его элементов.

# Программа получает на вход N количество человек в генеалогическом древе.
# Далее следует N − 1 строк, в каждой из которых задаётся родитель для каждого
# элемента дерева, кроме родоначальника. Каждая строка имеет вид «имя_потомка
# имя_родителя».

# Программа должна вывести список всех элементов древа в лексикографическом
# порядке (по алфавиту). После вывода имени каждого элемента необходимо вывести его высоту.

# Пример:
# Введите количество человек: 9
# Первая пара: Alexei Peter_I
# Вторая пара: Anna Peter_I
# Третья пара: Elizabeth Peter_I
# Четвёртая пара: Peter_II Alexei
# Пятая пара: Peter_III Anna
# Шестая пара: Paul_I Peter_III
# Седьмая пара: Alexander_I Paul_I
# Восьмая пара: Nicholaus_I Paul_I

# «Высота» каждого члена семьи:
# Alexander_I 4
# Alexei 1
# Anna 1
# Elizabeth 1
# Nicholaus_I 4
# Paul_I 3
# Peter_I 0
# Peter_II 2
# Peter_III 2

********************************************************************************



********************************************************************************

# ------------------------------------------------------------------------
# Ключи уникальные, т. е. они не повторяются.
# 01 - Списки и словари НЕ МОГУТ быть ключами, зато могут быть значениями.
# например: {"a":[1,2,3], "b":{"b":10 "d":20}}
# ------------------------------------------------------------------------
# Дополнения....
# example = dict()   # <--- Так создаеться словарь.
# example["Ваня"] = 1000 # <--- Так заносятся "ключ"(Ваня)со значением 1000 в словарь.


f" Задача 01 - Телефонный справочник."
# Новая переменная телефонный словарь.
phonebook_dictionary = {                                                    # <--- Словарь в круглых скобках.
    "Ваня": 88006663636,                                                     # <--- В кавычках - это ключ ,затем м записывается двоеточие .
    "Петя": 88005553535,                                                     # <--- Номер телефона - это значение присвоенное ключу.
    "Лена": 88007773737}                                                    # <--- Двух одинаковых ключей не может быть!!!!

name = input("Введите имя: ")                                             # <--- Запрашиваем имя пользователя.

if name in phonebook_dictionary:                                           # <--- Поиск имени в телефонном справочнике.
    print(f"Номер телефона: {phonebook_dictionary[name]}")     # <--- Выводим номер телефона запрашиваемого имени.
else:
    print(f"Человек с именем {name} не найден!")                   # <--- Выводим сообщение если "ключ" не найден

f" Задача 02 - Cтудент."
# Входные данные:
# Информаци о студенте.

# Пример ввода:
# Илья Иванов Москва МГУ 5 4 4 4 5
# Выходные данные:
# Словарь

student_str = input(
    "Введите информацию о студенте через пробел: \n"
    "(Имя, Фамилию, город, место учебы, оценки)\n: ")

# Создаем новую переменную и воспользуемся методом split.
student_info = student_str.split()
print(student_info)
# Создаем новый словарь.
student = dict()
# Добавляем (данные) в словарь...
student["Имя"] = student_info[0]
student["Фамилия"] = student_info[1]
student["Город"] = student_info[2]
student["Место учебы"] = student_info[3]

student["Оценки"] = []
for i_grade in student_info[4:]:
    student["Оценки"].append(int(i_grade))

for i_info in student:
    print(i_info, "-", student[i_info])



********************************************************************************

# На вход программе поступает целое число num. Напишите программу создания словаря,
# который включает в себя ключи от 1 до num, а значениями соответствующего ключа
# будет значение ключа в квадрате.

# Пример:
# Введите целое число: 5

# Результат: {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}

# Решение SkillBox
number = int(input("Введите целое число: "))
result = {}
for digit in range(1, number + 1):
    result[digit] = digit ** 2
print("Результат:", result)

# Решение Гоша Дударь
number = int(input("Введите целое число: "))
result = {a : a ** 2 for a in range(1, number + 1)}
print(f"Результат {result}")

********************************************************************************

# Задача 2. Контакты
# Энтузиаст Степан, купив новый телефон, решил написать для него свою собственную
# операционную систему. И, конечно же, первое, что он захотел в ней реализовать, —
# это телефонная книга.

# Напишите программу, которая запрашивает у пользователя имя контакта и номер
# телефона, добавляет их в словарь и выводит на экран текущий словарь контактов.
# Запрос на добавление идёт бесконечно (но можно задать своё условие для завершения
# программы). Обеспечьте контроль ввода: если это имя уже есть в словаре, то выведите
# соответствующее сообщение.

# Пример:
# Текущие контакты на телефоне:
# <Пусто>

# Введите имя: Иван
# Введите номер телефона: 100200300
# Текущие контакты на телефоне:
# Иван  100200300

# Введите имя: Лена
# Введите номер телефона: 8005555522
# Текущие контакты на телефоне:
# Иван  100200300
# Лена  8005555522

# Введите имя: Иван
# Ошибка: такое имя уже существует.
#
# ...

# example = dict()   # <--- Так создается словарь.
# example["Ваня"] = 1000 # <--- Так заносятся "ключ"(Ваня)со значением 1000 в словарь.

# Мое решение
phonebook_dictionary = dict()
name = " "
while name != "":
    new_name = input("Введите имя: ")
    new_phone = input("Введите номер телефона: ")

    for name in phonebook_dictionary:
        if new_name == name:
            print("Ошибка: такое имя уже существует.")
            break

    if new_name != "":
        phonebook_dictionary[new_name] = {new_phone}
        print(f"Текущие контакты на телефоне {phonebook_dictionary}")
    else:
        break



# Решение SkillBox
current_contacts = {}
while True:
    print("Текущие контакты на телефоне:")
    if current_contacts:
        for name in current_contacts:
            print(name, current_contacts[name])
    else:
        print("<Пусто>")
    new_contact = input("Введите имя (для остановки введите пустую строку): ")
    new_telephone = int(input("Введите номер телефона: "))
    if new_contact in current_contacts:
        print("Ошибка: такое имя уже существует.")
    else:
        current_contacts[new_contact] = new_telephone

********************************************************************************

def histogram(string):
    sym_dict = dict()
    for sym in string:
        if sym in sym_dict:
            sym_dict[sym] +=1
        else:
            sym_dict[sym] = 1
    return  sym_dict

text = input("Введите текст: ").lower()
hist = histogram(text)

for i_sym in sorted(hist.keys()):
    print(i_sym, " : ", hist[i_sym])

print(f"Максимальная частота: ", max(hist.values()))

********************************************************************************

phonebook = {
    "Ваня": 100,
    "Петя": 200,
    "Алиса": 300}

other_book = {
    "Игорь": 400,
    "Петя": 500,
    "Алена": 600}

# объединение словарей.
phonebook.update(other_book)
# Удаляет значение в словаре.
phonebook.pop("Игорь")
# Переименовали Ваню в Гошу.
phonebook["Гоша"] = phonebook.pop("Ваня")
print(phonebook)

# Игнорируем несуществующий ключ, это для того чтобы не выскакивала ошибка в программе.
print(phonebook.get("Степан"))


********************************************************************************

# Задача 1. Склады
# У мебельного магазина есть два склада, на которых хранятся разные категории товаров по парам «название — количество»:

# small_storage = {
#     'гвозди': 5000,
#     'шурупы': 3040,
#     'саморезы': 2000}

# big_storage = {
#     'доски': 1000,
#     'балки': 150,
#     'рейки': 600}

# Магазин решил сократить аренду и скинуть все товары в большой склад
# (big_storage). После этого нас попросили реализовать поиск по товарам.
#
# Напишите программу, которая объединяет оба словаря в один (в big_storage),
# затем запрашивает у пользователя название товара и выводит на экран его количество.
# Если такого товара нет, то выводит об этом ошибку. Для получения значения используйте метод get.

small_storage = {
    'гвозди': 5000,
    'шурупы': 3040,
    'саморезы': 2000}

big_storage = {
    'доски': 1000,
    'балки': 150,
    'рейки': 600}

big_storage.update(small_storage)
title = input("Введите название товара: ")
if big_storage.get(title) == None:
    print("Такого товара на складе нет.")
else:
    print(f"Количество товара на складе: {big_storage.get(title)}")


********************************************************************************

# Мы работаем в одной небольшой торговой компании,
# где все данные о продажах фруктов за год сохранены
# в словаре в виде пар «название фрукта — доход»:

# incomes = {
#     'apple': 5600.20,
#     'orange': 3500.45,
#     'banana': 5000.00,
#     'bergamot': 3700.56,
#     'durian': 5987.23,
#     'grapefruit': 300.40,
#     'peach': 10000.50,
#     'pear': 1020.00,
#     'persimmon': 310.00,}

# В компании наступил небольшой кризис, и нам поручено провести небольшой анализ дохода.
# Напишите программу, которая находит общий доход, затем выводит фрукт с минимальным доходом
# и удаляет его из словаря. Выведите итоговый словарь на экран.

# Результат работы программы:
# Общий доход за год составил 35419.34 рублей
# Самый маленький доход у grapefruit. Он составляет 300.4 рублей
# Итоговый словарь: {'apple': 5600.2, 'orange': 3500.45, 'banana': 5000.0, 'bergamot': 3700.56,
# 'durian': 5987.23, 'peach': 10000.5, 'pear': 1020.0, 'persimmon': 310.0}

incomes = {
    'apple': 5600.20,
    'orange': 3500.45,
    'banana': 5000.00,
    'bergamot': 3700.56,
    'durian': 5987.23,
    'grapefruit': 300.40,
    'peach': 10000.50,
    'pear': 1020.00,
    'persimmon': 310.00, }

sum = 0
min_value = None
min_name = ""
for name, value in incomes.items():  # items() позволяет сразу обратиться и к ключам, и к значениям словаря
    sum += value
    if min_value is None or min_value > value:
        min_value = value
        min_name = name

incomes.pop(min_name)

print(f"Общий доход за год составил: {sum} рублей.")
print(f"Самый маленький доход у {min_name}. Он составляет {min_value} рублей. ")
print(f"Итоговый словарь: {incomes}")

********************************************************************************

# Дана структура, которая содержит описание одного из членов семьи (имя, фамилия, хобби, сколько лет и дети):

# family_member = {
#     "name": "Jane",
#     "surname": "Doe",
#     "hobbies": ["running", "sky diving", "singing"],
#     "age": 35,
#     "children": [
#         {
#             "name": "Alice",
#             "age": 6
#         },
#         {
#             "name": "Bob",
#             "age": 8
#         }
#     ]
# }

# Напишите программу, которая реализует такую структуру: имя, фамилия, хобби, кол-во лет и дети.
# Затем, с помощью метода get и установки значения по умолчанию, проверьте есть ли ребёнок с именем Bob.
# Затем в отдельную переменную получите фамилию этого ребёнка и выведите её на экран.
# Если у него нет фамилии, то получите значение ‘Nosurname’.

family_member = {
    "name": "Jane",
    "surname": "Doe",
    "hobbies": ["running", "sky diving", "singing"],
    "age": 35,
    "children": [
        {
            "name": "Alice",
            "age": 6},
        {
            "name": "Bob",
            "age": 8}]}




# Созадем словарь (дети)
childrens_dict = {}

search_bob = childrens_dict.get("Bob")
if search_bob:
    print("Bob найден")
else:
    print("Bob-а нету!")

childrens_surname = family_member.get("surname")
if childrens_surname:
    print(childrens_surname)
else:
    print("Nosurname")

********************************************************************************

# Есть готовый словарь игроков, у каждого игрока есть имя, команда,
# в которой он играет, а также его текущий статус, в котором указано,
# отдыхает он, тренируется или путешествует:

# Напишите программу, которая выводит на экран вот такие данные в разных строчках:

# Все члены команды из команды А, которые отдыхают.
# Все члены команды из группы B, которые тренируются.
# Все члены команды из команды C, которые путешествуют.

players_dict = {
    1: {'name': 'Vanya', 'team': 'A', 'status': 'Rest'},
    2: {'name': 'Lena', 'team': 'B', 'status': 'Training'},
    3: {'name': 'Maxim', 'team': 'C', 'status': 'Travel'},
    4: {'name': 'Egor', 'team': 'C', 'status': 'Rest'},
    5: {'name': 'Andrei', 'team': 'A', 'status': 'Training'},
    6: {'name': 'Sasha', 'team': 'A', 'status': 'Rest'},
    7: {'name': 'Alina', 'team': 'B', 'status': 'Rest'},
    8: {'name': 'Masha', 'team': 'C', 'status': 'Travel'}}
print(players_dict)
# Члены команды А которые сейчас отдыхают.
command = input("Enter the command number (A,B,C)\n: ")
does = input("Output team members who: \n(Training, Rest, Travel)\n:")

team_a_members = [
    player["name"]
    for player in players_dict.values()
    if player["team"] == command.capitalize() and player["status"] == does.capitalize()
]
print(f"Members of team {command}, who are now {does} : {team_a_members}")



********************************************************************************

# Напишите программу, которая считает количество знаков пунктуации в символьной строке.
# К знакам пунктуации относятся символы из набора ".,;:!?". Набор должен храниться в виде множества.

# Пример:
# Введите строку: Я! Есть. Грут?! Я, Грут и Есть.
# Количество знаков пунктуации: 6

text = input("Введите строку: ")
punctuation = set(".,;:!?")
count = 0
for sym in text:
    if sym in punctuation:
        count += 1
print(f"Количество знаков пунктуации: {count}")

********************************************************************************

# На одном семинаре по теории множеств нужно показать наглядный пример,
# как эти множества работают. Для начала было сгенерировано два набора чисел:

# nums_1 = [29, 17, 10, 15, 13, 22, 12, 22, 7, 24, 26, 3, 11, 2, 3, 16, 19, 21, 2, 3, 8, 27, 2, 17, 2, 20, 12, 21, 3, 1]
# nums_2 = [16, 21, 30, 24, 5, 7, 23, 13, 11, 5, 21, 5, 19, 9, 12, 9, 15, 16, 29, 8, 16, 1, 22, 15, 16, 9, 1, 13, 21, 21]

# Вас попросили написать программу, которая будет наглядно демонстрировать
# работу со множествами с помощью этих чисел.

# Напишите программу, которая преобразует списки во множества и убирает
# повторяющиеся элементы. Затем удаляет минимальный элемент из каждого множества
# и добавляет туда случайное число в диапазоне от 100 до 200. Затем выполните
# следующие действия со множествами:

# Вывести все элементы множеств (объединение).
# Вывести только общие элементы (пересечение).
# Вывести элементы, входящие в nums_2, но не входящие в nums_1.

import random
nums_1 = [29, 17, 10, 15, 13, 22, 12, 22, 7, 24, 26, 3, 11, 2, 3, 16, 19, 21, 2, 3, 8, 27, 2, 17, 2, 20, 12, 21, 3, 1]
nums_2 = [16, 21, 30, 24, 5, 7, 23, 13, 11, 5, 21, 5, 19, 9, 12, 9, 15, 16, 29, 8, 16, 1, 22, 15, 16, 9, 1, 13, 21, 21]
# Убираем повторяющиеся элементы.
nums_set_1 = set(nums_1) # {1, 2, 3, 7, 8, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 24, 26, 27, 29}
nums_set_2 = set(nums_2) # {1, 5, 7, 8, 9, 11, 12, 13, 15, 16, 19, 21, 22, 23, 24, 29, 30}
print(nums_set_1)
print(nums_set_2)
# Затем удаляет минимальный элемент из каждого множества
# и добавляет туда случайное число в диапазоне от 100 до 200.
nums_set_1.discard(min(nums_set_1))
nums_set_2.discard(min(nums_set_2))
print(nums_set_1, nums_set_2)
nums_set_1.add(random.randint(100, 200))
nums_set_2.add(random.randint(100, 200))
print(nums_set_1, nums_set_2)
# Вывести все элементы множеств (объединение).
print(nums_set_1 | nums_set_2)
# Вывести только общие элементы (пересечение).
print(nums_set_1 & nums_set_2)
# Вывести элементы, входящие в nums_2, но не входящие в nums_1.
print(nums_set_2 - nums_set_1)


********************************************************************************

# Напишите программу, которая находит все различные цифры в символьной строке.
# Для решения используйте множество (цифры будут различные, и поиск во множестве намного быстрее, чем в списке).

# Подсказка: можно использовать вот такое сравнение '0'<=x<='9'

# Пример:
# Введите строку: ab1n32kz2
# Различные цифры строки: 123

text = input("Введите строку: ")
# Разъединяет текст по буквам и цифрам
text_unique = set(text)
# При помощи множества выделим из строки text_unique только общие элементы (цифры) и посчитаем длину множества
result = text_unique & set("0123456789")
# Выводим результат
print(''.join(result))

# Решение через цикл и сравнение:
new_result = set()
for symbol in text:
    if '0' <= symbol <= '9':
        new_result.add(symbol)
print(''.join(new_result))

********************************************************************************

# Убрать одинаковые числа.
import random
number_list = [random.randint(1, 4) for _ in range(10)]

# По факту закоментированный код не нужен!!! Результат одинг и тот же....
# new_list = []
# for i_num in number_list:
#     if i_num not in new_list:
#         new_list.append(i_num)
print(number_list)
# print(new_list)

unique = set(number_list)
print(unique, "\n")

# -----------------------------------
num_1 = {1, 2, 3, 4, 5}
num_2 = {4, 5, 6, 7, 8}
print(num_1.intersection(num_2))                                 # {4, 5}
# то же самое получиться если написать код вот так
print(num_1 & num_2)                                                # {4, 5}
print(num_1.union(num_2))                                         # {1, 2, 3, 4, 5, 6, 7, 8}
print(num_1.difference(num_2))                                   # {1, 2, 3}
print(num_1 - num_2)                                                # {1, 2, 3}
print(num_2 - num_1)                                                # {8, 6, 7}

# --------------------------
nums_1 = [29, 17, 10, 15, 13, 22, 12, 22, 7, 24, 26, 3, 11, 2, 3, 16, 19, 21, 2, 3, 8, 27, 2, 17, 2, 20, 12, 21, 3, 1]
nums_2 = [16, 21, 30, 24, 5, 7, 23, 13, 11, 5, 21, 5, 19, 9, 12, 9, 15, 16, 29, 8, 16, 1, 22, 15, 16, 9, 1, 13, 21, 21]
# Убираем повторяющиеся элементы.
nums_set_1 = set(nums_1) # {1, 2, 3, 7, 8, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 24, 26, 27, 29}
nums_set_2 = set(nums_2) # {1, 5, 7, 8, 9, 11, 12, 13, 15, 16, 19, 21, 22, 23, 24, 29, 30}
# Затем удаляет минимальный элемент из каждого множества
nums_set_1.discard(min(nums_set_1))
nums_set_2.discard(min(nums_set_2))
# добавляем случайное число в диапазоне от 100 до 200.
nums_set_1.add(random.randint(100, 200))
nums_set_2.add(random.randint(100, 200))
# Вывести все элементы множеств (объединение).
print(nums_set_1 | nums_set_2)
# Вывести только общие элементы (пересечение).
print(nums_set_1 & nums_set_2)
# Вывести элементы, входящие в nums_2, но не входящие в nums_1.
print(nums_set_2 - nums_set_1)

********************************************************************************



********************************************************************************

# Заполните один кортеж десятью случайными целыми числами от 0 до 5 включительно.
# Также заполните второй кортеж числами от −5 до 0. Объедините два кортежа, создав тем
# самым третий кортеж. С помощью метода кортежа определите в нём количество нулей.
# Выведите на экран третий кортеж и количество нулей в нём.

import random

def create_random_tuple(a, b, n):
    return tuple([random.randint(a, b) for _ in range(n)])

first = create_random_tuple(0, 5, 10)                   # Создаем кортеж из рандомных чисел от 0 до 5 в кол-ве 10 шт.
second = create_random_tuple(-5, 0, 10)                 # Создаем кортеж из рандомных чисел от -5 до 5 в кол-ве 10 шт.
third = first + second                                  # Объединяем два кортежа.
nulls_count = third.count(0)                            # Считаем кол-во нулей в третьем кортеже.
print(first)
print(second)
print(third,"\n", nulls_count, " <-- Кол-во нулей в третем кортеже")


********************************************************************************

# Андрей однажды уже писал функции для расчёта площади сферы и объёма шара.
# И теперь для своей курсовой работы ему пришлось связаться с цилиндрами.

# Пользователь вводит два значения: радиус и высоту. Напишите функцию для расчёта
# площади боковой поверхности цилиндра и его полной площади. Функция должна
# возвращать два эти значения. После этого в основной программе выводятся оба ответа в две строки.

# Площадь боковой поверхности (r — радиус, h — высота):
# side = 2pi * r * h
# Полная площадь (S — площадь круга):
# full = side + 2 * s

import math


def cylindr_math(radius, height):
    side = 2 * math.pi * radius * height
    full = side + 2 * math.pi * radius ** 2
    return side, full


radius = int(input("Введите радиус: "))
height = int(input("Введите высоту: "))

bot_area, full_area = cylindr_math(radius, height)
print(f"Площадь боковой поверхности: {round(bot_area, 2)}\nПолная площадь: {round(full_area, 2)}")


********************************************************************************

# Дан код, в котором должно происходить следующее: изначально есть кортеж из пяти чисел.
# Затем вызывается функция, которая получает на вход кортеж чисел,
# генерирует случайный индекс
# и случайное значение,
# а затем по этим индексу и значению меняет сам кортеж.
# Функция должна возвращать кортеж и случайное значение.

# В основном коде функция используется два раза, и на экран два раза выводится новый кортеж и
# случайное значение. Причём второй раз выводится сумма первого случайного значения и второго.

# Однако код, который вам дали, оказался нерабочим. Исправьте его в соответствии с описанием.

import random
# def change(nums):
#     index = random.randint(0, 5)
#     value = random.randint(100, 1000)
#     nums[index] = value
#     return nums, value
#
# my_nums = 1, 2, 3, 4, 5
#
# new_nums, rand_val = change(my_nums)
# print(new_nums, rand_val)
# new_nums = change(new_nums)
# rand_val += change(new_nums)
# print(new_nums, rand_val)



# Правильное решение.

def change(nums):
    index = random.randint(0, 5) % len(nums)
    value = random.randint(100, 1000)
    nums = list(nums)
    nums[index] = value
    return tuple(nums), value


my_nums = 1, 2, 3, 4, 5

new_nums, rand_val = change(my_nums)
print(new_nums, rand_val)
new_nums_2, rand_val_2 = change(new_nums)
rand_val += rand_val_2
print(new_nums_2, rand_val)


********************************************************************************

# Задача 1. Саботаж!
# Какой-то нехороший человек решил подпортить жизнь frontend-разработчикам и добавил в код сайта символ ~ (тильда).
# Но программисты быстро решили эту проблему, пройдясь по всему коду маленькой программой.
#
# Пользователь вводит строку. Напишите программу, которая проходит по строке и выводит в консоль индексы символа ~.
# Для решения этой задачи (и остальных тоже) используйте функцию enumerate.

# Пример:
# Строка: so~mec~od~e
# Ответ: 2 6 9

import random


def get_indexes(where_to_search, what_to_search):
    return [str(index) for index, letter in enumerate(where_to_search) if letter == what_to_search]


text = input("Введите текст: ")
print("Ответ:", " ".join(get_indexes(text, "~")))

********************************************************************************

# Создайте два списка, в каждом из которых лежит 10 случайных букв алфавита (могут повторяться).
# Затем для каждого списка создайте словарь из пар «индекс — значение» и выведите оба словаря на экран.

# Подсказка: random

# Пример:
# Первый список: ['й', 'р', 'с', 'г', 'а', 'а', 'т', 'ж', 'е', 'к']
# Второй список: ['д', 'а', 'а', 'в', 'т', 'ж', 'р', 'б', 'й', 'р']

# Первый словарь: {0: 'й', 1: 'р', 2: 'с', 3: 'г', 4: 'а', 5: 'а', 6: 'т', 7: 'ж', 8: 'е', 9: 'к'}
# Второй словарь: {0: 'д', 1: 'а', 2: 'а', 3: 'в', 4: 'т', 5: 'ж', 6: 'р', 7: 'б', 8: 'й', 9: 'р'}

import random
def get_random_letter(n):
    return random.choices([chr(i) for i in range(ord("а"), ord("я"))], k=n)


first_letters = get_random_letter(10)
second_letters = get_random_letter(10)
print(first_letters)
print(second_letters)

first_dictionary = dict(enumerate(first_letters))
second_dictionary = dict(enumerate(second_letters))
print(first_dictionary)
print(second_dictionary)



********************************************************************************

values = ["a", "b", "c"]
for count, value in enumerate(values):
    print(count, value)     # 0 a 1 b 2 c

# Здесь можно увидеть, что доступ к значениям с индексом 0 дает первый элемент a. Бывает так, что необходимо запустить
# счетчик не с 0. В этом случае используйте аргумент start для enumerate(), чтобы изменить начальный счетчик:
print('-------')
for count, value in enumerate(values, start=1):
   print(count, value)  # 1 a 2 b 3 c



********************************************************************************

scores = [54, 67, 48, 99, 27]
for i_player in range(len(scores)):
    print((i_player, scores[i_player]))

scores = [54, 67, 48, 99, 27]
for i_player, i_scores in enumerate(scores):
    print(i_player, i_scores)



********************************************************************************



********************************************************************************

# Задача 1. Сумма чисел 2
# Что нужно сделать
# Во входном файле numbers.txt записано N целых чисел, которые могут быть разделены пробелами и концами строк.
# Напишите программу, которая выводит сумму чисел во выходной файл answer.txt.

# Пример:
# Содержимое файла numbers.txt
#      2
# 2
#   2
#         2
#
# Содержимое файла answer.txt
# 8

# Решение задачи 1.
numbers_file = open('numbers.txt', 'r', encoding='utf-8') # 'r' <-- считать файл.
data = numbers_file.read() # Открываем данные и записываем в переменную data.
numbers_file.close() # и сразу закрываем файл.

sum_numbers = 0

for seed in data:
    for e_num in range(0, 9):
        if seed == str(e_num):
            sum_numbers += e_num

save_answer = open('answer.txt', 'w', )






********************************************************************************



********************************************************************************

import os
folder_name = 'project'
file_name = 'lesson.txt'
path = os.path.join('docs', folder_name, file_name) # Получение относительного пути.
print(f'Относительный путь -->  {path}')
abs_path = os.path.abspath(file_name)
print(f'Абсолютный путь    -->  {abs_path}')

# Практическая работа по этому уроку.

# Задача 1. Сисадмин
# Вы работаете системным администратором в одной компании. На диске каждого сотрудника компании в специальной
# папке access лежит файл admin.bat. Этот файл предназначен для вас, и вам нужен путь до этого файла,
# причём как относительный, так и абсолютный.
# Недолго думая, вы решили написать небольшой скрипт, который закинете по сети к этому файлу.

print('\nРешение задачи 1. Сисадмин')
print(os.path.join('access',  'admin.bat')) # Получение относительного пути.
print(os.path.abspath(os.path.join('access',  'admin.bat'))) # Получение абсолютного пути.

# Задача 2. Содержимое
# Выберите любую директорию на своём диске и затем напишите программу,
# выводящую на экран абсолютные пути к файлам и папкам,
# которые находятся внутри этой директории.

print('\nРешение задачи 2. Содержимое')
print('Содержимое каталога', os.path.join(os.path.abspath('..')))
for path in os.listdir('..'):
    print(os.path.join(os.path.abspath('..'), path))

# Задача 3. Корень диска
# Напишите программу, которая выводит на экран корень диска и на этом диске запущен скрипт.
# Учтите, что скрипт может быть запущен где угодно и при любой вложенности папок.

print('\nРешение задачи 3. Корень диска')
print('Корень диска: ', os.path.abspath(os.sep).split(os.sep)[0])

********************************************************************************


# Код для проверки существования директории в пути. И вывод содержимой папки, если есть такая.
import os
def print_dir(project):
    print('\nСодержимое директории', project)
    if os.path.exists(project):

        for i_elem in os.listdir(project):
            path = os.path.join(project, i_elem)
            print('    ', path)
    else:
        print(f'{project} <-- Такого каталога не существует')

project_list = ['10 - курс', '01 - курс', '02 - курс']   # Список
for i_project in project_list:
    path_to_project = os.path.abspath((os.path.join('..','..', i_project)))
    print_dir(path_to_project)  # Запускаем функцию.

# Задача поиск файла.
# Функция поиска файла в указанной директории.
print('Задача поиска файла на выбранном диске')
def find_file(cur_path, file_name):
    # print(f'Переходим {cur_path}')
    for i_elem in os.listdir(cur_path): # Перебираем папки искомого пути.
        path = os.path.join(cur_path, i_elem)
        # print(f'Просматриваем папку: {path}')
        if file_name == i_elem:
            return path
        if os.path.isdir(path):
            # print(f'Это директория.')
            result = find_file(path, file_name)
            if result:
                break
    else:
        result = None

    return result

# Указываем путь к директории, где будет производиться поиск и название файла который ищем.
search_path = os.path.abspath(os.path.join('..', '..', '..', '..')) # Путь где будем искать искомый файл.
search_file = '9.2 Модуль OS Проверки.py'   # Название искомого файла.
file_path = find_file(search_path, search_file) # Запускаем функцию.
if file_path: print(f'Абсолютный путь к искомому файлу: {file_path}')   # Если нашли искомый файл, то вывести путь к нему.
else: print(f'Файл: {search_file} - не найден!')   # Если не нашли файл, то вывести, что файл не найден.

# Практическая работа по данному уроку.
print('\nПрактическая работа по данному уроку.')
# Задача 1. Иконки
# Андрей для себя хочет сделать экспериментальный сайт, где будет красиво отображаться вся структура его диска: папки
# одними иконками, файлы — другими. Поэтому ему нужен код, который поможет определить, какой тип иконки вставить.

# Напишите программу, которая по заданному абсолютному пути определяет, на что указывает этот путь (на директорию, файл,
# или же путь является ссылкой), и выведите соответствующее сообщение. Если путь указывает на файл, то также выведите
# его размер (сколько он весит в байтах). Обеспечьте контроль ввода: проверка пути на существование.

# Подсказка: для вывода размера файла поищите соответствующий метод.

# Пример 1:
# Путь: C:\Users\Roman\PycharmProjects\Skillbox\Module17\lesson2.py
# Это файл
# Размер файла: 605 байт

# Пример 2:
# Путь: C:\Users\Roman\PycharmProjects\Skillbox\Module17\lesson2.py
# Указанного пути не существует
print('Задача № 1 - Иконки')
import os
path_to = input('Введите путь: ')
if os.path.isdir(path_to): print('Это папка!')
elif os.path.isfile(path_to): print(f'Это файл! Размером: {os.path.getsize(path_to)} байт.')
else: print('Указанного пути не существует')

# Задача 2. Поиск файла
# В уроке мы написали функцию, которая ищет нужный нам файл во всех подкаталогах указанной директории. Однако, как мы
# понимаем, файлов с таким названием может быть несколько.

# Напишите функцию, которая принимает на вход абсолютный путь до директории и имя файла, проходит по всем вложенным
# файлам и папкам и выводит на экран все абсолютные пути с этим именем.

# Пример:
# Ищем в: C:/Users/Roman/PycharmProjects/Skillbox
# Имя файла: lesson2
# Найдены следующие пути:

# C:/Users/Roman/PycharmProjects/Skillbox\Module15\lesson2.py
# C:/Users/Roman/PycharmProjects/Skillbox\Module16\lesson2.py
# C:/Users/Roman/PycharmProjects/Skillbox\Module17\lesson2.py
# C:/Users/Roman/PycharmProjects/Skillbox\Module18\lesson2.py
# C:/Users/Roman/PycharmProjects/Skillbox\Module19\lesson2.py
# C:/Users/Roman/PycharmProjects/Skillbox\Module20\lesson2.py
# C:/Users/Roman/PycharmProjects/Skillbox\Module21\lesson2.py
# C:/Users/Roman/PycharmProjects/Skillbox\Module22\lesson2.py


print('Задача № 2 - Поиск файла во всех директориях.')
def find_file(cur_path, file_name):
    # print(f'Переходим {cur_path}')
    for i_elem in os.listdir(cur_path): # Перебираем папки искомого пути.
        path = os.path.join(cur_path, i_elem)
        # print(f'Просматриваем папку: {path}')
        if file_name == i_elem:
            print(f'{file_path}')  # Если нашли искомый файл, то вывести путь к нему.
        elif os.path.isdir(path):
            result = find_file(path, file_name)
            if result:
                break
    else:
        result = None

    return result

# Указываем путь к директории, где будет производиться поиск и название файла который ищем.
search_path = os.path.abspath(os.path.join('..', '..', '..')) # Путь где будем искать искомый файл.
search_file = '9.2 Модуль Проверки.py'   # Название искомого файла.
print(f'Искомый файл: {search_file}')
file_path = find_file(search_path, search_file) # Запускаем функцию.



********************************************************************************

import os

speakers_file = open('speakers.txt', 'r', encoding='utf-8') # 'r' <-- считать файл.
data = speakers_file.read() # Открываем данные и записываем в переменную data.
for i_line in speakers_file:
    print(i_line, end='')   #(end='') <-- для того чтобы не создавал в конце \n и все строки выводились поочередно.
speakers_file.close()   # Закрываем файл.

# Практическая работа по данному уроку.
# Задача 1. Результаты
# Одному программисту дали задачу для обработки неких результатов тестирования двух групп людей. Файл первой группы
# (group_1.txt) находится в папке task, файл второй группы (group_2.txt) — в папке Additional_info.

# Содержимое файла group_1.txt
# Бобровский Игорь 10
# Дронов Александр 20
# Жуков Виктор 30

# Содержимое файла group_2.txt
# Павленко Геннадий 20
# Щербаков Владимир 35
# Marley Bob 15

# На экран нужно было вывести сумму очков первой группы, затем разность очков опять же первой группы и напоследок —
# произведение очков уже второй группы.

# Программист оказался не очень опытным, писал код наобум и даже не стал его проверять. И оказалось, этот код просто
# не работает. Вот что он написал:

# file = open('E:\task\group_1.txt', 'read')
# summa = 0
# for i_line in file:
#     info = i_line.split()
#     summa += info[2]
# file = open('E:\task\group_1.txt', 'read')
# diff = 0
# for i_line in file:
#     info = i_line.split()
#     diff -= info[2]
# file_2 = open('E:\task\group_2.txt', 'read')
# compose = 0
# for i_line in file:
#     info = i_line.split()
#     compose *= info[2]
# print(summa)
# print(diff)
# print(compose)

# Исправьте код для решения поставленной задачи. Для проверки результата создайте необходимые папки
# (task, Additional_info, Dont touch me) на своём диске в соответствии с картинкой
# и также добавьте файлы group_1.txt и group_2.txt.
import os
print(f'Решение задачи 1')
file = open(os.path.join('task', 'group_1.txt'), 'r', encoding='utf-8')
file_2 = open(os.path.join('task', 'Additional_info', 'group_2.txt'), 'r', encoding='utf-8')

summa = 0
diff = 0
compose = 1

for i_line in file:
    info = i_line.split()
    if info:
        summa += int(info[2])
        diff -= int(info[2])

for i_line in file_2:
    info = i_line.split()
    if info:
        compose *= int(info[2])

print(summa)
print(diff)
print(compose)


# Задача 2. Поиск файла 2
# Как мы помним, скрипты — это просто куча строк текста, хоть они и понятны только программисту. Таким образом, с ними
# можно работать точно так же, как и с обычными текстовыми файлами.

# Используя функцию поиска файла из предыдущего урока, реализуйте программу, которая находит внутри указанного пути все
# файлы с искомым названием и выводит на экран текст одного из них (выбор можно сгенерировать случайно).

# Подсказка: можно использовать, например, список для сохранения найденного пути.
import random
def find_file(cur_path, file_name):
    all_paths = []   # Список всех найденных путей
    # print(f'Переходим {cur_path}')
    for i_elem in os.listdir(cur_path): # Перебираем папки искомого пути.
        path = os.path.join(cur_path, i_elem)
        # print(f'Просматриваем папку: {path}')
        if file_name == i_elem:
            all_paths.append(os.path.abspath(path))   # Добавляем в список найденный путь.
        elif os.path.isdir(path):
            result = find_file(path, file_name)
            if result:
                all_paths.extend(result)

    return all_paths

def check_file_inside(path_to_file):
    file = open(path_to_file, 'r', encoding='utf8')
    for line in file:
        print(line, end='')
    file.close()

# Указываем путь к директории, где будет производиться поиск и название файла который ищем.
search_path = os.path.abspath(os.path.join('..', '..', '..')) # Путь где будем искать искомый файл.
search_file = '9.3 Базовые операции с файлами.py'   # Название искомого файла.
all_paths = find_file(search_path, search_file) # Запускаем функцию.
check_file_inside(random.choice(all_paths))



********************************************************************************

import os
speakers_file = open(os.path.join('speakers.txt'), 'r', encoding='utf-8')
sym_count = []
for i_line in speakers_file:
    print(i_line, end='')
    sym_count.append(str(len(i_line)))
sym_count_str = '\n'.join(sym_count)
speakers_file.close()
print(sym_count_str)

counts_file = open('sym_count.txt', 'w')
counts_file.write(sym_count_str)
counts_file.close()

# Практическая работа по данному уроку.
# Задача 1. Сумма чисел
# Во входном файле numbers.txt записано N целых чисел, каждое в отдельной строке.
# Напишите программу, которая выводит их сумму в выходной файл answer.txt.

# Пример:
# Содержимое файла numbers.txt:
# 1
# 2
# 3
# 4
# 10

# Содержимое файла answer.txt
# 20

# Решение задачи 1.
# import os
# sum_number = 0
# numbers = open(os.path.join('numbers.txt'), 'r', encoding='utf-8')
# for i_number in numbers:
#     sum_number += int(i_number)
# numbers.close()
#
# write_number = open('answer.txt', 'w', encoding='utf8')
# write_number.write(str(sum_number))
# write_number.close()

# Задача 2. Всё в одном
# Ваш дружбан, который тоже проходит курс Python Basic, поехал с ноутбуком в другой город, и там у него случилась беда:
# его диск пришлось отформатировать, а доступ в интернет отсутствует. Остался только телефон с мобильным интернетом.
# Так как со связью (и с памятью) проблемы, друг попросил вас скинуть одним файлом все решения и скрипты, которые у вас
# сейчас есть.

# Напишите программу, которая копирует код каждого скрипта в папке проекта python_basic в файл scripts.txt, разделяя
# код строкой из 40 символов *.

# Пример содержимого файла scripts.txt:

import platform
import sys
# info = 'OS info is \n{}\n\nPython version is {} {}'.format(
#     platform.uname(),
#     sys.version,
#     platform.architecture(),
# )
#
# print(info)
#
# with open('os_info.txt', 'w', encoding='utf8') as file:
#     file.write(info)
# # ****************************************
# print("Введите первую точку")
#
# x1 = float(input('X: '))
# y1 = float(input('Y: '))
# print("\nВведите вторую точку")
#
# x2 = float(input('X: '))
# y2 = float(input('Y: '))
# print("Уравнение прямой, проходящей через эти точки:")
#
# x_diff = x1 - x2
# y_diff = y1 - y2
# if x_diff == 0:
#     print("x = ", x1)
# elif y_diff == 0:
#     print("y = ", y1)
# else:
#     k = y_diff / x_diff
#     b = y2 - k * x2
#     print("y = ", k, " * x + ", b)
# # ****************************************
import os
def find_file(cur_path, ending):
    all_paths = []
    for i_elem in os.listdir(cur_path):
        path = os.path.join(cur_path, i_elem)
        if i_elem.endswith(ending):
            all_paths.append(os.path.abspath(path))
        elif os.path.isdir(path):
            result = find_file(path, ending)
            if result: all_paths.extend(result)

    return all_paths


def get_text_from_file(path_to_file):
    file = open(path_to_file, "r", encoding="utf8")
    result = ""
    for line in file:
        result += line
    return result


all_py_files = find_file('..', '.py')  # вместо ".." можно вставить путь до папки python_basic

file_result = open("scripts.txt", "w", encoding="utf8")

for file_path in all_py_files:
    file_result.write(get_text_from_file(file_path))
    file_result.write("\n" * 2 + "*" * 80 + "\n" * 2)





********************************************************************************

speakers_file = open('speakers.txt', 'r', encoding='utf-8')
data = speakers_file.read(14)
speakers_file.seek(0)
data_2 = speakers_file.read(22)

speakers_file.close()
print(data)
print(data_2)

********************************************************************************



********************************************************************************



********************************************************************************

# Практическая работа по данному уроку.

# Напишите класс Toyota, состоящий из четырёх статических атрибутов:

# цвет машины (например, красный),
# цена (один миллион),
# максимальная скорость (200),
# текущая скорость (ноль).

# Создайте три экземпляра класса и каждому из них поменяйте значение текущей скорости на случайное число от нуля до 200.
# Задача 1. Машина
import random

class Toyota:
    color = 'red'
    price = int(1e6)
    max_speed = 200
    now_speed = 0

car = []
for index in range(0, 3):
    car.append(Toyota())
    car[index].now_speed = random.randint(0, 200)
    print(car[index].now_speed, end=' ')

print(car[2].color)
# Задача 2. Однотипные объекты

# В офис заказали небольшую партию из четырёх мониторов и трёх наушников. У монитора есть четыре характеристики:
# название производителя, матрица, разрешение и частота обновления экрана.
# Все четыре монитора отличаются только частотой.

# У наушников три характеристики:
# название производителя, чувствительность и наличие микрофона. Отличие только в наличии микрофона.

# Для внесения в базу программист начал писать такой код:

# monitor_name_1 = 'Samsung'
# monitor_matrix_1 = 'VA'
# monitor_res_1 = 'WQHD'
# monitor_freq_1 = 60
# monitor_name_2 = 'Samsung'
# monitor_matrix_2 = 'VA'
# monitor_res_2 = 'WQHD'
# monitor_freq_2 = 144
# monitor_name_3 = 'Samsung'
# monitor_matrix_3 = 'VA'
# monitor_res_3 = 'WQHD'
# monitor_freq_3 = 70
# monitor_name_4 = 'Samsung'
# monitor_matrix_4 = 'VA'
# monitor_res_4 = 'WQHD'
# monitor_freq_4 = 60
# headphones_name_1 = 'Sony'
# headphones_sensitivity_1 = 108
# headphones_micro_1 = False
# headphones_name_2 = 'Sony'
# headphones_sensitivity_2 = 108
# headphones_micro_2 = True
# headphones_name_3 = 'Sony'
# headphones_sensitivity_3 = 108
# headphones_micro_3 = True


class Monitor:
    name = "Samsung"
    matrix = "VA"
    resolution = "WQHD"
    frequency = 0


class Headphones:
    name = "Sony"
    sensitivity = 108
    micro = True


monitors = [Monitor() for _ in range(4)]
headphones = [Headphones() for _ in range(3)]

for index, number in enumerate([60, 144, 70, 60]):
    monitors[index].frequency = number

headphones[0].micro = False









********************************************************************************

class User:
    user_name = 'Admin'
    password = 'qwerty'
    is_banned = False
    friends = []

    def print_info(self):
        print('Name: {}\n, Password: {}\n, Ban status: {}'.format(self.user_name, self.password, self.is_banned))

    def add_friend(self, friend):
        if isinstance(friend, User):
            self.friends.append(friend.user_name)
        else:
            self.friends.append(friend)

user_1 = User()
user_1.print_info()
user_1.add_friend('Bob')
print(user_1.friends)

user_2 = User()
user_2.user_name = 'Алина'
user_1.add_friend(user_2)
print(user_1.friends)

#-----------------------#
class Family:
    surname = 'Ivanov'
    money = int(1e5)
    have_a_house = False

    def info(self):
        print('\nFamily name: {}\nFamily founds: {}\nHaving a house: {}'
              .format(self.surname, self.money, self.have_a_house))

    def earn_money(self, amount):
        self.money += amount
        print('Earned {} money! Current value: {}'.format(amount, self.money))

    def buy_house(self, house_price, discount = 0):
        house_price -= house_price * discount / 100
        if self.money >= house_price:
            self.money -= house_price
            self.have_a_house = True
            print('House purchased! Current money: {}\n'.
                  format(self.money))
        else:
            print('Not enough money!\n')

my_family = Family()
my_family.info()
print('Try to buy house')
my_family.buy_house(int(1e5))
if not my_family.have_a_house:
    my_family.earn_money(int(8e6))
    print('Try to buy a house again')
    my_family.buy_house(8e6, 10)

my_family.info()


********************************************************************************

# Практическая работа.
# Задача 1. Машина 2.
# Модернизируйте класс Toyota из прошлого урока. Атрибуты остаются такими же:

# Цвет машины (например, красный),
# Цена (один миллион),
# Максимальная скорость (200),
# Текущая скорость (ноль).

# Добавьте два метода класса:

# Отображение информации об объекте класса.
# Метод, который позволяет устанавливать текущую скорость машины.
# Проверьте работу этих методов.

import random

class Toyota:
    color = 'red'
    price = int(1e6)
    max_speed = 200
    now_speed = 0

    def info_car(self):
        print('\nColor car: {}\nCar cost: {}\nMaximum speed: {}\nNow speed: {}'
              .format(self.color, self.price, self.max_speed, self.now_speed))

    def new_speed(self, new_speed):
        self.now_speed = new_speed

car = Toyota()
car.new_speed(input('Input new speed for car: '))
car.info_car()

print(Toyota.now_speed)


********************************************************************************

# Есть картошка со следующими характеристиками:
# 1. Номер картошки в грядке (индекс)
# 2. Стадия зрелости (стадии: отсутствует, росток, зеленая, зрелая)\

# Картошка может:
# 1. Расти (переходить на следующею стадию созревания)
# 2. Предоставлять информацию о своей зрелости.

# Есть грядка с картошкой, которая:
# 1. Содержит список картошки, которая на ней растет

# И может
# 1. Взращивать картошку
# 2. Предоставлять информацию о зрелости всей картошки.

class Potato:   # Класс под названием картошка.
    states = {0: 'Отсутствует', 1: 'Росток', 2: 'Зеленая', 3: 'Зрелая'} # Статический атрибут (Стадия зрелости картошки)

    def __init__(self, index): # Инициализатор класса.
        self.index = index # Номер грядки.
        self.state = 0  # Стадия роста картошки по умолчанию равно нулю.

    def grow(self): # Метод роста картошки.
        if self.state < 3:
            self.state += 1
        self.print_state()

    def is_ripe(self): # Проверяем каждую картошку.
        if self.state == 3:
            return True
        return  False

    def print_state(self): # Метод вывода сообщения о стадии роста картошки.
        print('Картошка {} сейчас {}'.format(self.index, Potato.states[self.state]))


class PotatoGarden: # Класс под названием грядка.
    def __init__(self, count): # Инициализатор класса.
        self.potatoes = [Potato(index) for index in range (1, count + 1)] # Инициализируем грядки.

    def grow_all(self): # Метод, который взращивает всю картошку на грядке.
        print('Картошка прорастает!')
        for i_potato in self.potatoes:
            i_potato.grow()

    def are_all_ripe(self): # Проверка созрела ли вся поляна.
        if not all([i_potato.is_ripe() for i_potato in self.potatoes]):
            print('Картошка еще не созрела!\n')
        else:
            print('\nВся картошка созрела.')

my_garden = PotatoGarden(5)
my_garden.are_all_ripe()

for _ in range(3):
    my_garden.grow_all()
    my_garden.are_all_ripe()

********************************************************************************

# Практическая работа.
# Задача 1. Машина 3
# Вам предстоит снова немного видоизменить класс Toyota из прошлого урока. На всякий случай вот описание класса.

# Четыре атрибута:

# Цвет машины (например, красный),
# Цена (один миллион),
# Максимальная скорость (200),
# Текущая скорость (ноль).

# Два метода:

# Отображение информации об объекте класса.
# Метод, который позволяет устанавливать текущую скорость машины.

# Теперь все четыре атрибута должны инициализироваться при создании экземпляра класса (то есть передаваться в init).
# Реализуйте такое изменение класса.

# # Решение задачи.
# class Toyota:
#
#     def __init__(self, color, price, max_speed, now_speed):
#         self.color = color
#         self.price = price
#         self.max_speed = max_speed
#         self.now_speed = now_speed
#
#     def info_car(self):
#         print('\nColor car: {}\nCar cost: {}\nMaximum speed: {}\nNow speed: {}'
#               .format(self.color, self.price, self.max_speed, self.now_speed))
#
#     def new_speed(self, new_speed):
#         self.now_speed = new_speed
#
# car = Toyota('Red', 1, 15, 0)
# car.new_speed(100)
# car.info_car()

# Задача 2. Координаты точки
# Объект «Точка» на плоскости имеет координаты X и Y. При создании новой точки могут передаваться пользовательские
# значения координат, по умолчанию x = 0, y = 0.
#
# 1. Реализуйте класс, который будет представлять эту точку.
# 2. Напишите метод, который предоставляет информацию о ней.
# 3. Также внутри класса пропишите счётчик, который будет отвечать за количество созданных точек.
#
# Подсказка: счётчик можно объявить внутри самого класса и увеличивать его в методе __init__.

# Решение задачи.
class Point:
    count_point = 0

    def __init__(self, x = 0 , y = 0):
        self.x = x
        self.y = y
        Point.count_point += 1
        self.info_point()

    def info_point(self):
        print('Точка {} имеет координаты: x = {}, y = {}'.format(self.count_point, self.x, self.y))

point_1 = Point(1, 2)
point_2 = Point()
point_3 = Point(5, 5)



********************************************************************************

# Задача 1. Драка
# Что нужно сделать
# Вы работаете в команде разработчиков мобильной игры, и вам досталась часть от ТЗ заказчика.

# Есть два воина. Каждому устанавливается здоровье в 100 очков. Они бьют друг друга в
# случайном порядке. Тот, кто бьёт, здоровье не теряет. У того, кого бьют, оно уменьшается на 20 очков от одного удара.
# После каждого удара надо выводить сообщение, какой воин атаковал и сколько у противника осталось здоровья. Как только
# у кого-то заканчивается ресурс здоровья, программа завершается сообщением о том, кто одержал победу.

# Реализуйте такую программу.

# Решение задачи.

import random
class Warriors:
    point = 100


    def examination(self): # Проверка.
        if self.point == 0:
            return True
        return  False

    def battle():
        if




warrior = []
for index in range(1, 3):
    warrior.append(Warriors())

Warriors.battle()





********************************************************************************



********************************************************************************



********************************************************************************

