import sqlite3 as sq
with sq.connect('saper.db') as con:
    cur = con.cursor()  # Запрос в базу данных.
    """ Описание cursor
    С помощью объекта соединения создается объект cursor, который позволяет выполнять SQLite 3-запросы из Python.
    Для одного соединения можно создать неограниченное количество cursor. Он также не является потоко безопасным.
    Модуль не позволяет делиться объектами cursor между потоками. Если это сделать, то будет ошибка.
    endregion Описание cursor."""

    cur.execute('DROP TABLE IF EXISTS users')   # Если существует таблица users, то удалить ее.

    # Вызвать метод execute, в который передается SQL запрос для работы с базой данных.
    cur.execute(""" CREATE TABLE IF NOT EXISTS users 
    (user_id INTEGER PRIMARY KEY AUTOINCREMENT, 
    name TEXT NOT NULL, sex INTEGER NOT NULL DEFAULT 1, old INTEGER, score INTEGER)""")

    # Описание cursor.execute.
    # cursor.execute('''CREATE TABLE IF NOT EXISTS GMKN <-- Этот метод создает базу данных с названием GMKN, где:
    # - IF NOT EXISTS <--- Если мы будем запускать этот код первый раз, то будут созданы поля, второй раз нет.
    #
    # (id_gmkn integer primary key autoincrement, Date integer, Time integer,
    # Open real, High real, Low real, Close real)''') включает в себя:
    #
    # - id_gmkn integer <-- Будет создана колонка с названием id_gmkn, где будут храниться целочисленные значения.
    #
    # - primary key <-- указывает на то, что это поле будет использоваться в качестве первичного ключа таблицы
    #     Первичный ключ – это уникальный идентификатор, который используется для создания связи между таблицами
    #     в базе данных.
    #
    # - AUTOINCREMENT <-- Аргумент увеличивающий на единицу  каждой новой строкой..
    # - Date INTEGER <-- Будет создана колонка с названием Data, где будут храниться целочисленные значения.
    # - Time INTEGER <-- Будет создана колонка с названием Time, где будут храниться целочисленные значения.
    # - Open real, High real, Low real, Close real <--- Open, High, Low, Close целочисленные значения...

    # Типы данных.
    # INTEGER означает, что в поле хранятся целочисленные значения.
    # TEXT – класс данных, который используется для хранения строковых значений. Например, имя пользователя,
    # почтовый адрес или наименование товара могут храниться в поле типа TEXT.
    # Помимо TEXT и INTEGER SQLite 3 имеет следующие классы для хранения данных:

    # NULL – представляет нулевое значение.
    # REAL – используется для хранения чисел с плавающей точкой.
    # BLOB – применяется для хранения бинарных объектов (изображений, аудио или видео). На практике мультимедийные
    # файлы очень редко хранят в БД – целесообразнее хранить там только ссылки на объекты.
    # В SQLite 3 не предусмотрены отдельные типы данных для хранения даты и времени, но можно использовать тип данных
    # TEXT для хранения даты и времени в виде строки в формате ISO-8601.

    # Некоторые другие типы данных при необходимости можно преобразовать в классы данных SQLite 3. К примеру, для
    # хранения BOOLEAN значений можно использовать INTEGER, присваивая записи значения 0 или 1.

    # PRIMARY KEY указывает на то, что это поле будет использоваться в качестве первичного ключа таблицы
    # Первичный ключ – это уникальный идентификатор, который используется для создания связи между таблицами
    # в базе данных.

    # После типа данных можно прописать 'ограничители'...
    # AUTOINCREMENT <-- Аргумент увеличивающий на единицу.
    # NOT NULL <-- Поле должно быть заполнено определенными данными, т.е будет пустым, а не 'NULL'.
    # DEFAULT 1 <-- По умолчанию, будет записано значение 1/

