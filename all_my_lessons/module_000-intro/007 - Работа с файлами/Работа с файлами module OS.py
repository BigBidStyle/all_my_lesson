import os   # <-- Все об этом модуле.
# -------------------- #
# region Общие сведения.
# Информация взята из источника: https://all-python.ru/osnovy/os.html#chto-takoe-modul-os

# Модуль os из стандартной библиотеки языка программирования Python обычно используется для работы с установленной ОС,
# а также файловой системой ПК. Он содержит массу полезных методов для взаимодействия с файлами и папками на жестком
# диске. Программы, работающие с модулем os, не зависят от типа ОС и являются легко переносимыми на другую платформу.

# Модуль os в Python — это библиотека функций для работы с операционной системой. Методы, включенные в неё позволяют
# определять тип операционной системы, получать доступ к переменным окружения, управлять директориями и файлами:

# Получение информации об операционной системе через модуль os смотреть на сайте.
# endregion Общие сведения.
# -------------------- #
# region Рабочая директория.

# Получение рабочей директории.
# По умолчанию рабочей директорией программы является каталог, где содержится документ с ее исходным кодом.
# Благодаря этому, можно не указывать абсолютный путь к файлу, если тот находится именно в этой папке.
# Получить сведения о текущей директории позволяет функция getcwd, которая возвращает полный адрес рабочего каталога
# на жестком диске. В следующем фрагменте кода показано что будет, если передать результат работы этого метода в print.
# Как можно заметить, рабочей директорией является каталог program на системном диске C.
job_directory = os.getcwd()
print(f'{os.getcwd()} <-- Рабочая директория')

# Изменение рабочей директории.
# os.chdir(r'D:\Training')
# print(f'{os.getcwd()} <-- новая рабочая директория')

# endregion Рабочая директория.
# -------------------- #
# region Проверка существования пути.
# Чтобы избежать ошибок, связанных с отсутствием определенного файла или директории, которые должны быть обработаны
# программой, следует предварительно проверять их наличие с помощью метода exists. Передав ему в качестве аргумента
# путь к нужному файлу или папке, можно рассчитывать на лаконичный ответ в виде булевого значения true/false,
# сообщающего о наличии/отсутствии указанного объекта в памяти компьютера. В следующем примере идет проверка текстового
# файла test.txt из корневого каталога D, которая возвращает True.
print(os.path.exists('__init__.py')) # <-- Проверка существует ли файл?

# Если объект на диске реально существует, это не всегда значит, что он имеет подходящую для дальнейшей обработки форму.
# Проверить, является ли определенный объект файлом, поможет функция isfile, которая принимает его адрес. Ознакомиться
# с результатом его работы можно из следующего примера, где отображается на экране значение True для файла __init__.py.
print(os.path.isfile('__init__.py')) # <-- Проверка является ли файлом?
print(os.path.isdir('__init__.py')) # <-- Проверка является ли папкой?

# endregion Проверка существования пути.
# -------------------- #
# region Создание директорий.
# Возможности модуля os позволяют не только отображать информацию об уже существующих в памяти объектах, но и
# генерировать абсолютно новые. Например, с помощью метода mkdir довольно легко создать папку, просто указав для нее
# желаемый путь. В следующем примере в рабочем каталоге производится новая папка под названием folder через mkdir.
# os.mkdir(r"D:\folder") # <-- Создание папки в оригинале
# os.mkdir(r'{}\folder'.format(os.getcwd())) # <-- Создание папки в рабочей директории.

# endregion Создание директорий.
# -------------------- #
# region Удаление файлов и директорий.

# Удаление файла.
# Избавиться от ненужного в дальнейшей работе файла можно с помощью метода remove, отдав ему в качестве аргумента
# абсолютный либо относительный путь к объекту. В небольшом коде ниже демонстрируется удаление документа test.txt из
# корневой директории диска D на ПК.
# os.remove(r"D:\test.txt") # <-- Удаление файла.

#  Удаление папки.
# Чтобы стереть из памяти папку, следует воспользоваться встроенной функцией rmdir, указав ей адрес объекта. Однако
# здесь присутствуют определенные нюансы, поскольку программа не позволит беспрепятственно удалить директорию, в которой
# хранятся другие объекты. В таком случае на экране отобразится ошибка и будет выброшено исключение. В следующем примере
# производится процедура удаления пустой директории folder при помощи метода rmdir.
# os.rmdir(r"D:\folder")  # <-- Удаление папки.

# Удаление пустых папок в указанной директории.
# Чтобы стереть из памяти папку, следует воспользоваться встроенной функцией rmdir, указав ей адрес объекта. Однако
# здесь присутствуют определенные нюансы, поскольку программа не позволит беспрепятственно удалить директорию, в которой
# хранятся другие объекты. В таком случае на экране отобразится ошибка и будет выброшено исключение. В следующем примере
# производится процедура удаления пустой директории folder при помощи метода rmdir
# os.removedirs(r"D:\folder\first\second\third")  # <-- Удаления множества пустых папок.
# endregion Удаление файлов и директорий.
# -------------------- #
# region Запуск на исполнение.

# Встроенные функции библиотеки os позволяют запускать отдельные файлы и папки прямиком из программы. С этой задачей
# прекрасно справляется метод startfile, которому стоит передать адрес необходимо объекта. Программное обеспечение,
# используемое для открытия документа, определяется средой автоматически. Например, при запуске обычного файла test.txt,
# как это сделано в следующем примере, задействуется стандартный блокнот. Если передать функции ссылку на директорию,
# она будет открыта при помощи встроенного менеджера файлов.
# os.startfile(r"D:\test.txt") # <-- Запуск на исполнение.
# endregion Запуск на исполнение.
# -------------------- #
# region Получение имени файла и директории.
# Иногда для взаимодействия с документом необходимо получить его полное имя, включающее разрешение, но не абсолютный
# путь к нему на диске. Преобразовать адрес объекта в название позволяет функция basename, которая содержится в
# подмодуле path из библиотеки os. Таким образом, следующий пример показывает преобразование пути test.txt в простое
# имя файла.
# print(os.path.basename("D:/test.txt")) # Выход будет test.txt

# Обратная ситуация возникает тогда, когда пользователю нужно получить только путь к файлу, без самого названия объекта.
# Это поможет сделать метод dirname, который возвращает путь к заданному документу в строковом представлении, как это
# продемонстрировано в небольшом примере ниже. Здесь print выводит на экран адрес текстового документа в папке folder.
# print(os.path.dirname("D:/folder/test.txt")) # Вывод будет D:/folder

# endregion Получение имени файла и директории.
# -------------------- #
# region Вычисление размера.
# Чтобы определить размер документа или папки, стоит воспользоваться функцией getsize, как это показано в следующем
# примере для файла test.txt. Функция print выводит размер данного документа в байтах. Воспользоваться getsize можно
# и для измерения объема директорий.
print(os.path.getsize("D:\\test.txt")) # <-- Вывод 136226
# endregion Вычисление размера.
# -------------------- #
# region Переименование.
# Библиотека os предоставляет возможность быстрой смены названия для любого файла или же каталога при помощи метода
# rename. Данная функция принимает сразу два разных аргумента. Первый отвечает за путь к старому наименованию документа,
# в то время как второй отвечает за его новое название. В примере показано переименование директории folder в catalog.
# Стоит помнить, что метод может генерировать исключение, если по указанному пути нет файла
# os.rename(r"D:\folder", r"D:\catalog")

# Переименовывать можно не только один каталог, но и несколько папок сразу, только если все они находятся в одной
# иерархической цепочке. Для этого достаточно вызвать метод renames и передать ему путь к конечной директории в качестве
# первого аргумента. В роли же второго параметра выступает аналогичный адрес к папке, но только с новыми именами всей
# цепочки. Следующий пример демонстрирует правильное использование функции renames, за счет чего было произведено
# переименование директорий folder, first и second в catalog, one и two
# os.renames(r"D:\folder\first\second", r"D:\catalog\one\two")
# endregion Переименование.
# -------------------- #
# region Содержимое директорий.
# Проверить наличие в каталоге определенных объектов позволяет функция listdir. С её помощью можно получить информацию
# о файлах и папках в виде списка. В программе немного ниже показано, как метод принимает в качестве параметра путь к
# каталогу folder на диске D, а затем выводит название внутренней папки first и документа test.txt, вывод в консоль
# осуществляется с помощью print
# print(os.listdir(r'{}'.format(job_directory))) <-- Содержимое директории.

# Воспользовавшись методом walk, можно получить доступ к названиям и путям всех под папок и файлов, относящихся к
# заданному каталогу. Применив один внешний цикл for, а также два вложенных, несложно получить информацию об объектах в
# каталоге folder через специальные списки directories и files. Сведения выдаются с помощью многократного обращения к
# print.
for root, directories, files in os.walk(r'{}'.format(job_directory)):
    print('\n', root)
    for directory in directories:
        print(directory)
    for file in files:
        print(file)

# endregion Содержимое директорий.
# -------------------- #
# region Информация о файлах и директориях.
# Вывести на экран или в любое другое место основные сведения об объекте можно через метод stat. Поместив ему в качестве
# параметра расположение файла или папки на диске компьютера, стоит ожидать небольшой массив информации. Здесь можно
# найти данные о размере объекта в байтах, а также некие числовые значения, отображающие доступ и режим его работы.
print(os.stat(r'{}'.format(job_directory)))
# endregion Информация о файлах и директориях.
# -------------------- #
# region Обработка путей.
# Возвращаясь к классу path из библиотеки os, стоит принять во внимание функцию split, позволяющую очень легко
# разъединять путь к файлу и имя файла в различные строки. Это демонстрируется на следующем примере с текстовым
# документом test.txt в папке folder.
# print(os.path.split(r"D:\folder\test.txt"))  # ('D:\\folder', 'test.txt')

# Обратное действие выполняет функция join, позволяя легко соединить путь к документу с его названием. Как видно из
# результатов работы данного кода, благодаря print на экране будет отображаться путь, который ссылается на текстовый
# файл test.txt в каталоге folder на D.
# print(os.path.join(r"D:\folder", "test.txt")) # D:\folder\test.txt

# endregion Обработка путей.
# -------------------- #