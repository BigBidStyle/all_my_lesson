# -------------------- #
# region Общие сведения.
"""Информация взята из источника: https://all-python.ru/osnovy/tekstovye-fajly.html

Высокоуровневый язык программирования Python 3 предоставляет своим пользователям массу полезных средств для
взаимодействия с текстовыми файлами. Встроенные методы платформы позволяют не только создавать документы для хранения
строковой информации, но и читать из них данные, а также записывать, удалять и всячески манипулировать их содержимым."""
# endregion Общие сведения.
# -------------------- #
# region Создание, открытие и закрытие файла.
""" Работа с любым текстовым файлом в Python начинается с вызова специальной функции open, которая принимает в качестве
параметров путь к объекту на компьютере и режим обработки. Путь к документу можно указать как абсолютный
(адрес расположения на жестком диске ПК), так и как относительный (координаты относительно папки проекта).
Выбирая нужный режим обработки файла, следует учитывать его назначение (“w” для записи, “r” для чтения данных).
Следующий пример показывает простое взаимодействие с текстовым документом. """

file_lesson = 'Работа с текстовыми файлами.txt'
file = open(file_lesson, 'w') # Открываем файл, если его нет то создаем.
file.write('Hello Water-wave')   # Записываем значение в файл.
file.close()    # Закрываем сам файл.


"""Как можно заметить, функция open принимает относительный путь файла и открывает его для записи. Если в папке с 
исходным кодом документа с аналогичным именем и расширением .txt не существует, метод open создает его самостоятельно, 
после чего открывает для него нужный режим обработки. Выполнив все необходимые действия с переменной file, которая 
ссылается на реальный файл, следует вручную закрыть его, чтобы избежать потери информации. Данную задачу выполняет 
метод close, если вызвать его при помощи оператора доступа (точки).

Выполнить точно такие же действия, но без необходимости вручную закрывать файл, вполне возможно благодаря связке 
операторов with as. Для этого необходимо поместить метод open сразу после ключевого слова with, а переменную, которая 
будет ссылаться на файл, прописать за конструкцией as. Ниже располагается пример открытия документа с помощью with as."""

with open(file_lesson, "w") as file:
    file.write("hello world")

"""Оба примера небольших программ демонстрируют работу с test.txt, который генерируется в каталоге с исходным кодом. 
В качестве режима обработки для него выбирается запись данных. После этого при помощи метода write в него заносится 
строка “hello world”. Завершается код в обоих случаях закрытием текстового файла test.txt методом close или 
автоматически."""
# endregion Создание, открытие и закрытие файла.
# -------------------- #
# region Запись построчно.
"""Запись построчно
Чтобы быстро записать информацию в текстовый файл, достаточно открыть его в программе, написанной на языке Python, 
после чего воспользоваться функцией write через переменную, которая ссылается на документ.

В Python запись в файл построчно осуществляется с помощью записи нужной строки с последующей записью символа перевода 
строки ‘\n’. Рассмотрим пример записи списка поэлементно. Каждый элемент будет записан в новой строке:"""

lines = ["first", "second", "third"]
with open(file_lesson, "w") as file:
    for  line in lines:
        file.write(line + '\n')

"""Приведенный выше пример небольшой программы показывает создание небольшого массива lines, который содержит три
 строковых элемента: “first”, “second” и “third”. За счет функции open и связки операторов with as происходит открытие
 текстового файла test.txt в корневом каталоге жесткого диска D. В цикле мы проходим по всем элементам списка и с 
 помощью команды write их записываем. Чтобы каждая запись была с новой строки, добавляем символ перевода строки.

Так же можно воспользоваться функцией writelines. Если мы передадим в качестве ее параметра список, то она запишет 
элементы друг за другом в одну строку. Но можно поступить следующим образом: в качестве параметра передать генератор 
следующим образом."""

lines = ["first", "second", "third"]
with open(file_lesson, "w") as file:
    file.writelines("%s\n" % line for line in lines)

"""Этот пример отличается от предыдущего тем, что вызывается метод writelines, который принимает в качестве аргумента 
генератор. Для разделения элементов последовательности тут применяется “\n”, благодаря чему каждое слово в документе 
будет находиться в отдельной строке."""
# endregion Запись построчно.
# -------------------- #
# region Чтение построчно.
"""Прочитать содержимое текстового файла построчно в языке Python очень просто, поскольку в этом прекрасно помогает цикл
 for. Но для начала все же необходимо открыть документ, как и в предыдущем случае, при помощи open и with as. Однако на 
 этот раз следует указать другой режим обработки файла, выбрав для него “r” для получения доступа к чтению данных."""

with open(file_lesson, "r") as file:
    for line in file:
        print(line, end="")

"""В этом примере показывается открытие файла test.txt, в котором уже содержится небольшой массив строк, записанный 
ранее. Построчное чтение информации из файла производится в цикле for. Каждая итерация выводит сведения из новой строки 
(line) при помощи функции print. Все элементы отображаются на экране построчно, как и были ранее помещены в test.txt."""
# endregion Чтение построчно.
# -------------------- #
# region Количество строк.
"""Возможности языка Python позволяют производить и куда более сложные виды программных операций с внутренним содержимым
 текстовых файлов. Например, если требуется определить в Python количество строк в файле, можно открыть файл и в цикле 
 посчитать количество занятых в нем строк. В этом поможет предварительно объявленная переменная count, в которую перед 
 применением нужно записать 0, а затем прибавлять по единице с каждой новой строкой."""

count = 0
with open(file_lesson, "r") as file:
    for line in file:
        count += 1
    print(count)

"""Приведенный выше пример демонстрирует работу счетчика count. Для взаимодействия с ним следует открыть текстовый файл 
в режиме чтения, а затем инкрементировать в каждом новом шаге цикла for объявленную ранее числовую переменную, которая 
затем выводится в print.

Можно поступить и другим способом. Прочитать файл в список с помощью readlines. А после этого с помощью функции len 
определить размер списка. Это и будет количество строк."""

with open(file_lesson, "r") as file:
    print(len(file.readlines()))

# Так же в интернете нашел код для подсчета строк и файле, но я пока не понимаю, что означает 1 в коде.
print(sum(1 for line in open(file_lesson, 'r')))
# endregion Количество строк.
# -------------------- #
# region Поиск строки.
"""Чтобы с помощью Python найти строку в текстовом файле, стоит прибегнуть к помощи встроенного метода readlines, 
который позволяет автоматически считывать внутреннее содержимое файла. Как и раньше, для начала необходимо открыть 
test.txt для чтения, чтобы затем поместить данные из него в специальный массив lines. Встроенный метод index позволяет 
найти номер элемента в последовательности, просто передав ему нужный объект, например, строку “second”."""

with open(file_lesson, "r") as file:
    lines = file.readlines()
    print(lines.index("second\n"))

"""Поскольку в test.txt все элементы располагаются в отдельных строках, к строке, которую стоит передать методу index 
в качестве аргумента, необходимо прибавить конструкцию “\n”."""
# endregion Поиск строки.
# -------------------- #
# region Удаление строки.
"""Чтобы в Python удалить ненужную строку из файла, следует воспользоваться сразу двумя режимами обработки файлов: 
чтение и запись. Для начала необходимо открыть test.txt для чтения, чтобы поместить информацию из него в отдельный 
массив lines. Далее потребуется удалить один из элементов последовательности при помощи оператора del, указав ему 
индекс нужной строки в квадратных скобках. Массив объектов, который получился в итоге, необходимо поместить в исходный 
текстовый файл, однако на этот раз открыть его надо в режиме записи."""

with open(file_lesson, "r") as file:
    lines = file.readlines()
del lines[1]
with open(file_lesson, "w") as file:
    file.writelines(lines)

"""Приведенный выше пример небольшой программы демонстрирует удаление строки из файла. В данном случае используются 
методы readlines и writelines, позволяющие считывать массив строк из документа и записывать его туда же, разделяя 
отдельные элементы списка.

Обратите внимание, что в приведенном примере удалится вторая строка, так как индексы списка считаются 
от нулевого элемента.
Таким образом, можно достаточно легко взаимодействовать с содержимым текстовых файлов, пользуясь языком 
программирования Python 3. Его встроенные функции позволяют записывать данные в документ и считывать их в удобном для 
пользователя виде.   При помощи средств по расширенной работе с файлами, можно управлять ими на куда более 
продвинутом уровне."""
# endregion Удаление строки.
# -------------------- #
# Мои примечания
clear_line = line.rstrip()  # Удаляет пробелы в строке.