# -------------------------------------------------------------------------------------------------------------------- #
# region 4.2 List comprehension.
# region Задача 1. Кубы и квадраты.
# Пользователь вводит числа A и B. Напишите программу, которая генерирует два списка: в первом лежат кубы чисел в
# диапазоне от А до В, во втором — квадраты чисел в этом же диапазоне. Выведите списки на экран. Для генерации
# используйте list comprehensions (как и в следующих задачах).

# Пример:
# Левая граница: 5
# Правая граница: 10

# Список кубов чисел в диапазоне от 5 до 10: [125, 216, 343, 512, 729, 1000]
# Список квадратов чисел в диапазоне от 5 до 10: [25, 36, 49, 64, 81, 100]
# region Мое решение.
# left_border = int(input("Левая граница: "))
# right_border = int(input("Левая граница: "))
#
# list_cube = []
# list_square = []
#
# comp_left = [list_cube.append(num_1 ** 3) for num_1 in range(left_border, right_border + 1)]
# comp_right = [list_square.append(num_2 ** 2) for num_2 in range(left_border, right_border + 1)]
#
# print(f"Список кубов чисел в диапазоне от {left_border} до {right_border} : {list_cube}")
# print(f"Список кубов чисел в диапазоне от {left_border} до {right_border} : {list_square}")
# endregion Мое решение.

# region Решение SkillBox.
# left = int(input("Левая граница: "))
# right = int(input("Правая граница: "))
#
# cubes = [i ** 3 for i in range(left, right + 1)]
# squares = [i ** 2 for i in range(left, right + 1)]
#
# print(f"Список кубов чисел в диапазоне от {left} до {right}: {cubes}")
# print(f"Список квадратов чисел в диапазоне от {left} до {right}: {squares}")
# endregion Решение SkillBox.
# endregion Задача 1. Кубы и квадраты.
# -------------------------------------------------------------------------------------------------------------------- #
# region Задача 2. Сообщение.
# Илья решил безобидно подшутить над другом и написал программу для смартфона, которая при отправке сообщения удваивает
# каждый символ строки и заодно к каждому удвоенному добавляет ещё один дополнительный.
#
# Пользователь вводит строку и дополнительный символ. Напишите программу, которая генерирует два списка: в первом
# списке каждый элемент — удвоенная буква первой строки, во втором списке каждый элемент — конкатенация элемента
# первого списка и дополнительного символа.

# Пример:
# Введите строку: привет
# Введите дополнительный символ: !

# Список удвоенных символов: ['пп', 'рр', 'ии', 'вв', 'ее', 'тт']
# Склейка с дополнительным символом: ['пп!', 'рр!', 'ии!', 'вв!', 'ее!', 'тт!']

# region Решение SkillBox.
# incoming_msg = input("Введите строку: ")
# special_symbol = input("Введите дополнительный символ: ")
#
# doubled_letters = [letter * 2 for letter in incoming_msg]
# result_msg = [letter + special_symbol for letter in doubled_letters]
#
# print("Список удвоенных символов:", doubled_letters)
# print("Склейка с дополнительным символом:", result_msg)
# endregion Решение SkillBox.
# endregion Задача 2. Сообщение.
# -------------------------------------------------------------------------------------------------------------------- #
# region Задача 3. Повышение цен.
# Дан список цен на пять товаров с точностью до копейки. Так как экономика даёт о себе знать, мы спрогнозировали, что
# через год придётся повышать цены на X процентов, а ещё через один год — ещё на Y процентов.

# Напишите программу, которая получает на вход список цен на товары (вещественные числа, список генерируется также с
# помощью list comprehensions) и выводит в одну строку общую сумму стоимости товаров за каждый год.

# Пример:
# Цена на товар: 1.09
# Цена на товар: 23.56
# Цена на товар: 57.84
# Цена на товар: 4.56
# Цена на товар: 6.78
# Повышение на первый год: 0
# Повышение на второй год: 10

# Сумма цен за каждый год: 93.83 93.83 103.21

# region Мое решение.
# product_price = round(sum([(float(input("Цена на товар: "))) for price in range(0, 5)]), 2)
#
# year_1 = round(product_price / 100 * (100 + int(input("Повышение на первый год: "))), 2)
# year_2 = round(year_1 / 100 * (100 + int(input("Повышение на второй год: "))), 2)
#
# print(f"Сумма цена на каждый год: {product_price} {year_1} {year_2}")
# endregion Мое решение.

# region Решение SkillBox.
# prices = [float(input("Цена на товар: ")) for _ in range(5)]
#
# first_year = int(input("Повышение на первый год: "))
# second_year = int(input("Повышение на второй год: "))
#
# all_prices = "Сумма цен за каждый год: "
# for percent in 0, first_year, second_year:
#     prices = [price * (1 + percent / 100) for price in prices]
#     all_prices += f" {round(sum(prices), 2)}"
#
# print(all_prices)
# endregion Решение SkillBox.


# endregion Задача 3. Повышение цен
# endregion 4.2 List comprehension.
# -------------------------------------------------------------------------------------------------------------------- #
# region 4.3 List comprehension.
# region Задача 1. Список чётных чисел
# Пользователь вводит два числа: А и В. Реализуйте код, который генерирует список из чётных чисел в диапазоне от А до B.
# Используйте list comprehensions (как и в следующих задачах).

# region Мое решение
# numbers = [num for num in range(int(input("Число A: ")), int(input("Число B: ")) + 1) if num % 2 == 0]
# print(numbers)
# endregion Мое решение

# region Решение Skillbox
# first = int(input("Первое число А: "))
# second = int(input("Второе число B: "))
#
# result = [number for number in range(first, second) if number % 2 == 0]
# print(result)
# endregion Решение Skillbox

# endregion Задача 1. Список чётных чисел
# -------------------------------------------------------------------------------------------------------------------- #
# region Задача 2. Магазин
# У нас есть вот такой список цен на некоторые товары из магазина:
# original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]

# В этом списке также хранятся цены на товары, которые уже давно не продаются. По какой-то причине система, вместо
# того чтобы их занулить, просто приписала к ним минус. Нам нужно это исправить.

# Напишите программу, которая генерирует новый список из первого списка, заменяя все отрицательные числа на ноль.

# Результат:
# [1.25, 0, 10.22, 3.78, 0, 1.16]

# region Мое решение.
# original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]
# new_prices = [(price if price > 0 else 0) for price in original_prices]
# print(new_prices)
# endregion Мое решение.

# region Решение SkillBox
# original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]
# new_prices = [price if price > 0 else 0 for price in original_prices]
# print("Результат:\n\n", new_prices, sep="")     # <-- Бред какой-то
# endregion Решение SkillBox

# endregion Задача 2. Магазин
# -------------------------------------------------------------------------------------------------------------------- #
# region Задача 3. Отряды
# Мы продолжаем пробовать себя в качестве разработчика игр. Теперь нужно написать небольшую логику поведения некоторых
# отрядов, а также их урон. Есть два отряда, в каждом по 10 монстров. В первом отряде у каждого монстра урон абсолютно
# случайный и колеблется от 50 до 80, а во втором — от 30 до 60. Оба отряда вместе напали на третий, также из 10 юнитов.
# Юнит третьего отряда погибает, если сумма урона от двух монстров больше 100.

# Напишите программу, которая генерирует случайные значения в первых двух списках в заданных диапазонах, а также
# генерирует список, состоящий из фраз «Погиб» или «Выжил». Выведите все списки на экран.

# Пример:
# Урон первого отряда: [77, 75, 76, 77, 76, 73, 57, 67, 76, 52]
# Урон второго отряда: [53, 51, 31, 60, 49, 37, 31, 60, 37, 47]
# Состояние третьего отряда: ['Погиб', 'Погиб', 'Погиб', 'Погиб', 'Погиб', 'Погиб', 'Выжил', 'Погиб', 'Погиб', 'Выжил']

# region Решение SkillBox
# import random
#
# first_squad = [random.randint(50, 80) for _ in range(10)]
# second_squad = [random.randint(30, 60) for _ in range(10)]
# min_len_of_squad = min(len(first_squad), len(second_squad))
# third_squad = ["Погиб" if first_squad[i] + second_squad[i] > 100 else "Выжил" for i in range(min_len_of_squad)]
#
# print("Урон первого отряда:", first_squad)
# print("Урон второго отряда:", second_squad)
# print("Состояние третьего отряда:", third_squad)
# endregion Решение SkillBox
# endregion Задача 3. Отряды
# endregion 4.3 List comprehension.
# -------------------------------------------------------------------------------------------------------------------- #
# region 4.4 List comprehension Срезы списков.
# region Задача 1. Анализ цен
# Нашему другу заказали написать программу, которая анализирует цены на бирже. Она получает этот пакет данных, но
# делать что-либо с ним нельзя. Для нормальной работы аналитической программы берётся новый список, который равен тому,
# что пришло. Затем идёт работа с новым списком: если есть отрицательные цены, то программа их зануляет и в конце
# выводит на экран, сколько денег мы по итогу потеряли. Получился вот такой код:

# original_prices = [-12, 3, 5, -2, 1]
# new_prices = original_prices
# for i in range(len(original_prices)):
#     if new_prices[i] < 0:
#         new_prices[i] = 0
# print("Мы потеряли: ",  sum(original_prices) - sum(new_prices))

# Однако при таких входных данных программа почему-то работает неправильно: она выводит ответ 0, когда правильный
# ответ 14. Помогите другу исправить программу, а также сделайте так, чтобы список цен генерировался случайно (диапазон
# можно выбрать любой)

# region Мое решение.
# import random
# original_prices = [random.randint(-100, 100) for _ in range(10)]
# new_prices = [-i for i in original_prices if i < 0]
# print("Мы потеряли: ",  sum(new_prices))
# endregion Мое решение.

# region Решение SkillBox.
# import random
#
# original_prices = [random.randint(-100, 100) for _ in range(10)]
#
# new_prices = original_prices.copy()
# # new_prices = original_prices[::]  # копирование можно реализовать и через срез
#
# for i in range(len(original_prices)):
#
#     if new_prices[i] < 0:
#         new_prices[i] = 0
#
# print("Мы потеряли:", abs(sum(original_prices) - sum(new_prices)))
# endregion Решение SkillBox.

# endregion Задача 1. Анализ цен
# -------------------------------------------------------------------------------------------------------------------- #
# region Задача 2. Срезы
# Дан список чисел:
# nums = [48, -10, 9, 38, 17, 50, -5, 43, 46, 12]

# Напишите программу, которая выводит на экран шесть ответов:

# В первой строке выведите первые пять элементов списка.
# Во второй строке выведите весь список, кроме последних двух элементов.
# В третьей строке выведите все элементы с чётными индексами.
# В четвёртой строке выведите все элементы с нечётными индексами.
# В пятой строке выведите все элементы в обратном порядке.
# В шестой строке выведите все элементы списка через один в обратном порядке, начиная с последнего.
# Для решения используйте только срезы (и без функции len).

# Результат:
# [48, -10, 9, 38, 17]
# [48, -10, 9, 38, 17, 50, -5, 43]
# [48, 9, 17, -5, 46]
# [-10, 38, 50, 43, 12]
# [12, 46, 43, -5, 50, 17, 38, 9, -10, 48]
# [12, 43, 50, 38, -10]

# region Мое решение.
# nums = [48, -10, 9, 38, 17, 50, -5, 43, 46, 12]
# print(nums[:5])     # В первой строке выведите первые пять элементов списка.
# print(nums[:-2])    # Во второй строке выведите весь список, кроме последних двух элементов.
# print(nums[::2])    # В третьей строке выведите все элементы с чётными индексами.
# print(nums[1::2])    # В четвёртой строке выведите все элементы с нечётными индексами.
# print(nums[::-1])   # В пятой строке выведите все элементы в обратном порядке.
# print(nums[::-2])  # В шестой строке выведите все элементы списка через один в обратном порядке, начиная с последнего.

# endregion Мое решение.

# region Решение SkillBox
# print(nums[:5])
# print(nums[:-2])
# print(nums[::2])
# print(nums[1::2])
# print(nums[::-1])
# print(nums[::-2])
# endregion Решение SkillBox
# endregion Задача 2. Срезы
# -------------------------------------------------------------------------------------------------------------------- #
# region Задача 3. Удаление части
# Дан список из N чисел, а также числа А и В (можно сгенерировать случайно, при этом А < B). Напишите программу,
# которая удаляет элементы списка с индексами от А до В. Не используйте дополнительные переменные и методы списков

# region Решение SkillBox
import random
n = int(input("Введите количество чисел N: "))

numbers = [random.randint(-10, 10) for _ in range(n)]

a = random.randint(0, len(numbers) - 2)
b = random.randint(a + 1, len(numbers) - 1)
# Генерируем числа так, чтобы они не выходили за границу списка
print(numbers, a, b)
numbers = numbers[:a] + numbers[b + 1:]
print(numbers)
# endregion Решение SkillBox

# endregion Задача 3. Удаление части
# endregion 4.4 List comprehension Срезы списков.
# -------------------------------------------------------------------------------------------------------------------- #
