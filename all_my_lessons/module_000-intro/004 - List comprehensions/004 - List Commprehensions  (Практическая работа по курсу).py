# -------------------------------------------------------------------------------------------------------------------- #
# region Практическая работа Курс № 2 (Тема № 4 List comprehension)
# region Задание 1. Гласные буквы.
import random

# Команде лингвистов понравилось качество ваших программ, и они решили заказать
# у вас функцию для анализатора текста, которая создавала бы список гласных букв
# текста, а заодно считала бы их количество.

# Напишите программу, которая запрашивает у пользователя текст и генерирует
# список из гласных букв этого текста (сама строка вводится на русском языке).
# Выведите в консоль сам список и его длину.

# Пример:
# Введите текст: Нужно отнести кольцо в Мордор!
# Список гласных букв: ['у', 'о', 'о', 'е', 'и', 'о', 'о', 'о', 'о']
# Длина списка: 9

# region Мое решение (Самое правильное решение!!!)
# vowel_letters = ["а", "я", "у", "ю", "о", "е", "ё", "э", "и", "ы"]
# new_list = [i for a in input("Введите текст: ") for i in vowel_letters if a == i]
# print(f"Список гласных букв: {new_list}")
# print(f"Длина списка: {len(new_list)}")

# endregion Мое решение (Самое правильное решение!!!)
# endregion Задание 1. Гласные буквы.
# -------------------------------------------------------------------------------------------------------------------- #
# region Задание 2. Турнир.
# Для соревнований по волейболу необходимо сформировать турнирную сетку из восьми человек на два дня.
# На первый день из списка участников решили выбрать каждого второго.
#
# Дан список из восьми имён: Артемий, Борис, Влад, Гоша, Дима, Евгений, Женя, Захар.
# Напишите программу, которая выводит элементы списка только с чётными индексами.
#
# Пример:
# Первый день: ['Артемий', 'Влад', 'Дима', 'Женя']
# day_1 = []
# name_list = ["Артемий", "Борис", "Влад", "Гоша", "Дима", "Евгений", "Женя", "Захар"]
# for i in range(len(name_list)):
#     if i % 2 == 0:
#         day_1.append(name_list[i])
# print(f"Первый день:{day_1}")

# region Мое решение.
# name_list = ["Артемий", "Борис", "Влад", "Гоша", "Дима", "Евгений", "Женя", "Захар"]
# day_1 = [name_list[i] for i in range(len(name_list)) if i % 2 == 0]
# print(f"Первый день:{day_1}")
# endregion Мое решение.

# endregion Задание 2. Турнир.
# -------------------------------------------------------------------------------------------------------------------- #
# region Задание 3. Клетки.
# В научной лаборатории выводят и тестируют новые виды клеток.
# Есть список из N этих клеток, элементом которого является показатель эффективности,а индексом — ранг клетки.
# Учёные отбирают клетки по следующему принципу:
# если эффективность клетки меньше её ранга, то она не подходит.

# Напишите программу, которая выводит на экран элементы списка, значения которых меньше их индекса.

# Пример:
# Количество клеток: 5
# Эффективность 1 клетки: 3
# Эффективность 2 клетки: 0
# Эффективность 3 клетки: 6
# Эффективность 4 клетки: 2
# Эффективность 5 клетки: 10

# Неподходящие значения: 0 2

# # решение № 1
# error_cell = []
# count_cell = int(input("Введите кол-во клеток: "))
# for number_cell in range(1, count_cell + 1):
#     effect = int(input(f"Эффективность {number_cell} клетки: "))
#     if effect < number_cell:
#         error_cell.append(number_cell)
# print(f"Неподходящие значения : {error_cell}")

# решение № 2
# list_N = []
# for i in range(int(input("Количество клеток: "))):
#     print(f"Эффективность {i + 1} клетки: ", end="")
#     effect = int(input())
#     if i + 1 > effect:
#         list_N.append(effect)
# print(f"\nНеподходящие значение: {list_N}")

# решение № 3 -Еще больше упрощенный вариант.
# list_N = []
# for i in range(int(input("Количество клеток: "))):
#     effect = int(input(f"Эффективность {i + 1} клетки: "))
#     if i + 1 > effect:
#         list_N.append(effect)
# print(f"\nНеподходящие значение: {list_N}")
# endregion Задание 3. Клетки.
# -------------------------------------------------------------------------------------------------------------------- #
# region Задание 4. Видеокарты.
# В базе магазина электроники есть список видеокарт компании NVIDIA разных поколений.
# Вместо полных названий хранятся только числа, которые обозначают модель и поколение
# видеокарты. Недавно компания выпустила новую линейку видеокарт. Самые старшие
# поколения разобрали за пару дней.

# Напишите программу, которая удаляет из списка видеокарт наибольшие элементы.

# Пример:
# Количество видеокарт: 5
# 1 Видеокарта: 3070
# 2 Видеокарта: 2060
# 3 Видеокарта: 3090
# 4 Видеокарта: 3070
# 5 Видеокарта: 3090

# Старый список видеокарт: [3070 2060 3090 3070 3090]
# Новый список видеокарт: [3070 2060 3070]

# Решение 1 (Старое)
# list_number = []
# max_number = 0
#
# for i in range(int(input("Количество видеокарт: "))):
#     print(f"{i + 1} Видеокарта: ", end="")
#     number = int(input())
#     list_number.append(number)
#     if max_number < number:
#         max_number = number
# print(f"\nCтарый список видеокарт: {list_number}")
#
# new_list = []
# for i in list_number:
#     if i != max_number:
#         new_list.append(i)
# print(f"Новый список видеокарт: {new_list}")

# # Решение 2 (Новое - повторение (Использование еще не пройденных материалов)
# list_card = []
# max_number = 0
# for i in range(1, int(input("Количество видеокарт: ")) + 1):
#     list_card.append(int(input(f"{i} Видеокарта: ")))
#     if max_number < list_card[i - 1]:
#         max_number = list_card[i - 1]
# print(f"Старый список видеокарт: {list_card}")
# new_list = []
# list_1 = [new_list.append(i) for i in list_card if i != max_number]
# print(f"Новый список видеокарт: {new_list}")
# endregion Задание 4. Видеокарты.
# -------------------------------------------------------------------------------------------------------------------- #
# region Задание 5. Кино.
# Что нужно сделать
# Илья зашёл на любительский кино сайт, на котором пользователи оставляют рецензии на фильмы.
# Их список:

# films = ["Крепкий орешек", "Назад в будущее", "Таксист", "Леон", "Богемская рапсодия",
# "Город грехов", "Мементо", "Отступники", "Деревня"]
#
# Илья на сайте в первый раз. Он хочет зарегистрироваться и сразу добавить часть фильмов
# в список любимых, чтобы позже прочитать рецензии на них.
#
# Напишите программу, в которой пользователь вводит фильм. Если он есть в перечне,
# то добавляется в список любимых. Если его нет, то выводится ошибка. В конце выведите
# весь список любимых фильмов.

# Пример:
# Сколько фильмов хотите добавить? 3
# Введите название фильма: Леон
# Введите название фильма: Безумный Макс
# Ошибка: фильма Безумный Макс у нас нет :(
# Введите название фильма: Мементо
# Ваш список любимых фильмов: Леон, Мементо

# Решение № 1 Старое решение :))) - хуйня какая то причем полная....
# films = ["Крепкий орешек", "Назад в будущее", "Таксист", "Леон", "Богемская рапсодия",
#          "Город грехов", "Мементо", "Отступники", "Деревня"]
#
# like_films = []
# count_films = len(films)
#
# for _ in range(int(input("Сколько фильмов хотите добавить: "))):
#     print(f"Введите название фильма: ", end="")
#     introduced_films = (input())
#     count = 0
#     for search in films:
#         count += 1
#         if search == introduced_films:
#             like_films.append(search)
#             count = 0
#             break
#         elif count == count_films and search != introduced_films:
#             print(f"Ошибка: Фильма {introduced_films} у нас нет.")
# print(f"Ваш список любимых фильмов: {like_films}")

# Решение № 2. Правильное решение.
# films = ["Крепкий орешек", "Назад в будущее", "Таксист", "Леон", "Богемская рапсодия",
#          "Город грехов", "Мементо", "Отступники", "Деревня"]
#
# my_list = []
# for _ in range(int(input(f"Сколько фильмов хотите добавить? "))):
#     title_film = input("Введите название фильма: ")
#     if title_film in films:
#         my_list.append(title_film)
#     else:
#         print(f"Ошибка: фильма {title_film} у нас нет :(")
#
# print_title = ", ".join(my_list)
# print(f"Ваш список любимых фильмов: {print_title}")

# endregion Задание 5. Кино.
# -------------------------------------------------------------------------------------------------------------------- #
# region Задание 6. Анализ Слова.
# Что нужно сделать
# Напишите программу — анализатор слов, чтобы использовать её для тренировки нейросети и генерировать нужный текст.

# Пользователь вводит слово. Напишите программу, которая считает количество
# уникальных букв в слове. Уникальные буквы — это те, которые встречаются всего один раз.

# Пример 1:
# Введите слово: привет
# Количество уникальных букв: 6

# Пример 2:
# Введите слово: лава
# Количество уникальных букв: 2

# Решение 1 (старое)
# word = input("Введите слово: ")
# new_word = list(word)
# count_word = len(new_word)
# count_number = 0
# for i in new_word:
#     count = 0
#     for n in new_word:
#         if i == n:
#             count += 1
#     if count == 1:
#         count_number +=1
# print(f"Количество уникальных букв: {count_number}")

# Решение № 2 (Повторение)
# word = list(input("Введите слово: "))
# new_list = []
# for i in range(len(word)):
#     if word[i] not in new_list:
#         new_list.append(word[i])
#     else:
#         new_list.remove(word[i])
# print(f"Количество уникальных букв: {len(new_list)}")
# endregion Задание 6. Анализ Слова.
# -------------------------------------------------------------------------------------------------------------------- #
# region Задание 7. Контейнеры.
# Контейнеры на складе лежат в ряд в порядке убывания или равно массы в килограммах.
# На склад привезли ещё один контейнер, который тоже нужно положить на определённое место.

# Напишите программу, которая получает на вход невозрастающую последовательность
# натуральных чисел. Они означают массу каждого контейнера в ряду. После этого
# вводится число X — масса нового контейнера. Программа выводит номер, под которым
# будет лежать новый контейнер. Если в ряде есть контейнеры с массой, как у нового,
# то его нужно положить после них.

# Обеспечьте контроль ввода: все числа не превышают 200.

# Пример:
# Количество контейнеров: 8
# Введите вес контейнера: 165
# Введите вес контейнера: 163
# Введите вес контейнера: 160
# Введите вес контейнера: 160
# Введите вес контейнера: 157
# Введите вес контейнера: 157
# Введите вес контейнера: 155
# Введите вес контейнера: 154

# Введите вес нового контейнера: 162

# Номер, который получит новый контейнер: 3

# Решение № 1 (Старое)
# max_weight = 200
# list_container = []
# def input_container(i, n):
#     while i != n:
#         print(f"Введите вес контейнера: ", end="")
#         weight_container = int(input())
#         if weight_container > max_weight:
#             print("Вес контейнера должен быть меньше 200 кг.")
#             input_container(i, n)
#             break
#         elif weight_container < max_weight and len(list_container) == 0:
#             list_container.append(weight_container)
#             i += 1
#         elif weight_container < max_weight and list_container[-1] >= weight_container:
#              list_container.append(weight_container)
#              i += 1
#         else:
#             print("Вес контейнера должен быть меньше либо равно предыдущему контейнеру.")
#     return
#
# index_number = 0
# number_container = int(input("Количество контейнеров: "))
# input_container(index_number,number_container)
#
# weight_new_container = int(input("\nВведите вес нового контейнера: "))
# for i in range(number_container):
#     if weight_new_container >= list_container[i]:
#         list_container.insert(i, weight_new_container)
#         print(list_container)
#         print(f"Номер, который получит новый контейнер: {i + 1}")
#         break
#     elif weight_new_container <= list_container[number_container-1]:
#         list_container.insert(number_container + 1, weight_new_container)
#         print((list_container))
#         print(f"Номер, который получит новый контейнер: {number_container + 1}")
#         break

# Решение № 2 ( Новое)
# max_weight = 200
# list_container = []
# for i in range(int(input("Введите количество контейнеров: "))):
#     weight = int(input(f"Введите вес контейнера: "))
#     while max_weight < weight:
#         print(f"Вес контейнера должен быть не больше {max_weight}!")
#         weight = int(input(f"Введите вес контейнера: "))
#     else:
#         list_container.append(weight)
#
# new_weight = int(input(f"Введите вес нового контейнера: "))
# while max_weight < new_weight:
#     print(f"Вес контейнера должен быть не больше {max_weight}!")
#     new_weight = int(input(f"Введите вес нового контейнера: "))
# else:
#     list_container.sort(reverse=True)
#     for i in range(len(list_container)):
#         if list_container[i] < new_weight:
#             print(f"Номер, который получит новый контейнер: {i + 1}")
#             break

# Тут конечно можно было убрать переменную max_weight, и прописать числом, так как по условию уже известна эта цифра.
# endregion Задание 7. Контейнеры.
# -------------------------------------------------------------------------------------------------------------------- #
# region Задание 8. Бегущие цифры.
# Вы пишете программу для маленького табло, в котором циклически повторяется один и тот же текст или числа.
# Например, как в метро, автобусах или трамваях.

# Даны список из N элементов и целое число K. Напишите программу, которая циклически сдвигает элементы списка вправо
# на K позиций. Используйте минимально возможное количество операций присваивания.

# Пример 1:
# Сдвиг: 1
# Изначальный список: [1, 2, 3, 4, 5]
# Сдвинутый список: [5, 1, 2, 3, 4]

# Пример 2:
# Сдвиг: 3
# Изначальный список: [1, 4, -3, 0, 10]
# Сдвинутый список: [-3, 0, 10, 1, 4]

# region единственное мое решение и причем правильное! :)
# list_number = [random.randint(-100, 100) for _ in range(5)]
# print(f"Изначальный список {list_number}")
# shift = int(input("Сдвиг: "))
#
# if shift > len(list_number):
#     shift = shift % len(list_number)
#
# new_list = list_number[-shift:]
# new_list += (list_number[:-shift])
# print(f"Сдвинутый список: {new_list}")
# endregion Единственное мое решение.
# endregion Задание 8. Бегущие цифры.
# -------------------------------------------------------------------------------------------------------------------- #
# region Задание 9. Полиндром.
# # Продолжите писать анализаторы для текста. Теперь необходимо реализовать код, с помощью которого можно определять
# палиндромы. То есть нужно находить слова, которые одинаково читается слева направо и справа налево.
#
# # Напишите такую программу.
#
# # Пример 1:
# # Введите слово: мадам
# # Слово является палиндромом
#
# # Пример 2:
# # Введите слово: abccba
# # Слово является палиндромом
#
# # Пример 3:
# # Введите слово: abbd
# # Слово не является палиндромом

# word = list(input("Введите слово: "))
# new_list = []
# for i in range(len(word)):

# Решение № 1 (старое)
# word = input("Введите слово: ")
# list_word = list(word)
# count_word = len(list_word)
# index_1 = 0
# index_2 = -1
# word = True
# while index_1 <= count_word:
#     if list_word[index_1] == list_word[index_2]:
#         index_1 += 1
#         index_2 -= 1
#         break
#     elif list_word[index_1] != list_word[index_2]:
#         print("Слово не является палиндроном.")
#         word = False
#         break
# if word:
#     print("Слово является палиндромом!")

# Решение № 2 (Повторное)
# count = 0
# text_list = list(input("Введите слово: "))
# for i in range(len(text_list)):
#     if text_list[i - 1] != text_list[-i]:
#         print("Слово не является палиндромом")
#         count += 1
#         break
# if count == 0:
#     print("Слово является палиндромом")
# endregion Задание 9. Полиндром.
# endregion Практическая работа Курс № 2 (Тема № 2 Базовые коллекции 1 - list (списки))
# -------------------------------------------------------------------------------------------------------------------- #
