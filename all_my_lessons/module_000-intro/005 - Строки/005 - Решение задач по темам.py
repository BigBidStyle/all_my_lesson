# Задачи по темам.
# region Урок 5.2 Форматирование строк: format и f-strings

# region Задача 1. Заказ
# После того как человек сделал заказ в интернет-магазине, ему на почту приходит оповещение с его именем и номером
# заказа.

# Напишите программу, которая получает на вход имя и код заказа, а затем выводит на экран соответствующее сообщение.
# Для решения используйте строковый метод format.

# Пример:
# Имя: Иван
# Номер заказа: 10948
# Здравствуйте, Иван! Ваш номер заказа: 10948. Приятного дня!

# region старое решение.
# grats_template = ("Здравствуйте, {name}! Ваш номер заказа: {number}. Приятного дня!")
#
# name = input("Введите имя: ")
# number = int(input("Номер заказа: "))
#
# print(grats_template.format(name=name, number=number))
# endregion старое решение.

# region Мое решение (Повторное)
# print("Здравствуйте, {name}! Ваш номер заказа: {order}. Приятного дня!.".format(name=input("Имя: "), order=input(
#     "Номер заказа: ")))
# endregion Мое решение (Повторное).

# region Решение SkillBox.
# name = input("Имя: ")
# order_id = input("Номер заказа: ")
#
# print("Здравствуйте, {name}! Ваш номер заказа: {id}. Приятного дня!".format(name=name, id=order_id))
# endregion Решение SkillBox.

# endregion Задача 1. Заказ
# -------------------------------------------------------------------------------------------------------------------- #
# region Задача 2. Долги
# Один наш друг занял у нас определённую сумму денег и всё никак не может их вернуть. А деньги нам нужны. Поэтому мы
# решили написать небольшой скрипт-напоминание, который, возможно, разбудит его совесть.

# Напишите программу, которая получает на вход имя и долг, а затем выводит на экран сообщение, где имя повторяется
# несколько раз (и долг, возможно, тоже). Используйте числа в названиях ключей.

# Пример:
# Введите имя: Том
# Введите долг: 100
# Том! Том, привет! Как дела, Том? Где мои 100 рублей? Том!


# region старое решение.
# debit_text = ("{name}! {name}, привет! Как дела, {name}?"
#          " Где мои {debit} рублей? {name}!")
#
# name = input("Введите имя: ")
# debit = int(input("Введите долг: "))
#
# print(debit_text.format(name=name, debit=debit))
# endregion старое решение.

# region Мое решение (Повторное)
# name = input("Введите имя: ")
# credit = int(input("Введите долг: "))
# print(f"{name} {name} привет! Как дела, {name}? Где мои {credit} {credit} рублей? {name}!")
# endregion Мое решение (Повторное).

# region Решение SkillBox.
# name = input("Имя: ")
# debt = input("Долг: ")
#
# print("{name}! {name}, привет! Как дела, {name}? Где мои {debt} рублей? {name}!".format(name=name, debt=debt))
# endregion Решение SkillBox.

# endregion Задача 2. Долги
# -------------------------------------------------------------------------------------------------------------------- #
# region Задача 3. IP-адрес.
# IP-адрес компьютера состоит из 4 чисел, разделённых точкой. Каждое число находится в диапазоне от 0 до 255
# (включительно).

# Пример правильного адреса: 192.168.1.0
# Пример неправильного адреса: 192.168.300.0

# region старое решение.
# endregion старое решение.

# region Мое решение (Повторное)
# endregion Мое решение (Повторное).

# region Решение SkillBox.
# endregion Решение SkillBox.

# Напишите программу, которая получает на вход 4 числа и выводит на экран IP-адрес. Используйте переменную ip_address
# в качестве шаблона. Обеспечьте контроль ввода



# region старое решение.
# ip_address = "{0}.{1}.{2}.{3}"
# count = 0
# numbers = []
# while count < 4:
#     new_number = int(input("Введите число от 0 до 255: "))
#     if 0 <= new_number <= 255:
#         count += 1
#         numbers.append(new_number)
#     else:
#         print("Не верное число!!!")
#
# print(ip_address.format(*numbers))
# endregion старое решение.

# region Мое решение (Повторное)
# import random
# ip_address = "{0}.{1}.{2}.{3}"
# numbers = [random.randint(0, 255) for _ in range(4)]
# print(ip_address.format(*numbers))
# endregion Мое решение (Повторное).

# region Решение SkillBox.
# ip_address = "{0}.{1}.{2}.{3}"
# count = 0
# numbers = []
# while count < 4:
#     new_number = int(input("Введите число: "))
#     if 0 <= new_number <= 255:
#         numbers.append(new_number)
#         count += 1
# print(ip_address.format(*numbers))
# endregion Решение SkillBox.
# endregion Задача 3. IP-адрес
# endregion Практическая работа Курс № 2 (Тема № 5 Базовые коллекции (Строки)).

# -------------------------------------------------------------------------------------------------------------------- #
# region Урок 5.3 Поздравления Методы Split & Join.

# region Задача 1. Улучшенная лингвистика 2
# Усовершенствуйте старую программу:
# region Старое решение.
# words = [input("Введите слово: ") for _ in range(3)]
# text = input("Введите текст: ")
# words_count = [text.count(word) for word in words]
# print(words_count)
# endregion Старое решение.

# У нас есть список из трёх слов, которые вводит пользователь. Затем вводится сам текст произведения, который вводится
# уже в одну строку. Напишите программу, которая посчитает, сколько раз слова пользователя встречаются в тексте.
# endregion Задача 1. Улучшенная лингвистика 2
# -------------------------------------------------------------------------------------------------------------------- #
# region Задача 2. Бабушка
# У одной бабушки, когда та переписывается с внуком, постоянно залипает кнопка пробела. В итоге между словами
# получаются огромные расстояния. Внук не знает как это поправить в самом телефоне, поэтому обратился к вам за помощью.
#
# Пользователь вводит строку. Напишите программу, которая преобразовывает в этой строке все идущие подряд пробелы в
# один и выводит результат на экран.

# Пример:
# Введите текст: У       нас         пошёл                    снег    !
# Исправленный текст: У нас пошёл снег !
# -------------------------------------------------------------------------------------------------------------------- #
# region Мое решение старое
# text = input("Введите текст: ")
# print("Исправленный текст: ", " ".join(text.split()))
# endregion Мое решение старо
# -------------------------------------------------------------------------------------------------------------------- #
# region Мое решение (Повторное)
# text = [letter for letter in (input("Введите текст: "))]
# new_text = [text[i] for i in range(len(text)) if text[i] != " " or text[i-1] != text[i]]
# print("".join(new_text))
# endregion Мое решение (Повторное)
# -------------------------------------------------------------------------------------------------------------------- #
# region Решение SkillBox
# text = input("Введите текст: ")
# print(" ".join(text.split()))
# endregion Решение SkillBox
# endregion Задача 2. Бабушка
# -------------------------------------------------------------------------------------------------------------------- #
# region Задача 3. Разделители символов (НЕРЕШЕНА)
# Человек хочет сделать рассылку поздравлений для определённого списка людей. Поздравления для разных людей он хочет
# написать по-разному.

# Напишите программу, которая запрашивает у пользователя:
# Шаблон поздравления (туда вставляется ФИ и возраст)
# ФИ людей (в одну строку, разделяются запятой)
# Возраст каждого человека (в одну строку через пробел)
# В конце программа выводит поздравления и всех именинников в одну строку вместе с их возрастом.

# Пример:
# Введите шаблон поздравления, в шаблоне можно использовать конструкцию {name} и {age}: С днём рождения, {name}! С
# {age}-летием тебя!

# Список людей через запятую: Иван Иванов, Петя Петров, Лена Ленова
# Возраст людей через пробел: 20 30 18

# С днём рождения, Иван Иванов! С 20-летием тебя!
# С днём рождения, Петя Петров! С 30-летием тебя!
# С днём рождения, Лена Ленова! С 18-летием тебя!

# Именинники: Иван Иванов 20, Петя Петров 30, Лена Ленова 18
# endregion Задача 3. Разделители символов
# -------------------------------------------------------------------------------------------------------------------- #
# endregion Урок 5.3 Поздравления Методы Split&Join. Практическая работа Курс № 2 (Тема № 5 Базовые коллекции (Строки))

# -------------------------------------------------------------------------------------------------------------------- #
# region Урок 5.4 Методы строк: startswith, endswith, upper, lower

# region Задача 1. Шифр Цезаря 2
# Мы уже писали программу, которая шифрует строку с помощью шифра Цезаря. Напомним, что в таком способе шифрования
# каждая буква заменяется на следующую по алфавиту через K позиций по кругу.

# Напишите (модифицируйте) программу, которая реализует этот алгоритм шифрования. Не используйте конкатенацию и
# сделайте так, чтобы текст был в одном регистре.

# region решение SkillBox
# text = input("Введите текст: ")
# shift = int(input("Введите сдвиг: "))
# alphabet = [chr(index) for index in range(ord("а"), ord("я") + 1)]  # заполняем список буквами алфавита
# # Думаем над структурой алгоритма: [вариант_1 если условие_1 иначе вариант_2 for буква in текст]
# new_text = [alphabet[(alphabet.index(letter) + shift) % len(alphabet)] if letter in alphabet else letter for letter in text.lower()]
# print(''.join(new_text))
# endregion решение SkillBox
# endregion Задача 1. Шифр Цезаря 2
# -------------------------------------------------------------------------------------------------------------------- #
# region Задача 2. Путь к файлу
# Все данные сайта лежат в одном проекте. При написании кода, внутри этого проекта часто используются абсолютные пути
# файлов, которые необходимо проверять.

# Пользователь вводит абсолютный путь к текстовому файлу, а также проверяемые данные: диск и расширение файла. Напишите
# программу, которая проверяет корректность этого пути.

# Пример:
# Путь к файлу: C:/user/docs/folder/new_file.txt
# На каком диске должен лежать файл: C
# Требуемое расширение файла: .txt
# Путь корректен!

# region Мое изначальное решение.
# path = input("Введите путь к файлу: ").lower()
# disk = input("На каком диске должен лежать файл: ")
# expansion = input("Требуемое расширение: ")
#
# if not path.endswith(f".{expansion}"):
#     print("Ошибка! Неверное расширение файла!")
# elif not path.startswith(f"{disk}:/"):
#     print("Ошибка! Неверно указан диск!")
# else:
#     print("Путь корректен!")
# endregion Мое изначальное решение.

# region Мое повторное решение.
# disk = input("На каком диске должен лежать файл: ")
# expansion = input("Требуемое расширение файла: ")
# path = ("c:/user/docs/folder/new_file.txt")
#
# if not path.endswith(expansion):
#     print("Ошибка! Неверное расширение файла!")
#
# elif not path.startswith(disk):
#     print("Ошибка! Неверно указан диск!")
# else:
#     print("Путь корректен! ")
# endregion Мое повторное решение.

# region Решение SkillBox
# path = input("Путь к файлу: ")
# disk = input("На каком диске должен лежать файл: ")
# extension = input("Требуемое расширение файла: ")
#
# if path.startswith(disk) and path.endswith(extension):
#     print("Путь корректен!")
# else:
#     print("Путь некорректен!")
# endregion Решение SkillBox

# endregion Задача 2. Путь к файлу
# -------------------------------------------------------------------------------------------------------------------- #
# region Задача 3. Удаление части
# На вход в программу подаётся строка, состоящая из прописных и заглавных букв кириллицы. Напишите код, который
# проверяет, каких букв в строке больше, прописных или заглавных. Если заглавных букв больше, то сделать все буквы
# строки заглавными, иначе сделать все прописными.

# Подсказка: используйте методы islower() и/или isupper().

# Пример:
# Введите строку: ПитоН - этО хорошО
# Результат: питон - это хорошо

# region Решение SkillBox
# text = input("Введите текст: ")
# lowers = len([letter for letter in text if letter.islower()])
# uppers = len([letter for letter in text if letter.isupper()])
#
# if lowers > uppers:
#     print("Результат:", text.lower())
# else:
#     print("Результат:", text.upper())
# endregion Решение SkillBox

# Пример 2:
# Введите строку: ПиТоН - ЭтО УДоБнО
# Результат: ПИТОН - ЭТО УДОБНО
# endregion Задача 3. Удаление части
# -------------------------------------------------------------------------------------------------------------------- #
# endregion Урок 5.4 Методы строк: startswith, endswith, upper, lower

# -------------------------------------------------------------------------------------------------------------------- #
