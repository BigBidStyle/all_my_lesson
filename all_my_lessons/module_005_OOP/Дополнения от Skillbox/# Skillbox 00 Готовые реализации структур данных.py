# Модуль collections
# Большинство структур данных имеет устоявшуюся реализацию, поэтому не нужно создавать их каждый раз вручную и
# придумывать свои модули.

# Если говорить о модулях с готовой реализацией дополнительных структур данных, то первым делом стоит упомянуть модуль
# collections.

# Модуль collections
# Документация https://docs.python.org/3/library/collections.html
# Установка: модуль collections является встроенным модулем Python, поэтому дополнительная установка не требуется.
#
# Подключение: импортируйте его с помощью import collections.

# -------------------------------------------------------------------------------------------------------------------- #
# Представляет собой двустороннюю очередь. Позволяет добавлять и удалять элементы как в начале, так и в конце очереди.
import collections
print("deque --------------------------------------------")
from collections import deque
queue = deque()
queue.append(1) # Добавление элемента в конец очереди
queue.append(2)
queue.appendleft(3) # Добавление элемента в начало очереди
print(queue) # Вывод: deque([3, 1, 2])

item = queue.popleft() # Удаление и получение элемента из начала очереди
print(item) # Вывод: 3
# -------------------------------------------------------------------------------------------------------------------- #
# Используется для подсчёта объектов, с его помощью удобно проводить операции подсчёта и анализа данных.
print("Counter --------------------------------------------")
from collections import Counter

data = [1, 2, 3, 1, 2, 1, 3, 4, 5, 4, 2, 1]
counter = Counter(data)

print(counter) # Вывод: Counter({1: 4, 2: 3, 3: 2, 4: 2, 5: 1})
print(counter[1]) # Вывод: 4 (количество вхождений элемента 1)

most_common = counter.most_common(2)
print(most_common) # Вывод: [(1, 4), (2, 3)] (наиболее часто встречающиеся элементы)
# -------------------------------------------------------------------------------------------------------------------- #
# Позволяет создавать именованные кортежи, которые являются неизменяемыми коллекциями элементов с доступом по именам.
print("namedtuple --------------------------------------------")
from collections import namedtuple

Point = namedtuple('Point', ['x', 'y'])
p = Point(2, 3)

print(p.x) # Вывод: 2
print(p.y) # Вывод: 3
# -------------------------------------------------------------------------------------------------------------------- #
print("--------------------------------------------")
# defaultdict — это подкласс словаря, который предоставляет значение по умолчанию для отсутствующих в словаре ключей.
# Это удобно при обработке словаря, когда нужно избежать проверок наличия ключей.


from collections import defaultdict

# Создание defaultdict со значением по умолчанию — пустым списком
d = defaultdict(list)

d['apple'].append('red') # Добавление значения 'red' к ключу 'apple'
d['banana'].append('yellow') # Добавление значения 'yellow' к ключу 'banana'
d['apple'].append('green') # Добавление значения 'green' к ключу 'apple'

print(d) # Вывод: defaultdict(<class 'list'>, {'apple': ['red', 'green'], 'banana': ['yellow']})
print(d['apple']) # Вывод: ['red', 'green']

print(d['banana']) # Вывод: ['yellow']

print(d['cherry']) # Вывод: [] (пустой список, значение по умолчанию)
print(d) # Вывод: defaultdict(<class 'list'>, {'apple': ['red', 'green'], 'banana': ['yellow'], 'cherry': []})

# В этом примере defaultdict(list) создаёт словарь, в котором с каждым отсутствующим ключом будет автоматически
# сопоставлен пустой список.

# Это позволяет добавлять значения к ключам без предварительной проверки их существования. Если вы обратитесь к
# несуществующему ключу, defaultdict автоматически создаст новую запись со значением по умолчанию.

# Таким образом, использование defaultdict позволяет сделать код более читабельным и избежать необходимости проверки
# наличия ключей в словаре перед добавлением или обращением к ним.