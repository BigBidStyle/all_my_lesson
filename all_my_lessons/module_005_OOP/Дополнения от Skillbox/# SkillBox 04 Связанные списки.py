# Связанные списки
# Связанный список (Linked List) — это структура данных, состоящая из узлов, каждый из которых содержит значение и
# ссылку на следующий узел.

# Отличие связанного списка от обычного (который представлен в Python в виде встроенного типа данных list) заключается
# в способе хранения и организации элементов.

# В связанном списке каждый элемент (узел) содержит ссылку на следующий элемент, а в обычном списке элементы хранятся
# в памяти последовательно.

# Преимущества связанных списков:

# Эффективные операции вставки и удаления.
# Вставка и удаление элементов в середину или в начало списка выполняются быстрее, чем при работе с обычным списком, и
# не требуют перемещения других элементов или реорганизации памяти.
# Простота реализации.
# Реализация связанного списка относительно проста по сравнению с другими структурами данных, такими как графы или
# деревья.
# Гибкость доступа.
# Связанный список обеспечивает эффективный доступ к элементам по индексу, как в обычном списке. Однако он не обладает
# преимуществами произвольного доступа к элементам, как в случае с обычным списком.
# Недостатки связанных списков:

# Ограниченные операции произвольного доступа.
# Доступ к элементам связанного списка осуществляется последовательно, начиная с первого узла. Операции произвольного
# доступа (например, доступ к элементу по индексу) могут требовать прохода по всем предшествующим узлам, что занимает
# O(n) времени.
# Дополнительное использование памяти.
# Каждый узел связанного списка требует дополнительную память для хранения значения и ссылку на следующий узел, что
# может привести к дополнительному использованию памяти.
# Простейшая реализация связанных списков:

class Node:
    def __init__(self, data, next=None):
        # Конструктор узла
       self.data = data  # Значение узла
       self.next = next   # Ссылка на следующий узел
# Так как связанный список — это не какой-либо контейнер с набором объектов, а, скорее, набор обособленных объектов,
# которые ссылаются друг на друга, то уже этого кода будет достаточно, чтобы сделать связанный список.
#
# # Для этого нам надо создать корневой элемент
first = Node(123)
# И следующий элемент, который будет ссылаться на корневой
second = Node(456, first)
# Получаются два отдельных объекта, которые при этом связаны ссылкой (второй объект ссылается на первый).
# В источниках вы, скорее всего, найдёте реализацию, которая будет включать в себя ещё и второй класс LinkedList. Он
# является «менеджером», с помощью которого облегчается работа с набором узлов Node.

# Применение связанных списков:

# Реализация стека и очереди.
# Связанные списки часто используются для реализации стека (LIFO — «последний вошёл, первый вышел») и очереди (FIFO —
# «первый вошёл, первый вышел») структур данных. Ссылки между узлами позволяют эффективно добавлять и удалять элементы
# как в начале, так и в конце списка.
# История действий.
# В некоторых приложениях, таких как текстовые редакторы или веб-браузеры, связанные списки могут использоваться для
# хранения истории действий пользователя. Каждый элемент списка представляет отдельное действие, и перемещение вперёд
# или назад в списке позволяет восстановить предыдущие состояния.
# Реализация графов и деревьев.
# Связанные списки могут использоваться для реализации структур данных, таких как графы и деревья. Каждый узел списка
# может быть связан с другими узлами, представляя отношения и иерархии между элементами.
# Обработка больших объёмов данных.
# Связанные списки могут быть полезны при обработке больших объёмов данных, когда требуется эффективное добавление и
# удаление элементов. Это может быть полезно, например, при чтении и записи больших файлов или при обработке потоков
# данных в режиме реального времени.
# Хранение и управление структурированными данными.
# Связанные списки могут использоваться для хранения и управления структурированными данными, такими как списки
# контактов, задачи в планировщике или элементы меню в приложении. Ссылки между узлами обеспечивают связи и порядок
# элементов.
# Пункт 3 выделен жирным, так как он особенно важен при рассмотрении темы связанных списков.

# Идея хранения связи внутри узла нашла широкое практическое применение и начала развиваться. Принцип хранения одной
# связи, ведущей к следующему объекту, позволяет вам хранить:

# Связь, ведущую как к следующему, так и к предыдущему объекту (такая структура называется двусвязным списком).
# Связи с двумя следующими объектами (такие структуры данных относят к древовидным, их много, и они популярны; вы
# познакомитесь с самым известным из них).
# Связи с неограниченным количеством, в разных направлениях (графы).