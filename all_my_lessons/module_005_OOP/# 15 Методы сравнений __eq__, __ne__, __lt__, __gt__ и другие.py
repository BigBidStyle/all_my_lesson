# Магические методы сравнения.
# __eq__() <-- для равенства ==
# __ne__() <-- для неравенства !=
# __lt__() <-- для оператора меньше <
# __le__() <-- для оператора меньше или равно <=
# __gt__() <-- для оператора больше >
# __ge__() <-- для оператора больше или равно >=


class Clock:
    __DAY = 86400 # число секунд в сутках.

    def __init__(self, seconds: int): # :int <-- нотация для программиста, что бы он передавал целое число.
        if not isinstance(seconds, int):
            raise TypeError('Секунды должны быть целыми числами')
        self.seconds = seconds % self.__DAY

    @classmethod
    def __verify_data(cls, other):
        if not isinstance(other, (int, Clock)): # Проверяем other. Он должен быть экземпляром класса clock или целым числом.
            raise TypeError('Операнд справа (print(c1 == c2 <--) должен иметь тип int или Clock')

        return other if isinstance(other, int) else other.seconds # ... иначе экземпляром clock.

    def __eq__(self, other):
        sc = self.__verify_data(other)
        return self.seconds == sc

    def __lt__(self, other):
        sc = self.__verify_data(other)
        return self.seconds < sc

# ---------------------------------------------------------------- #
c1 = Clock(1000)
c2 = Clock(1000)
# ---------------------------------------------------------------- #
# Метод __eq__
print(c1 == c2) # <-- так сравниваются id экземпляров. Без магического метода __eq__
print(c1 == 1000) # <-- Сравнение с магическим методом __eq__
print(c2 == 1000) # <-- Сравнение с магическим методом __eq__
print(c1 == 5555) # <-- Сравнение с магическим методом __eq__
print('--------')
# Метод __ne__
# Если в классе нет магического метода __ne__ , то автоматически вызывается метод __eq__
# По факту это одно и тоже...
print(c1 != 1000) # <-- Срабатывает потому что прописан метод __eq__
print(c1 != 1200) # <-- Срабатывает потому что прописан метод __eq__
print(' -------')
# ---------------------------------------------------------------- #
# Метод __lt__
print(c1 < c2)
print(c1 < 2000)
print('--------')
# Метод __gt__
# По факту это одно и тоже...
# Но в теории это работает так...
# Если в классе не реализован один из двух магических методов,
# то он меняет операнд местами.
print(c1 > c2)
print('--------')
# ---------------------------------------------------------------- #
# Тоже самое и произойдет и с >= или <=