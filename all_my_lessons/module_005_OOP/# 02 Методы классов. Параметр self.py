# self Указывается всегда, когда хотим, чтобы потом его вызывать через объекты классов.

class Point:    # Определяем класс.
    color = 'red'   # Определяем атрибут.
    circle = 1      # Определяем атрибут.

    def __init__(self):     # Инициализатор __init__ объекта класса Point.
        self.x = None   # Через инициализатор __init__ определяем новый атрибут x классу Point.
        self.y = None   # Через инициализатор __init__ определяем новый атрибут y классу Point.

    def set_coords(self, x: int, y: int) -> None:  # Объявляем метод класса.
        """Определение новых атрибутов."""
        print("Вызов метода set_coords класса Point.")
        self.x = x  # Через метод класса определяем новый атрибут x классу Point.
        self.y = y  # Через метод класса определяем новый атрибут y классу Point.

    def get_coords(self):    # Объявляем метод класса.
        """Возвращает координаты точек."""
        return self.x, self.y  # Возвращаем значения.

pt = Point()    # Создаем экземпляр класса.
pt2 = Point()
pt.set_coords(1, 2)     # Вызываем метод set_coords
pt2.set_coords(5, 5)
print(pt.get_coords(), '<-- Значение pt')       # Вывести значение координат экземпляра класса pt.
print(pt2.get_coords(), '<-- Значение pt2')     # Вывести значение координат экземпляра класса pt2.
print(pt.__dict__, '<-- Свойства pt')  # Вывести локальные свойства, которые получились в экземпляре класса pt.
print(pt2.__dict__, '<-- Свойства pt2')
