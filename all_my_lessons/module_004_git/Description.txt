git --version <-- Просмотреть версию Git.
sudo apt get install git <-- Установка git на Linux.
------------------------------------------------------------------------------------------------------------------------
Установка имени пользователя --> git config --global user.name "имя пользователя"
Установка почты пользователя  --> git config --global user.email "почта пользователя"
git config --list <--Проверить введенные настройки.
------------------------------------------------------------------------------------------------------------------------
pwd <-- Просмотреть путь рабочий папки.
ls -la <-- Просмотреть содержимое папки.
git status <-- Посмотреть есть ли в указанной папке репозиторий.
git status <-- Просмотреть статус файлов...
    Changes to be committed: <-- Добавлены в индекс и отображаются зеленым цветом.
    Changes not staged for commit: <-- Не добавлены в индекс и отображаются красным цветом.
    Untracked files: <-- Файлы которые не отслеживаются системой контроля Git.
git init <-- Создание репозитория в папке проекта.
Примечание: Переход в папку у которой есть пробелы осуществляется так 'Python & Git'
------------------------------------------------------------------------------------------------------------------------
git add . <-- Выбрать все изменения для коммита.
git add <name file> <-- Выбрать файл для коммита.
git commit -m 'название коммитa' <-- Закомитить изменения в Git.

.gitignore
*.log <-- Все файлы с расширением .log будут исключаться из системы контроля Git...
!sample.log <-- ... Кроме файла sample.
Log/ <-- Папка log не будет отслеживаться системой контроля Git.
------------------------------------------------------------------------------------------------------------------------
git show <-- Информация о последнем коммите и его содержимом
q - выход из просмотра git show
git log <-- Просмотреть всю историю сохранения изменений в репозитории.
------------------------------------------------------------------------------------------------------------------------
Работа с репозиторием.
# Если нет локального репозитория, а есть удаленный репозиторий, то его можно клонировать
git clone path <-- Клонирование репозитория с удаленного сервера.

# Если нет локального репозитория и нет удаленного репозитория
1) Создаем удаленный репозиторий.
2) В терминале выполнить команды:
    cd path <-- Путь, к папке репозитория
    git init <-- Создаем в папке репозиторий
    git status <-- Проверяем созданный репозиторий и просматриваем файлы
    git add . <-- Добавляем все файлы в индекс или
    git add <name file> <-- Выбрать файл для коммита.
    git commit -m "first commit" <-- Закомитим изменения.
    git remote add origin git@github.com:BigBidStyle/lesson_git.git <-- Добавить путь к удаленному репозиторию.
    git remote -v <-- Проверяем путь к удаленному репозиторию.
    git push -u origin master <-- Отправить изменения на сервер.

# Если есть локальный репозиторий, но нет удаленного.
1) Создаем удаленный репозиторий.
2) Выполнить команды в терминале
git remote add origin git@github.com:BigBidStyle/lesson_git.git
git push -u origin master

Примечания:
git remote remove origin <-- Удалить путь к удаленному репозиторию.
git pull <-- Получить все изменения с удаленного сервера.

Флаг -u <-- автоматически устанавливает связь между локальным и удаленным репозиторием.
И после того как мы впервые отправили изменения на сервер командой git push -u origin master, то флагом -u, в
дальнейшем можно не пользоваться, а писать простую команду git push.
------------------------------------------------------------------------------------------------------------------------
Ветки!
git checkout -b new_branch <-- Создается новая ветка и переключается на нее.
На самом деле эта команда объединяет две других команды:
git checkout branch new_branch <-- Эта команда создает новую ветку
git checkout new_branch <-- Эта команда переходит на текущею ветку
git branch <-- Посмотреть локальные ветки и на какой ветки находиться Git.
git branch -a <-- просмотреть все ветки, как локальные, так и удаленные.
git push --set-upstream origin new_branch <-- Локально созданную ветку отправляем на удаленный сервер.
------------------------------------------------------------------------------------------------------------------------
Откладывание изменений.
git stash <-- Отложить изменения.
git stash pop <-- Вернуть отложенные изменения.
git stash list <-- Просмотреть список отложенных коммитов.
git stash drop 0 <-- Удалить отложенное изменение под номером 0.
------------------------------------------------------------------------------------------------------------------------
Слияние веток.
Если находимся на ветке master, то командой...
git merge new_merge
можно слить ветку new_branch в ветку master.
------------------------------------------------------------------------------------------------------------------------
Просмотр изменений.
git diff <name_file> # <-- Просмотреть изменения в файле перед коммитом.
git diff # <-- Просмотреть все изменения перед коммитом.
git diff <№ <-старого коммита № <-нового коммита <name_file>> <-- Просмотреть изменения между коммитами одного файла.
git diff <№ <-старого коммита № <-нового коммита> # <-- Просмотреть все изменения между коммитами.
NOTE--> Номера коммитов можно писать не целиком, а использовать только первые несколько значений.
git diff <name_file_1> <name_file_2> <--  Cравнить два файла находящиеся не в репозитории.
git blame <name_file> # <-- Просмотреть кто, когда и что изменял файл.
------------------------------------------------------------------------------------------------------------------------
Удаление не закоммиченных изменений.
git restore <name_file> # <-- Отменить изменения в файле.
git restore --staged <name_file> # <-- Исключить файл из индекса.
git reset --hard    # <-- Отменить изменения во всех файлах включая добавленные в индекс.
git rm --cached <name_file> # <-- Удалить файл из системы контроля git.(и вручную добавить в gitignore)
------------------------------------------------------------------------------------------------------------------------
Отмена закомиченных изменений.
git revert <№ <-- Номер коммита>